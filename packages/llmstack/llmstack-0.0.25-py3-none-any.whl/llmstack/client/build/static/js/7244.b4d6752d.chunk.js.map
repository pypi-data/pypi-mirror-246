{"version":3,"file":"static/js/7244.b4d6752d.chunk.js","mappings":"2TAee,SAASA,EAAsBC,GAC5C,IAAQC,EAAoDD,EAApDC,SAAUC,EAA0CF,EAA1CE,GAAIC,EAAsCH,EAAtCG,MAAOC,EAA+BJ,EAA/BI,aAAcC,EAAiBL,EAAjBK,aAErCC,EAAYH,EAAQI,KAAKC,MAAML,GAAS,KAExCM,EAAe,SAACC,GACpBT,EAASM,KAAKI,UAAUD,GAC1B,EAEA,OACEE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,QAASC,SAAA,EAC3BJ,EAAAA,EAAAA,MAACK,EAAAA,EAAW,CAACH,GAAI,CAAEI,MAAO,SAAUF,SAAA,EAClCG,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAClB,GAAE,GAAAmB,OAAKnB,EAAE,UAASc,SAAC,eAC/BJ,EAAAA,EAAAA,MAACU,EAAAA,EAAM,CACLC,QAAO,GAAAF,OAAKnB,EAAE,UACdA,GAAIA,EACJsB,MAAM,YACNrB,OAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAWmB,OAAQ,GAC1BxB,SAAU,SAACyB,GAAK,OAAKjB,EAAa,CAAEgB,KAAMC,EAAMC,OAAOxB,OAAQ,EAC/DyB,YAAY,qBACZC,QAAQ,SACRf,GAAI,CAAEgB,WAAY,SAAUd,SAAA,EAE5BG,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAAC5B,MAAM,WAAUa,SAAC,cAC3BG,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAAC5B,MAAM,SAAQa,SAAC,YACzBG,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAAC5B,MAAM,OAAMa,SAAC,mBAGN,cAAX,OAATV,QAAS,IAATA,OAAS,EAATA,EAAWmB,QACVN,EAAAA,EAAAA,KAACa,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAclB,UAC/CG,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CACbC,YAAahC,EACbiC,YAAahC,EACbiC,UAAW,CAAEC,QAAS,IACtBC,aAAW,EACXrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAWoC,gBACzBzC,SAAU,SAACE,GACTM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,WACNmB,WAAYzC,EAAM0C,OAAO,cACzBC,WAAY3C,EAAM0C,OAAO,YACzBH,eAAgBvC,IAEpB,EACAqB,MAAM,oBAIS,YAAX,OAATlB,QAAS,IAATA,OAAS,EAATA,EAAWmB,QACVN,EAAAA,EAAAA,KAAA,OAAAH,UACEJ,EAAAA,EAAAA,MAACoB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAclB,SAAA,EAC/CG,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CACbC,YAAahC,EACbiC,YAAahC,EACbiC,UAAW,CAAEC,QAAS,IACtBC,aAAW,EACXrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAWoC,gBACzBzC,SAAU,SAACE,GACTM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,SACNmB,WAAYzC,EAAM0C,OAAO,cACzBC,WAAY3C,EAAM0C,OAAO,YACzBH,eAAgBvC,IAEpB,EACAqB,MAAM,yBAERL,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CACRvB,MAAM,4BACNrB,MAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAW0C,SAClBvB,KAAK,SACLxB,SAAU,SAACyB,GAAK,OACdjB,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,SACNuB,SAAUtB,EAAMC,OAAOxB,QACvB,KAGNgB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACTT,aAAW,EACXrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAW4C,SAAU,cACnCjD,SAAU,SAACE,GACTM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,SACNyB,SAAU/C,EAAM0C,OAAO,gBAE3B,EACArB,MAAM,2BAKO,UAAX,OAATlB,QAAS,IAATA,OAAS,EAATA,EAAWmB,QACVb,EAAAA,EAAAA,MAACoB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAclB,SAAA,EAC/CG,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CACRvB,MAAM,sBACNrB,MAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAW6C,gBAClBlD,SAAU,SAACyB,GAAK,OACdjB,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,OACN0B,gBAAiBzB,EAAMC,OAAOxB,QAC9B,KAGNgB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACTT,aAAW,EACXrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAW4C,SAAU,cACnCjD,SAAU,SAACE,GACTM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,OACNyB,SAAU/C,EAAM0C,OAAO,gBAE3B,EACArB,MAAM,2BAMlB,C,4SCnIM4B,EAAS,CACbC,WAAY,CACVC,SAAU,CACR7B,KAAM,SACN8B,MAAO,YAETC,WAAY,CACV/B,KAAM,SACN8B,MAAO,aACPE,OAAQ,cAEVnD,UAAW,CACTmB,KAAM,SACN8B,MAAO,YACPE,OAAQ,qBAKRC,EAAY,CAChB,WAAY,CAAC,WAAY,aAAc,aACvCJ,SAAU,CACR,iBAAkB,8BAEpBE,WAAY,CACV,iBAAkB,wCAClB,YAAa,cAEflD,UAAW,CACT,iBAAkB,6CAClB,YAAa,oBAIF,SAASqD,EAAiC3D,GACvD,IAAM4D,GAAcC,EAAAA,EAAAA,IAAeC,EAAAA,IAEnC,OACE3C,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEI,MAAO,MAAO6C,OAAQ,OAAQ/C,UACvCG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAc,CACbC,OAAQb,EACRc,UAAWA,EAAAA,GACXC,UAAQxB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHe,GACA,CACD,yBAA0B,CACxBU,UAAU,KAIhBC,SAAUrE,EAAMG,MAChBF,SAAU,SAAAqE,GAAmB,IAAhBD,EAAQC,EAARD,SACXrE,EAAMC,UAAQ0C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACX0B,GAAQ,IACXE,kBAAmBX,EAAYY,MAC7B,SAACC,GAAU,OAAKA,EAAWC,QAAiB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUb,WAAU,IAE1DmB,aAAsB,OAARN,QAAQ,IAARA,GAAAA,EAAU/D,UACpBC,KAAKC,MAAc,OAAR6D,QAAQ,IAARA,OAAQ,EAARA,EAAU/D,WACrB,OAER,EACAsE,QAAS,CACPpB,WAAY,SAACxD,GAAK,OAChBmB,EAAAA,EAAAA,KAAC0D,EAAAA,GAAkBlC,EAAAA,EAAAA,GAAA,CAACmC,UAAU,GAAW9E,GAAS,EAEpD+E,gBAAiB,SAAC/E,GAAK,OACrBmB,EAAAA,EAAAA,KAACpB,EAAAA,GAAqB4C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChB3C,GAAK,IACTG,MAAOH,EAAMG,MACbC,aAAcqC,MAASuC,IAAI,EAAG,SAC9B3E,aAAcoC,MAASuC,IAAI,EAAG,SAC9B9E,GAAG,qBACH,MAMd,C,cChFe,SAAS+E,EAA6BjF,GACnD,IAAAkF,GAA0CC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAAkDL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvDE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,GAAkET,EAAAA,EAAAA,UAChE,IACDU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAFME,EAAyBD,EAAA,GAAEE,EAA4BF,EAAA,GA+B9D,OA3BAG,EAAAA,EAAAA,YAAU,WACS,OAAbV,QAAa,IAAbA,GAAAA,EAAe9B,YACjByC,EAAAA,EAAAA,KACGC,IAAI,oBAAD7E,OAAkC,OAAbiE,QAAa,IAAbA,OAAa,EAAbA,EAAe9B,WAAU,aACjD2C,MAAK,SAACC,GACLT,GAAqB,SAACU,GACpB,IAAMC,EAAmCF,EAASG,KAAKC,QACrD,SAACC,GAAK,OACJA,EAAMC,aACW,UAAjBD,EAAME,QACNF,EAAMG,OAAOC,aAAaC,OAAS,CAAC,IAExC,OAAAC,EAAAA,EAAAA,GAAWT,EACb,GACF,IACCU,OAAM,SAACC,GAAW,IAADC,EAAAC,EACE,QAAlBD,EAAID,EAAMb,gBAAQ,IAAAc,GAAM,QAANC,EAAdD,EAAgBX,YAAI,IAAAY,GAApBA,EAAsBC,UACxBC,EAAAA,EAAAA,IAAgBJ,EAAMb,SAASG,KAAKa,QAAS,CAC3CvF,QAAS,SAGf,IAEF8D,EAAqB,GAEzB,GAAG,CAACL,KAGF1E,EAAAA,EAAAA,MAAC0G,EAAAA,GAAI,CAACC,WAAS,EAACzG,GAAI,CAAE0G,OAAQ,SAAUxG,SAAA,EACtCG,EAAAA,EAAAA,KAACmG,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAI5G,GAAI,CAAE0G,OAAQ,OAAQxG,UACvCJ,EAAAA,EAAAA,MAAC+G,EAAAA,EAAK,CAAC7G,GAAI,CAAE8G,WAAY,QAAS7D,OAAQ,OAAQ/C,SAAA,EAChDG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAAChG,QAAQ,KAAKf,GAAI,CAAEgH,WAAY,OAAQ9G,SAAC,mBAGpDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAO,KACR5G,EAAAA,EAAAA,KAACwC,EAAgC,CAC/B1D,SAAU,SAACoE,GACTkB,EAAiBlB,EACnB,EACAlE,MAAOmF,UAIbnE,EAAAA,EAAAA,KAACmG,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAI5G,GAAI,CAAE0G,OAAQ,OAAQxG,UACvCJ,EAAAA,EAAAA,MAAC+G,EAAAA,EAAK,CAAC7G,GAAI,CAAE8G,WAAY,QAAS7D,OAAQ,OAAQ/C,SAAA,EAChDG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAAChG,QAAQ,KAAKf,GAAI,CAAEgH,WAAY,OAAQ9G,SAAC,wBAGpDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAO,IACM,OAAbzC,QAAa,IAAbA,GAAAA,EAAe9B,YACdrC,EAAAA,EAAAA,KAAC6G,EAAAA,GAAQ,CACPC,mBAAiB,EACjBC,QAAS,CACP,CAAEC,MAAO,OAAQC,WAAY,OAAQlH,MAAO,KAC5C,CAAEiH,MAAO,OAAQC,WAAY,OAAQlH,MAAO,MAE9CmH,aAAc,CACZC,WAAY,CACVC,gBAAiB,CACfC,SAAU,MAIhBC,KAAM/C,EAAkBgD,KAAI,SAACjC,GAC3B,MAAO,CACLvG,GAAIuG,EAAM/B,KACViE,KAAMlC,EAAMkC,KACZC,KAAMnC,EAAMmC,KAEhB,IACAC,gBAAiB,CAAC,IAClBC,4BAA0B,EAC1BhI,GAAI,CAAEI,MAAO,QACb6H,kBAAmBjD,EACnBkD,0BAA2B,SAACC,GAC1BlD,EAA6BkD,EAC/B,KAGF9H,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,sCAIdG,EAAAA,EAAAA,KAACmG,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAI5G,GAAI,CAAE0G,OAAQ,OAAQxG,UACvCG,EAAAA,EAAAA,KAAC+H,EAAAA,EAAM,CACLrH,QAAQ,YACRsH,MAAM,UACNC,WACgB,OAAb9D,QAAa,IAAbA,GAAAA,EAAeX,eACqB,IAArCmB,EAA0BgB,OAE5BuC,QAAS,WAAO,IAADC,GACbrD,EAAAA,EAAAA,KACGsD,KAAK,+BAAgC,CACpCjG,SAAuB,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAehC,SACzBkG,SAAuB,OAAblE,QAAa,IAAbA,GAAwB,QAAXgE,EAAbhE,EAAemE,iBAAS,IAAAH,OAAX,EAAbA,EAA0B5E,KACpCpE,UAAwB,OAAbgF,QAAa,IAAbA,OAAa,EAAbA,EAAeX,aAC1B+E,mBAAoB5D,IAErBK,MAAK,SAACC,IACLiB,EAAAA,EAAAA,IAAgB,4CAA6C,CAC3DxF,QAAS,YAEX8H,OAAOC,SAASC,KAAO,OACzB,IACC7C,OAAM,SAACC,GAAW,IAAD6C,EAAAC,EACE,QAAlBD,EAAI7C,EAAMb,gBAAQ,IAAA0D,GAAM,QAANC,EAAdD,EAAgBvD,YAAI,IAAAwD,GAApBA,EAAsB3C,UACxBC,EAAAA,EAAAA,IAAgBJ,EAAMb,SAASG,KAAKa,QAAS,CAC3CvF,QAAS,SAGf,GACJ,EAAEb,SACH,eAMT,C","sources":["components/schedule/FrequencyPickerWidget.jsx","components/schedule/AddDataRefreshScheduleConfigForm.jsx","pages/AddDatasourceRefreshSchedule.jsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n} from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterMoment } from \"@mui/x-date-pickers/AdapterMoment\";\nimport moment from \"moment\";\n\nimport { DateTimePicker, DatePicker } from \"@mui/x-date-pickers\";\n\nexport default function FrequencyPickerWidget(props) {\n  const { onChange, id, value, minStartTime, maxStartTime } = props;\n\n  const frequency = value ? JSON.parse(value) : null;\n\n  const handleChange = (newValue) => {\n    onChange(JSON.stringify(newValue));\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <FormControl sx={{ width: \"120px\" }}>\n        <InputLabel id={`${id}-label`}>Frequency</InputLabel>\n        <Select\n          labelId={`${id}-label`}\n          id={id}\n          label=\"Frequency\"\n          value={frequency?.type || \"\"}\n          onChange={(event) => handleChange({ type: event.target.value })}\n          placeholder=\"Select a frequency\"\n          variant=\"filled\"\n          sx={{ lineHeight: \"0.5em\" }}\n        >\n          <MenuItem value=\"run_once\">Run Once</MenuItem>\n          <MenuItem value=\"repeat\">Repeat</MenuItem>\n          <MenuItem value=\"cron\">Cron Job</MenuItem>\n        </Select>\n      </FormControl>\n      {frequency?.type === \"run_once\" && (\n        <LocalizationProvider dateAdapter={AdapterMoment}>\n          <DateTimePicker\n            minDateTime={minStartTime}\n            maxDateTime={maxStartTime}\n            timeSteps={{ minutes: 15 }}\n            disablePast\n            value={moment(frequency?.scheduled_time)}\n            onChange={(value) => {\n              handleChange({\n                ...frequency,\n                type: \"run_once\",\n                start_date: value.format(\"YYYY-MM-DD\"),\n                start_time: value.format(\"HH:mm:ss\"),\n                scheduled_time: value,\n              });\n            }}\n            label=\"Schedule Time\"\n          />\n        </LocalizationProvider>\n      )}\n      {frequency?.type === \"repeat\" && (\n        <div>\n          <LocalizationProvider dateAdapter={AdapterMoment}>\n            <DateTimePicker\n              minDateTime={minStartTime}\n              maxDateTime={maxStartTime}\n              timeSteps={{ minutes: 15 }}\n              disablePast\n              value={moment(frequency?.scheduled_time)}\n              onChange={(value) => {\n                handleChange({\n                  ...frequency,\n                  type: \"repeat\",\n                  start_date: value.format(\"YYYY-MM-DD\"),\n                  start_time: value.format(\"HH:mm:ss\"),\n                  scheduled_time: value,\n                });\n              }}\n              label=\"Schedule Start Time\"\n            />\n            <TextField\n              label=\"Repeat Interval (in days)\"\n              value={frequency?.interval}\n              type=\"number\"\n              onChange={(event) =>\n                handleChange({\n                  ...frequency,\n                  type: \"repeat\",\n                  interval: event.target.value,\n                })\n              }\n            />\n            <DatePicker\n              disablePast\n              value={moment(frequency?.end_date, \"YYYY-MM-DD\")}\n              onChange={(value) => {\n                handleChange({\n                  ...frequency,\n                  type: \"repeat\",\n                  end_date: value.format(\"YYYY-MM-DD\"),\n                });\n              }}\n              label=\"Schedule End Date\"\n            />\n          </LocalizationProvider>\n        </div>\n      )}\n      {frequency?.type === \"cron\" && (\n        <LocalizationProvider dateAdapter={AdapterMoment}>\n          <TextField\n            label=\"Cron Job Expression\"\n            value={frequency?.cron_expression}\n            onChange={(event) =>\n              handleChange({\n                ...frequency,\n                type: \"cron\",\n                cron_expression: event.target.value,\n              })\n            }\n          />\n          <DatePicker\n            disablePast\n            value={moment(frequency?.end_date, \"YYYY-MM-DD\")}\n            onChange={(value) => {\n              handleChange({\n                ...frequency,\n                type: \"cron\",\n                end_date: value.format(\"YYYY-MM-DD\"),\n              });\n            }}\n            label=\"Schedule End Date\"\n          />\n        </LocalizationProvider>\n      )}\n    </Box>\n  );\n}\n","import validator from \"@rjsf/validator-ajv8\";\nimport ThemedJsonForm from \"../ThemedJsonForm\";\nimport FrequencyPickerWidget from \"./FrequencyPickerWidget\";\nimport { useRecoilValue } from \"recoil\";\nimport { dataSourcesState } from \"../../data/atoms\";\nimport { Box } from \"@mui/material\";\nimport { DataSourceSelector } from \"../datasource/DataSourceSelector\";\nimport moment from \"moment\";\n\nconst SCHEMA = {\n  properties: {\n    job_name: {\n      type: \"string\",\n      title: \"Job Name\",\n    },\n    datasource: {\n      type: \"string\",\n      title: \"Datasource\",\n      widget: \"datasource\",\n    },\n    frequency: {\n      type: \"string\",\n      title: \"Frequency\",\n      widget: \"frequencyPicker\",\n    },\n  },\n};\n\nconst UI_SCHEMA = {\n  \"ui:order\": [\"job_name\", \"datasource\", \"frequency\"],\n  job_name: {\n    \"ui:description\": \"Enter a name for this job.\",\n  },\n  datasource: {\n    \"ui:description\": \"Select a datasource to setup refresh.\",\n    \"ui:widget\": \"datasource\",\n  },\n  frequency: {\n    \"ui:description\": \"Select a frequency to run the application.\",\n    \"ui:widget\": \"frequencyPicker\",\n  },\n};\n\nexport default function AddDataRefreshScheduleConfigForm(props) {\n  const dataSources = useRecoilValue(dataSourcesState);\n\n  return (\n    <Box sx={{ width: \"95%\", margin: \"5px\" }}>\n      <ThemedJsonForm\n        schema={SCHEMA}\n        validator={validator}\n        uiSchema={{\n          ...UI_SCHEMA,\n          ...{\n            \"ui:submitButtonOptions\": {\n              norender: true,\n            },\n          },\n        }}\n        formData={props.value}\n        onChange={({ formData }) => {\n          props.onChange({\n            ...formData,\n            datasourceDetails: dataSources.find(\n              (dataSource) => dataSource.uuid === formData?.datasource,\n            ),\n            frequencyObj: formData?.frequency\n              ? JSON.parse(formData?.frequency)\n              : null,\n          });\n        }}\n        widgets={{\n          datasource: (props) => (\n            <DataSourceSelector multiple={false} {...props} />\n          ),\n          frequencyPicker: (props) => (\n            <FrequencyPickerWidget\n              {...props}\n              value={props.value}\n              minStartTime={moment().add(1, \"hours\")}\n              maxStartTime={moment().add(1, \"years\")}\n              id=\"frequency-picker\"\n            />\n          ),\n        }}\n      />\n    </Box>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { enqueueSnackbar } from \"notistack\";\n\nimport { Grid, Divider, Typography, Button, Stack } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport AddDataRefreshScheduleConfigForm from \"../components/schedule/AddDataRefreshScheduleConfigForm\";\nimport { axios } from \"../data/axios\";\n\nexport default function AddDatasourceRefreshSchedule(props) {\n  const [configuration, setConfiguration] = useState({});\n  const [dataSourceEntries, setDataSourceEntries] = useState([]);\n  const [dataSourceEntriesSelected, setDataSourceEntriesSelected] = useState(\n    [],\n  );\n\n  useEffect(() => {\n    if (configuration?.datasource) {\n      axios()\n        .get(`/api/datasources/${configuration?.datasource}/entries`)\n        .then((response) => {\n          setDataSourceEntries((prev) => {\n            const dataSourceEntriesWithSyncSupport = response.data.filter(\n              (entry) =>\n                entry.sync_config &&\n                entry.status === \"READY\" &&\n                entry.config.document_ids.length > 0,\n            );\n            return [...dataSourceEntriesWithSyncSupport];\n          });\n        })\n        .catch((error) => {\n          if (error.response?.data?.message) {\n            enqueueSnackbar(error.response.data.message, {\n              variant: \"error\",\n            });\n          }\n        });\n    } else {\n      setDataSourceEntries([]);\n    }\n  }, [configuration]);\n\n  return (\n    <Grid container sx={{ height: \"100vh\" }}>\n      <Grid item xs={12} sx={{ height: \"45%\" }}>\n        <Stack sx={{ alignItems: \"start\", margin: \"5px\" }}>\n          <Typography variant=\"h6\" sx={{ marginLeft: \"2px\" }}>\n            Configuration\n          </Typography>\n          <Divider />\n          <AddDataRefreshScheduleConfigForm\n            onChange={(formData) => {\n              setConfiguration(formData);\n            }}\n            value={configuration}\n          />\n        </Stack>\n      </Grid>\n      <Grid item xs={12} sx={{ height: \"45%\" }}>\n        <Stack sx={{ alignItems: \"start\", margin: \"5px\" }}>\n          <Typography variant=\"h6\" sx={{ marginLeft: \"2px\" }}>\n            Datasource Entries\n          </Typography>\n          <Divider />\n          {configuration?.datasource ? (\n            <DataGrid\n              checkboxSelection\n              columns={[\n                { field: \"name\", headerName: \"Name\", width: 500 },\n                { field: \"size\", headerName: \"Size\", width: 100 },\n              ]}\n              initialState={{\n                pagination: {\n                  paginationModel: {\n                    pageSize: 10,\n                  },\n                },\n              }}\n              rows={dataSourceEntries.map((entry) => {\n                return {\n                  id: entry.uuid,\n                  name: entry.name,\n                  size: entry.size,\n                };\n              })}\n              pageSizeOptions={[10]}\n              disableRowSelectionOnClick\n              sx={{ width: \"100%\" }}\n              rowSelectionModel={dataSourceEntriesSelected}\n              onRowSelectionModelChange={(newSelection) => {\n                setDataSourceEntriesSelected(newSelection);\n              }}\n            ></DataGrid>\n          ) : (\n            <strong>Please Select a Data Source</strong>\n          )}\n        </Stack>\n      </Grid>\n      <Grid item xs={12} sx={{ height: \"10%\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={\n            !configuration?.frequencyObj ||\n            dataSourceEntriesSelected.length === 0\n          }\n          onClick={() => {\n            axios()\n              .post(\"/api/jobs/datasource_refresh\", {\n                job_name: configuration?.job_name,\n                app_uuid: configuration?.appDetail?.uuid,\n                frequency: configuration?.frequencyObj,\n                datasource_entries: dataSourceEntriesSelected,\n              })\n              .then((response) => {\n                enqueueSnackbar(\"Successfully Scheduled Datasource refresh\", {\n                  variant: \"success\",\n                });\n                window.location.href = \"/jobs\";\n              })\n              .catch((error) => {\n                if (error.response?.data?.message) {\n                  enqueueSnackbar(error.response.data.message, {\n                    variant: \"error\",\n                  });\n                }\n              });\n          }}\n        >\n          Submit\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n"],"names":["FrequencyPickerWidget","props","onChange","id","value","minStartTime","maxStartTime","frequency","JSON","parse","handleChange","newValue","stringify","_jsxs","Box","sx","display","children","FormControl","width","_jsx","InputLabel","concat","Select","labelId","label","type","event","target","placeholder","variant","lineHeight","MenuItem","LocalizationProvider","dateAdapter","AdapterMoment","DateTimePicker","minDateTime","maxDateTime","timeSteps","minutes","disablePast","moment","scheduled_time","_objectSpread","start_date","format","start_time","TextField","interval","DatePicker","end_date","cron_expression","SCHEMA","properties","job_name","title","datasource","widget","UI_SCHEMA","AddDataRefreshScheduleConfigForm","dataSources","useRecoilValue","dataSourcesState","margin","ThemedJsonForm","schema","validator","uiSchema","norender","formData","_ref","datasourceDetails","find","dataSource","uuid","frequencyObj","widgets","DataSourceSelector","multiple","frequencyPicker","add","AddDatasourceRefreshSchedule","_useState","useState","_useState2","_slicedToArray","configuration","setConfiguration","_useState3","_useState4","dataSourceEntries","setDataSourceEntries","_useState5","_useState6","dataSourceEntriesSelected","setDataSourceEntriesSelected","useEffect","axios","get","then","response","prev","dataSourceEntriesWithSyncSupport","data","filter","entry","sync_config","status","config","document_ids","length","_toConsumableArray","catch","error","_error$response","_error$response$data","message","enqueueSnackbar","Grid","container","height","item","xs","Stack","alignItems","Typography","marginLeft","Divider","DataGrid","checkboxSelection","columns","field","headerName","initialState","pagination","paginationModel","pageSize","rows","map","name","size","pageSizeOptions","disableRowSelectionOnClick","rowSelectionModel","onRowSelectionModelChange","newSelection","Button","color","disabled","onClick","_configuration$appDet","post","app_uuid","appDetail","datasource_entries","window","location","href","_error$response2","_error$response2$data"],"sourceRoot":""}