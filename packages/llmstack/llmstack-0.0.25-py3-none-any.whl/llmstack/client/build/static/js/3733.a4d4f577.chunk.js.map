{"version":3,"file":"static/js/3733.a4d4f577.chunk.js","mappings":"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","sources":["components/apps/StreamingVideoPlayer.jsx","components/apps/MarkdownRenderer.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { get } from \"lodash\";\nimport { streamChunksState } from \"../../data/atoms\";\n\nfunction StreamingVideoPlayer({ streamKey, messageId }) {\n  const videoRef = useRef(null);\n  const sourceBufferRef = useRef(null);\n  const mediaSource = useRef(new MediaSource());\n  const [isSourceBufferReady, setIsSourceBufferReady] = useState(false);\n  const isVideoSrcSet = useRef(false); // New ref to track if video's src is set\n  const streamChunks = useRecoilValue(streamChunksState);\n  const chunks = get(\n    streamChunks,\n    messageId ? `${messageId}.${streamKey}` : streamKey,\n    [],\n  );\n  const [chunksProcessed, setChunksProcessed] = useState(0);\n\n  useEffect(() => {\n    // Initialization logic\n    const video = videoRef.current;\n\n    if (!isVideoSrcSet.current) {\n      video.src = URL.createObjectURL(mediaSource.current);\n      isVideoSrcSet.current = true;\n    }\n\n    videoRef.current.addEventListener(\"error\", (e) => {\n      console.error(\"Video error:\", videoRef.current.error);\n    });\n\n    function sourceOpen() {\n      if (!sourceBufferRef.current) {\n        sourceBufferRef.current = mediaSource.current.addSourceBuffer(\n          \"video/mp4; codecs=avc1.64001e\",\n        );\n        sourceBufferRef.current.addEventListener(\"error\", (e) => {\n          console.error(\"SourceBuffer error:\", e);\n        });\n        sourceBufferRef.current.addEventListener(\"updateend\", (e) => {\n          console.debug(\"SourceBuffer Update end\", e);\n        });\n        sourceBufferRef.current.addEventListener(\"updatestart\", (e) => {\n          console.debug(\"SourceBuffer Update start\", e);\n        });\n        sourceBufferRef.current.addEventListener(\"abort\", (e) => {\n          console.debug(\"SourceBuffer aborted\", e);\n        });\n        sourceBufferRef.current.addEventListener(\"update\", (e) => {\n          console.debug(\"SourceBuffer Updated\", e);\n        });\n        setIsSourceBufferReady(true);\n      }\n    }\n\n    mediaSource.current.addEventListener(\"sourceopen\", sourceOpen);\n  }, [chunksProcessed]);\n\n  useEffect(() => {\n    if (!isSourceBufferReady || !sourceBufferRef.current || chunks.length === 0)\n      return;\n\n    let currentChunkIndex = chunksProcessed;\n\n    function updateSourceBuffer() {\n      if (sourceBufferRef.current.updating) return;\n      if (currentChunkIndex >= chunks.length) return;\n\n      const base64String = chunks[currentChunkIndex];\n      const uint8Array = base64ToArrayBuffer(base64String);\n      try {\n        sourceBufferRef.current.appendBuffer(uint8Array);\n        currentChunkIndex += 1;\n        setChunksProcessed(currentChunkIndex);\n      } catch (e) {\n        console.error(e);\n      }\n\n      console.debug(\n        \"Current chunk index\",\n        currentChunkIndex,\n        uint8Array,\n        sourceBufferRef.current,\n        mediaSource.current.readyState,\n        sourceBufferRef.current.buffered,\n      );\n    }\n\n    sourceBufferRef.current.addEventListener(\"updateend\", updateSourceBuffer);\n    updateSourceBuffer();\n\n    return () => {\n      sourceBufferRef.current.removeEventListener(\n        \"updateend\",\n        updateSourceBuffer,\n      );\n    };\n  }, [chunks, isSourceBufferReady, chunksProcessed]);\n\n  function base64ToArrayBuffer(base64) {\n    const binaryString = atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  return chunks ? (\n    <video ref={videoRef} autoPlay width={\"100%\"} controls />\n  ) : null;\n}\n\nexport default StreamingVideoPlayer;\n","import ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport loadingImage from \"../../assets/images/loading.gif\";\nimport ThemedJsonForm from \"../ThemedJsonForm\";\nimport validator from \"@rjsf/validator-ajv8\";\nimport { useState } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport { Box, Button, Stack, Typography } from \"@mui/material\";\nimport { ContentCopyOutlined } from \"@mui/icons-material\";\nimport StreamingVideoPlayer from \"./StreamingVideoPlayer\";\n\nfunction FunctionFormComponent(props) {\n  // Render a form component with submit button\n  const [formData, setFormData] = useState({});\n  const [submitBtnDisabled, setSubmitBtnDisabled] = useState(false);\n  try {\n    const form = JSON.parse(props.children[0]);\n    return (\n      <ThemedJsonForm\n        schema={form}\n        formData={formData}\n        validator={validator}\n        onChange={(e) => {\n          setFormData(e.formData);\n        }}\n        submitBtn={\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setSubmitBtnDisabled(true);\n              props.onFormSubmit(formData);\n            }}\n            disabled={submitBtnDisabled}\n          >\n            Submit\n          </Button>\n        }\n      />\n    );\n  } catch (e) {\n    console.log(e);\n  }\n  return <div>Unable to render form</div>;\n}\n\nexport default function MarkdownRenderer(props) {\n  const messageId = props.messageId;\n  return (\n    <ReactMarkdown\n      {...props}\n      remarkPlugins={[remarkGfm]}\n      components={{\n        img: ({ node, ...props }) => {\n          const { alt, src } = props;\n          // We provide alt text and style as altText|style where style is a string\n          const [altText, style] = alt.split(\"|\");\n          let styleJson = {};\n          try {\n            styleJson = JSON.parse(style);\n          } catch (e) {\n            // Do nothing\n          }\n\n          if (src.startsWith(\"data:audio/\") || altText === \"Audio\") {\n            return (\n              <audio\n                controls\n                style={{ ...{ display: \"block\" }, ...styleJson }}\n                src={src}\n                autoPlay\n              >\n                {\" \"}\n              </audio>\n            );\n          }\n          // If src is a video that can be played on the browser, render it as a video\n          if (\n            src.endsWith(\".mp4\") ||\n            src.endsWith(\".webm\") ||\n            src.endsWith(\".ogg\")\n          ) {\n            return (\n              <video\n                controls\n                style={{\n                  ...{\n                    display: \"block\",\n                    maxWidth: \"100%\",\n                    boxShadow: \"0px 0px 10px 1px #7d7d7d\",\n                  },\n                  ...styleJson,\n                }}\n                src={src}\n              >\n                Unable to load video\n              </video>\n            );\n          }\n\n          if (src.startsWith(\"data:videostream/\")) {\n            return (\n              <StreamingVideoPlayer\n                streamKey={src.replace(\"data:videostream/\", \"\")}\n                messageId={messageId}\n              />\n            );\n          }\n\n          return (\n            <img\n              src={src || loadingImage}\n              alt={altText}\n              style={{\n                ...{\n                  display: \"block\",\n                  maxWidth: \"100%\",\n                  boxShadow: \"0px 0px 10px 1px #7d7d7d\",\n                },\n                ...styleJson,\n              }}\n            />\n          );\n        },\n        a: ({ node, ...props }) => {\n          return (\n            <a {...props} target=\"_blank\" rel=\"noreferrer nofollow\">\n              {props.children}\n            </a>\n          );\n        },\n        table: ({ node, ...props }) => {\n          return (\n            <table\n              style={{\n                borderCollapse: \"collapse\",\n                border: \"1px solid #ccc\",\n              }}\n              {...props}\n            >\n              {props.children}\n            </table>\n          );\n        },\n        tr: ({ node, ...props }) => {\n          return (\n            <tr\n              {...props}\n              style={{\n                border: \"1px solid #ccc\",\n              }}\n            >\n              {props.children}\n            </tr>\n          );\n        },\n        th: ({ node, ...props }) => {\n          return (\n            <th\n              {...props}\n              style={{\n                border: \"1px solid #ccc\",\n              }}\n            >\n              {props.children}\n            </th>\n          );\n        },\n        td: ({ node, ...props }) => {\n          return (\n            <td\n              {...props}\n              style={{\n                border: \"1px solid #ccc\",\n              }}\n            >\n              {props.children}\n            </td>\n          );\n        },\n        code: ({ node, ...codeProps }) => {\n          const language = codeProps.className;\n          if (language === \"language-function_form\") {\n            return (\n              <FunctionFormComponent\n                onFormSubmit={props.onFormSubmit}\n                {...codeProps}\n              />\n            );\n          }\n          return language ? (\n            <Stack sx={{ maxWidth: \"90%\" }}>\n              <Box\n                sx={{\n                  backgroundColor: \"#CCC\",\n                  padding: \"5px\",\n                  color: \"#000\",\n                  fontWeight: \"400\",\n                  fontSize: \"14px\",\n                  borderRadius: \"5px 5px 0px 0px\",\n                }}\n              >\n                <Typography sx={{ textTransform: \"none\" }}>\n                  {language?.split(\"-\")[1].charAt(0).toUpperCase() +\n                    language?.split(\"-\")[1].slice(1)}\n                  <Button\n                    startIcon={<ContentCopyOutlined />}\n                    sx={{\n                      textTransform: \"none\",\n                      padding: \"0px 5px\",\n                      float: \"right\",\n                      color: \"#000\",\n                    }}\n                    onClick={() => {\n                      navigator.clipboard.writeText(codeProps.children[0]);\n                    }}\n                  >\n                    Copy code\n                  </Button>\n                </Typography>\n              </Box>\n              <AceEditor\n                mode={language?.split(\"-\")[1] || \"text\"}\n                theme=\"dracula\"\n                value={codeProps.children[0]}\n                editorProps={{ $blockScrolling: true }}\n                setOptions={{\n                  useWorker: false,\n                  showGutter: false,\n                  maxLines: Infinity,\n                }}\n                style={{\n                  borderRadius: \"0px 0px 5px 5px\",\n                  width: \"100%\",\n                }}\n              />\n            </Stack>\n          ) : (\n            <code {...codeProps}>{codeProps.children}</code>\n          );\n        },\n      }}\n    >\n      {props.children || \"\"}\n    </ReactMarkdown>\n  );\n}\n"],"names":["_ref","streamKey","messageId","videoRef","useRef","sourceBufferRef","mediaSource","MediaSource","_useState","useState","_useState2","_slicedToArray","isSourceBufferReady","setIsSourceBufferReady","isVideoSrcSet","streamChunks","useRecoilValue","streamChunksState","chunks","get","concat","_useState3","_useState4","chunksProcessed","setChunksProcessed","useEffect","video","current","src","URL","createObjectURL","addEventListener","e","console","error","addSourceBuffer","debug","length","currentChunkIndex","updateSourceBuffer","removeEventListener","updating","uint8Array","base64","binaryString","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","base64ToArrayBuffer","appendBuffer","readyState","buffered","_jsx","ref","autoPlay","width","controls","FunctionFormComponent","props","formData","setFormData","submitBtnDisabled","setSubmitBtnDisabled","form","JSON","parse","children","ThemedJsonForm","schema","validator","onChange","submitBtn","Button","variant","onClick","onFormSubmit","disabled","log","MarkdownRenderer","ReactMarkdown","_objectSpread","remarkPlugins","remarkGfm","components","img","node","_objectWithoutProperties","_excluded","alt","_alt$split","split","_alt$split2","altText","style","styleJson","startsWith","display","endsWith","maxWidth","boxShadow","StreamingVideoPlayer","replace","loadingImage","a","_ref2","_excluded2","target","rel","table","_ref3","_excluded3","borderCollapse","border","tr","_ref4","_excluded4","th","_ref5","_excluded5","td","_ref6","_excluded6","code","_ref7","codeProps","_excluded7","language","className","_jsxs","Stack","sx","Box","backgroundColor","padding","color","fontWeight","fontSize","borderRadius","Typography","textTransform","charAt","toUpperCase","slice","startIcon","ContentCopyOutlined","float","navigator","clipboard","writeText","AceEditor","mode","theme","value","editorProps","$blockScrolling","setOptions","useWorker","showGutter","maxLines","Infinity"],"sourceRoot":""}