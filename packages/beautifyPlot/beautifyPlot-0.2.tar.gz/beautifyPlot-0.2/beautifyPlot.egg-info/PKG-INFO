Metadata-Version: 2.1
Name: beautifyPlot
Version: 0.2
Summary: A simple matplotlib wrapper to avoid writing multiple plt. statements.
Author-email: "Keerthi Vasan G.C." <kvch@ucdavis.edu>
Project-URL: Homepage, https://github.com/kvgc/beautifyPlot
Project-URL: Issues, https://github.com/kvgc/beautifyPlot/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE

# beautifyPlot

A simple matplotlib wrapper to avoid writing multiple plt. statements.   

## Installation

`pip install beautifyPlot`


## Usage 

matplotlib code:

```python
import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0,100,1)
y = x**3

plt.plot(x,y,label='y=f(x)')
plt.title("test plot")
plt.xlim([0,10])
plt.ylim([0,1000])
plt.legend(fontsize=15)
plt.tight_layout()
```


Using beautifyPlot

```python
from beautifyPlot.bplt import beautifyPlot
import numpy as np
x = np.arange(0,100,1)
y = x**3

plt.plot(x,y,label='y=f(x)')

plotArgs = {
    'title'           : ['test plot'], ## Use list to pass a set of arguments to the function
    'xlim'            : [0,10],
    'ylim'            : [0,1000],
    'legend'          : {'fontsize':15, 'loc':'best'}, ## Use dictionary to specify arguments
    'tight_layout'    : [] ## Leave list empty if there is nothing to pass
}
beautifyPlot(plotArgs)

## Next steps: Save plotArgs as JSON or use the same plot arguments in a different subplot/plot.
```


Using beautifyPlot (with shorthand notation)

```python
from beautifyPlot.bplt import beautifyPlot
import numpy as np
x = np.arange(0,100,1)
y = x**3

plt.plot(x,y,label='y=f(x)')

plotArgs ={
    't'   : ['test plot'],
    'xl'  : [0,10],
    'yl'  : [0,1000],
    'l'   : {'fontsize':15, 'loc':'best'},
    't_l' : []
}
beautifyPlot(plotArgs)

```





## Built-in shorthand notations

|shorthand| command |
| ------- | --------|
|"l"     | plt.legend|
|"t_p"   | plt.tick_params|
|"t_l"   | plt.tight_layout|
|"t"     | plt.title|
|"xl"    | plt.xlim|
|"yl"    | plt.ylim|
|"xt"    | plt.xticks|
|"yt"    | plt.yticks|
|"xlab"  | plt.xlabel|
|"ylab"  | plt.ylabel|
|"xs"    | plt.xscale|
|"ys"    | plt.yscale|
