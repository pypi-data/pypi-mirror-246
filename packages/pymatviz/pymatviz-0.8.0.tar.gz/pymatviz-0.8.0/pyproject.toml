[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "pymatviz"
version = "0.8.0"
description = "A toolkit for visualizations in materials informatics"
authors = [{ name = "Janosh Riebesell", email = "janosh.riebesell@gmail.com" }]
readme = "readme.md"
license = { file = "license" }
keywords = [
    "chemistry",
    "data visualization",
    "materials discovery",
    "materials informatics",
    "matplotlib",
    "plotly",
    "science",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.9",
]
urls = { Homepage = "https://github.com/janosh/pymatviz" }
requires-python = ">=3.9"
dependencies = [
    "matplotlib >= 3.6.2",
    "numpy >= 1.21.0",
    "pandas >= 2.0.0",
    "plotly",
    "pymatgen",
    "scikit-learn",
    "scipy",
]

[project.optional-dependencies]
test = [
    "adjustText",
    "jinja2",
    "kaleido",
    "pdfCropMargins",
    "pytest",
    "pytest-cov",
    "weasyprint",
]
data-src = ["matminer"]
export-figs = ["kaleido"]
gh-pages = ["jupyter", "lazydocs", "nbconvert"]
# needed for pandas Stylers, see https://github.com/pandas-dev/pandas/blob/-/pyproject.toml
df-pdf-export = ["jinja2", "pdfCropMargins", "weasyprint"]
auto-text-pos = ["adjustText"]

[tool.setuptools.packages]
find = { include = ["pymatviz*"], exclude = ["tests*"] }

[tool.setuptools.package-data]
pymatviz = ["*.csv"]

[tool.distutils.bdist_wheel]
universal = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:warnings"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
no_implicit_optional = false

[tool.ruff]
target-version = "py39"
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle error
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "FLY",  # flynt
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PD",   # pandas-vet
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PYI",  # flakes8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "TCH",  # flake8-type-checking
    "TID",  # tidy imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warning
    "YTT",  # flake8-2020
]
ignore = [
    "B028",    # No explicit stacklevel keyword argument found
    "C408",    # unnecessary-collection-call
    "D100",    # Missing docstring in public module
    "D205",    # 1 blank line required between summary line and description
    "E731",    # do not assign a lambda expression, use a def
    "N806",    # non-lowercase-variable-in-function
    "PD901",   # pandas-df-variable-name
    "PLR",     # pylint refactor
    "PLW2901", # Outer for loop variable overwritten by inner assignment target
    "PT006",   # pytest-parametrize-names-wrong-type
    "PT011",   # pytest-raises-too-broad
    "RUF001",  # ambiguous-unicode-character-string
    "SIM105",  # Use contextlib.suppress(FileNotFoundError) instead of try-except-pass
]
pydocstyle.convention = "google"
isort.lines-after-imports = 2
isort.split-on-trailing-comma = false

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["D103"]
"examples/*" = ["E402"]  # E402 Module level import not at top of file
