# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FB_Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_Vec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_Vec4MsgStart(builder):
    builder.StartObject(4)

def FB_Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def FB_Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def FB_Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def FB_Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def FB_Vec4MsgEnd(builder):
    return builder.EndObject()



class FB_Vec4MsgT(object):

    # FB_Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbVec4Msg = FB_Vec4Msg()
        fbVec4Msg.Init(buf, pos)
        return cls.InitFromObj(fbVec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbVec4Msg):
        x = FB_Vec4MsgT()
        x._UnPack(fbVec4Msg)
        return x

    # FB_Vec4MsgT
    def _UnPack(self, fbVec4Msg):
        if fbVec4Msg is None:
            return
        self.x = fbVec4Msg.X()
        self.y = fbVec4Msg.Y()
        self.z = fbVec4Msg.Z()
        self.w = fbVec4Msg.W()

    # FB_Vec4MsgT
    def Pack(self, builder):
        FB_Vec4MsgStart(builder)
        FB_Vec4MsgAddX(builder, self.x)
        FB_Vec4MsgAddY(builder, self.y)
        FB_Vec4MsgAddZ(builder, self.z)
        FB_Vec4MsgAddW(builder, self.w)
        fbVec4Msg = FB_Vec4MsgEnd(builder)
        return fbVec4Msg


class FB_Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_Vec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_Vec3MsgStart(builder):
    builder.StartObject(3)

def FB_Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def FB_Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def FB_Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def FB_Vec3MsgEnd(builder):
    return builder.EndObject()



class FB_Vec3MsgT(object):

    # FB_Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbVec3Msg = FB_Vec3Msg()
        fbVec3Msg.Init(buf, pos)
        return cls.InitFromObj(fbVec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbVec3Msg):
        x = FB_Vec3MsgT()
        x._UnPack(fbVec3Msg)
        return x

    # FB_Vec3MsgT
    def _UnPack(self, fbVec3Msg):
        if fbVec3Msg is None:
            return
        self.x = fbVec3Msg.X()
        self.y = fbVec3Msg.Y()
        self.z = fbVec3Msg.Z()

    # FB_Vec3MsgT
    def Pack(self, builder):
        FB_Vec3MsgStart(builder)
        FB_Vec3MsgAddX(builder, self.x)
        FB_Vec3MsgAddY(builder, self.y)
        FB_Vec3MsgAddZ(builder, self.z)
        fbVec3Msg = FB_Vec3MsgEnd(builder)
        return fbVec3Msg


class FB_IMUGroundTruthMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_IMUGroundTruthMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_IMUGroundTruthMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_IMUGroundTruthMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_IMUGroundTruthMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_IMUGroundTruthMsg
    def Euler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUGroundTruthMsg
    def AngVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_IMUGroundTruthMsgStart(builder):
    builder.StartObject(2)

def FB_IMUGroundTruthMsgAddEuler(builder, euler):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(euler), 0)

def FB_IMUGroundTruthMsgAddAngVel(builder, angVel):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(angVel), 0)

def FB_IMUGroundTruthMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_IMUGroundTruthMsgT(object):

    # FB_IMUGroundTruthMsgT
    def __init__(self):
        self.euler = None  # type: Optional[FB_Vec3MsgT]
        self.angVel = None  # type: Optional[FB_Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbImugroundTruthMsg = FB_IMUGroundTruthMsg()
        fbImugroundTruthMsg.Init(buf, pos)
        return cls.InitFromObj(fbImugroundTruthMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbImugroundTruthMsg):
        x = FB_IMUGroundTruthMsgT()
        x._UnPack(fbImugroundTruthMsg)
        return x

    # FB_IMUGroundTruthMsgT
    def _UnPack(self, fbImugroundTruthMsg):
        if fbImugroundTruthMsg is None:
            return
        if fbImugroundTruthMsg.Euler() is not None:
            self.euler = FB_Vec3MsgT.InitFromObj(fbImugroundTruthMsg.Euler())
        if fbImugroundTruthMsg.AngVel() is not None:
            self.angVel = FB_Vec3MsgT.InitFromObj(fbImugroundTruthMsg.AngVel())

    # FB_IMUGroundTruthMsgT
    def Pack(self, builder):
        if self.euler is not None:
            euler = self.euler.Pack(builder)
        if self.angVel is not None:
            angVel = self.angVel.Pack(builder)
        FB_IMUGroundTruthMsgStart(builder)
        if self.euler is not None:
            FB_IMUGroundTruthMsgAddEuler(builder, euler)
        if self.angVel is not None:
            FB_IMUGroundTruthMsgAddAngVel(builder, angVel)
        fbImugroundTruthMsg = FB_IMUGroundTruthMsgEnd(builder)
        return fbImugroundTruthMsg


class FB_IMUSensorMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_IMUSensorMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_IMUSensorMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_IMUSensorMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_IMUSensorMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_IMUSensorMsg
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUSensorMsg
    def Gyro(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUSensorMsg
    def Mag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_IMUSensorMsgStart(builder):
    builder.StartObject(3)

def FB_IMUSensorMsgAddAcc(builder, acc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(acc), 0)

def FB_IMUSensorMsgAddGyro(builder, gyro):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gyro), 0)

def FB_IMUSensorMsgAddMag(builder, mag):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mag), 0)

def FB_IMUSensorMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_IMUSensorMsgT(object):

    # FB_IMUSensorMsgT
    def __init__(self):
        self.acc = None  # type: Optional[FB_Vec3MsgT]
        self.gyro = None  # type: Optional[FB_Vec3MsgT]
        self.mag = None  # type: Optional[FB_Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbImusensorMsg = FB_IMUSensorMsg()
        fbImusensorMsg.Init(buf, pos)
        return cls.InitFromObj(fbImusensorMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbImusensorMsg):
        x = FB_IMUSensorMsgT()
        x._UnPack(fbImusensorMsg)
        return x

    # FB_IMUSensorMsgT
    def _UnPack(self, fbImusensorMsg):
        if fbImusensorMsg is None:
            return
        if fbImusensorMsg.Acc() is not None:
            self.acc = FB_Vec3MsgT.InitFromObj(fbImusensorMsg.Acc())
        if fbImusensorMsg.Gyro() is not None:
            self.gyro = FB_Vec3MsgT.InitFromObj(fbImusensorMsg.Gyro())
        if fbImusensorMsg.Mag() is not None:
            self.mag = FB_Vec3MsgT.InitFromObj(fbImusensorMsg.Mag())

    # FB_IMUSensorMsgT
    def Pack(self, builder):
        if self.acc is not None:
            acc = self.acc.Pack(builder)
        if self.gyro is not None:
            gyro = self.gyro.Pack(builder)
        if self.mag is not None:
            mag = self.mag.Pack(builder)
        FB_IMUSensorMsgStart(builder)
        if self.acc is not None:
            FB_IMUSensorMsgAddAcc(builder, acc)
        if self.gyro is not None:
            FB_IMUSensorMsgAddGyro(builder, gyro)
        if self.mag is not None:
            FB_IMUSensorMsgAddMag(builder, mag)
        fbImusensorMsg = FB_IMUSensorMsgEnd(builder)
        return fbImusensorMsg


class FB_IMUReplayMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_IMUReplayMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_IMUReplayMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_IMUReplayMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_IMUReplayMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_IMUReplayMsg
    def EulGt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUReplayMsg
    def EulGtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_IMUReplayMsg
    def EulGtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FB_IMUReplayMsg
    def EulEst(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUReplayMsg
    def EulEstLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_IMUReplayMsg
    def EulEstIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def FB_IMUReplayMsgStart(builder):
    builder.StartObject(2)

def FB_IMUReplayMsgAddEulGt(builder, eulGt):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eulGt), 0)

def FB_IMUReplayMsgStartEulGtVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_IMUReplayMsgAddEulEst(builder, eulEst):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eulEst), 0)

def FB_IMUReplayMsgStartEulEstVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_IMUReplayMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class FB_IMUReplayMsgT(object):

    # FB_IMUReplayMsgT
    def __init__(self):
        self.eulGt = None  # type: List[FB_Vec3MsgT]
        self.eulEst = None  # type: List[FB_Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbImureplayMsg = FB_IMUReplayMsg()
        fbImureplayMsg.Init(buf, pos)
        return cls.InitFromObj(fbImureplayMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbImureplayMsg):
        x = FB_IMUReplayMsgT()
        x._UnPack(fbImureplayMsg)
        return x

    # FB_IMUReplayMsgT
    def _UnPack(self, fbImureplayMsg):
        if fbImureplayMsg is None:
            return
        if not fbImureplayMsg.EulGtIsNone():
            self.eulGt = []
            for i in range(fbImureplayMsg.EulGtLength()):
                if fbImureplayMsg.EulGt(i) is None:
                    self.eulGt.append(None)
                else:
                    fB_Vec3Msg_ = FB_Vec3MsgT.InitFromObj(fbImureplayMsg.EulGt(i))
                    self.eulGt.append(fB_Vec3Msg_)
        if not fbImureplayMsg.EulEstIsNone():
            self.eulEst = []
            for i in range(fbImureplayMsg.EulEstLength()):
                if fbImureplayMsg.EulEst(i) is None:
                    self.eulEst.append(None)
                else:
                    fB_Vec3Msg_ = FB_Vec3MsgT.InitFromObj(fbImureplayMsg.EulEst(i))
                    self.eulEst.append(fB_Vec3Msg_)

    # FB_IMUReplayMsgT
    def Pack(self, builder):
        if self.eulGt is not None:
            eulGtlist = []
            for i in range(len(self.eulGt)):
                eulGtlist.append(self.eulGt[i].Pack(builder))
            FB_IMUReplayMsgStartEulGtVector(builder, len(self.eulGt))
            for i in reversed(range(len(self.eulGt))):
                builder.PrependUOffsetTRelative(eulGtlist[i])
            eulGt = builder.EndVector()
        if self.eulEst is not None:
            eulEstlist = []
            for i in range(len(self.eulEst)):
                eulEstlist.append(self.eulEst[i].Pack(builder))
            FB_IMUReplayMsgStartEulEstVector(builder, len(self.eulEst))
            for i in reversed(range(len(self.eulEst))):
                builder.PrependUOffsetTRelative(eulEstlist[i])
            eulEst = builder.EndVector()
        FB_IMUReplayMsgStart(builder)
        if self.eulGt is not None:
            FB_IMUReplayMsgAddEulGt(builder, eulGt)
        if self.eulEst is not None:
            FB_IMUReplayMsgAddEulEst(builder, eulEst)
        fbImureplayMsg = FB_IMUReplayMsgEnd(builder)
        return fbImureplayMsg


class FB_IMUCmdMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_IMUCmdMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_IMUCmdMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_IMUCmdMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_IMUCmdMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_IMUCmdMsg
    def CmdAngVelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_IMUCmdMsg
    def CmdAngVelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_IMUCmdMsg
    def CmdAngVelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_IMUCmdMsg
    def CmdNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FB_IMUCmdMsg
    def CmdReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FB_IMUCmdMsgStart(builder):
    builder.StartObject(5)

def FB_IMUCmdMsgAddCmdAngVelX(builder, cmdAngVelX):
    builder.PrependFloat32Slot(0, cmdAngVelX, 0.0)

def FB_IMUCmdMsgAddCmdAngVelY(builder, cmdAngVelY):
    builder.PrependFloat32Slot(1, cmdAngVelY, 0.0)

def FB_IMUCmdMsgAddCmdAngVelZ(builder, cmdAngVelZ):
    builder.PrependFloat32Slot(2, cmdAngVelZ, 0.0)

def FB_IMUCmdMsgAddCmdNoise(builder, cmdNoise):
    builder.PrependInt32Slot(3, cmdNoise, 0)

def FB_IMUCmdMsgAddCmdReset(builder, cmdReset):
    builder.PrependInt32Slot(4, cmdReset, 0)

def FB_IMUCmdMsgEnd(builder):
    return builder.EndObject()



class FB_IMUCmdMsgT(object):

    # FB_IMUCmdMsgT
    def __init__(self):
        self.cmdAngVelX = 0.0  # type: float
        self.cmdAngVelY = 0.0  # type: float
        self.cmdAngVelZ = 0.0  # type: float
        self.cmdNoise = 0  # type: int
        self.cmdReset = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbImucmdMsg = FB_IMUCmdMsg()
        fbImucmdMsg.Init(buf, pos)
        return cls.InitFromObj(fbImucmdMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbImucmdMsg):
        x = FB_IMUCmdMsgT()
        x._UnPack(fbImucmdMsg)
        return x

    # FB_IMUCmdMsgT
    def _UnPack(self, fbImucmdMsg):
        if fbImucmdMsg is None:
            return
        self.cmdAngVelX = fbImucmdMsg.CmdAngVelX()
        self.cmdAngVelY = fbImucmdMsg.CmdAngVelY()
        self.cmdAngVelZ = fbImucmdMsg.CmdAngVelZ()
        self.cmdNoise = fbImucmdMsg.CmdNoise()
        self.cmdReset = fbImucmdMsg.CmdReset()

    # FB_IMUCmdMsgT
    def Pack(self, builder):
        FB_IMUCmdMsgStart(builder)
        FB_IMUCmdMsgAddCmdAngVelX(builder, self.cmdAngVelX)
        FB_IMUCmdMsgAddCmdAngVelY(builder, self.cmdAngVelY)
        FB_IMUCmdMsgAddCmdAngVelZ(builder, self.cmdAngVelZ)
        FB_IMUCmdMsgAddCmdNoise(builder, self.cmdNoise)
        FB_IMUCmdMsgAddCmdReset(builder, self.cmdReset)
        fbImucmdMsg = FB_IMUCmdMsgEnd(builder)
        return fbImucmdMsg


class FB_IMUMsgAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_IMUMsgAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_IMUMsgAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_IMUMsgAllBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4D\x55\x30", size_prefixed=size_prefixed)

    # FB_IMUMsgAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_IMUMsgAll
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_IMUMsgAll
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FB_IMUMsgAll
    def CmdReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FB_IMUMsgAll
    def Imu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_IMUSensorMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUMsgAll
    def Gt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_IMUGroundTruthMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_IMUMsgAll
    def Replay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_IMUReplayMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_IMUMsgAllStart(builder):
    builder.StartObject(6)

def FB_IMUMsgAllAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_IMUMsgAllAddMsgType(builder, msgType):
    builder.PrependInt32Slot(1, msgType, 0)

def FB_IMUMsgAllAddCmdReset(builder, cmdReset):
    builder.PrependInt32Slot(2, cmdReset, 0)

def FB_IMUMsgAllAddImu(builder, imu):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imu), 0)

def FB_IMUMsgAllAddGt(builder, gt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(gt), 0)

def FB_IMUMsgAllAddReplay(builder, replay):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(replay), 0)

def FB_IMUMsgAllEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_IMUMsgAllT(object):

    # FB_IMUMsgAllT
    def __init__(self):
        self.sender = None  # type: str
        self.msgType = 0  # type: int
        self.cmdReset = 0  # type: int
        self.imu = None  # type: Optional[FB_IMUSensorMsgT]
        self.gt = None  # type: Optional[FB_IMUGroundTruthMsgT]
        self.replay = None  # type: Optional[FB_IMUReplayMsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbImumsgAll = FB_IMUMsgAll()
        fbImumsgAll.Init(buf, pos)
        return cls.InitFromObj(fbImumsgAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbImumsgAll):
        x = FB_IMUMsgAllT()
        x._UnPack(fbImumsgAll)
        return x

    # FB_IMUMsgAllT
    def _UnPack(self, fbImumsgAll):
        if fbImumsgAll is None:
            return
        self.sender = fbImumsgAll.Sender()
        self.msgType = fbImumsgAll.MsgType()
        self.cmdReset = fbImumsgAll.CmdReset()
        if fbImumsgAll.Imu() is not None:
            self.imu = FB_IMUSensorMsgT.InitFromObj(fbImumsgAll.Imu())
        if fbImumsgAll.Gt() is not None:
            self.gt = FB_IMUGroundTruthMsgT.InitFromObj(fbImumsgAll.Gt())
        if fbImumsgAll.Replay() is not None:
            self.replay = FB_IMUReplayMsgT.InitFromObj(fbImumsgAll.Replay())

    # FB_IMUMsgAllT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        if self.imu is not None:
            imu = self.imu.Pack(builder)
        if self.gt is not None:
            gt = self.gt.Pack(builder)
        if self.replay is not None:
            replay = self.replay.Pack(builder)
        FB_IMUMsgAllStart(builder)
        if self.sender is not None:
            FB_IMUMsgAllAddSender(builder, sender)
        FB_IMUMsgAllAddMsgType(builder, self.msgType)
        FB_IMUMsgAllAddCmdReset(builder, self.cmdReset)
        if self.imu is not None:
            FB_IMUMsgAllAddImu(builder, imu)
        if self.gt is not None:
            FB_IMUMsgAllAddGt(builder, gt)
        if self.replay is not None:
            FB_IMUMsgAllAddReplay(builder, replay)
        fbImumsgAll = FB_IMUMsgAllEnd(builder)
        return fbImumsgAll


