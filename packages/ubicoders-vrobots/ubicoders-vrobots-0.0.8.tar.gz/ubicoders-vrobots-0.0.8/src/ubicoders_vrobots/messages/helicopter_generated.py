# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FB_Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_Vec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x45\x4C\x49", size_prefixed=size_prefixed)

    # FB_Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_Vec3MsgStart(builder):
    builder.StartObject(3)

def FB_Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def FB_Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def FB_Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def FB_Vec3MsgEnd(builder):
    return builder.EndObject()



class FB_Vec3MsgT(object):

    # FB_Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbVec3Msg = FB_Vec3Msg()
        fbVec3Msg.Init(buf, pos)
        return cls.InitFromObj(fbVec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbVec3Msg):
        x = FB_Vec3MsgT()
        x._UnPack(fbVec3Msg)
        return x

    # FB_Vec3MsgT
    def _UnPack(self, fbVec3Msg):
        if fbVec3Msg is None:
            return
        self.x = fbVec3Msg.X()
        self.y = fbVec3Msg.Y()
        self.z = fbVec3Msg.Z()

    # FB_Vec3MsgT
    def Pack(self, builder):
        FB_Vec3MsgStart(builder)
        FB_Vec3MsgAddX(builder, self.x)
        FB_Vec3MsgAddY(builder, self.y)
        FB_Vec3MsgAddZ(builder, self.z)
        fbVec3Msg = FB_Vec3MsgEnd(builder)
        return fbVec3Msg


class FB_HeliStatesMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_HeliStatesMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_HeliStatesMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_HeliStatesMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x45\x4C\x49", size_prefixed=size_prefixed)

    # FB_HeliStatesMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_HeliStatesMsg
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_HeliStatesMsg
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_HeliStatesMsg
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_HeliStatesMsgStart(builder):
    builder.StartObject(3)

def FB_HeliStatesMsgAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_HeliStatesMsgAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def FB_HeliStatesMsgAddVel(builder, vel):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vel), 0)

def FB_HeliStatesMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_HeliStatesMsgT(object):

    # FB_HeliStatesMsgT
    def __init__(self):
        self.sender = None  # type: str
        self.pos = None  # type: Optional[FB_Vec3MsgT]
        self.vel = None  # type: Optional[FB_Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbHeliStatesMsg = FB_HeliStatesMsg()
        fbHeliStatesMsg.Init(buf, pos)
        return cls.InitFromObj(fbHeliStatesMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbHeliStatesMsg):
        x = FB_HeliStatesMsgT()
        x._UnPack(fbHeliStatesMsg)
        return x

    # FB_HeliStatesMsgT
    def _UnPack(self, fbHeliStatesMsg):
        if fbHeliStatesMsg is None:
            return
        self.sender = fbHeliStatesMsg.Sender()
        if fbHeliStatesMsg.Pos() is not None:
            self.pos = FB_Vec3MsgT.InitFromObj(fbHeliStatesMsg.Pos())
        if fbHeliStatesMsg.Vel() is not None:
            self.vel = FB_Vec3MsgT.InitFromObj(fbHeliStatesMsg.Vel())

    # FB_HeliStatesMsgT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        if self.pos is not None:
            pos = self.pos.Pack(builder)
        if self.vel is not None:
            vel = self.vel.Pack(builder)
        FB_HeliStatesMsgStart(builder)
        if self.sender is not None:
            FB_HeliStatesMsgAddSender(builder, sender)
        if self.pos is not None:
            FB_HeliStatesMsgAddPos(builder, pos)
        if self.vel is not None:
            FB_HeliStatesMsgAddVel(builder, vel)
        fbHeliStatesMsg = FB_HeliStatesMsgEnd(builder)
        return fbHeliStatesMsg


class FB_HeliInputMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_HeliInputMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_HeliInputMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_HeliInputMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x45\x4C\x49", size_prefixed=size_prefixed)

    # FB_HeliInputMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_HeliInputMsg
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_HeliInputMsg
    def Force(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_HeliInputMsgStart(builder):
    builder.StartObject(2)

def FB_HeliInputMsgAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_HeliInputMsgAddForce(builder, force):
    builder.PrependFloat32Slot(1, force, 0.0)

def FB_HeliInputMsgEnd(builder):
    return builder.EndObject()



class FB_HeliInputMsgT(object):

    # FB_HeliInputMsgT
    def __init__(self):
        self.sender = None  # type: str
        self.force = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbHeliInputMsg = FB_HeliInputMsg()
        fbHeliInputMsg.Init(buf, pos)
        return cls.InitFromObj(fbHeliInputMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbHeliInputMsg):
        x = FB_HeliInputMsgT()
        x._UnPack(fbHeliInputMsg)
        return x

    # FB_HeliInputMsgT
    def _UnPack(self, fbHeliInputMsg):
        if fbHeliInputMsg is None:
            return
        self.sender = fbHeliInputMsg.Sender()
        self.force = fbHeliInputMsg.Force()

    # FB_HeliInputMsgT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        FB_HeliInputMsgStart(builder)
        if self.sender is not None:
            FB_HeliInputMsgAddSender(builder, sender)
        FB_HeliInputMsgAddForce(builder, self.force)
        fbHeliInputMsg = FB_HeliInputMsgEnd(builder)
        return fbHeliInputMsg


class FB_HeliParamsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_HeliParamsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_HeliParamsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_HeliParamsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x45\x4C\x49", size_prefixed=size_prefixed)

    # FB_HeliParamsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_HeliParamsMsg
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_HeliParamsMsg
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_HeliParamsMsg
    def ForceScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_HeliParamsMsg
    def ForceMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_HeliParamsMsgStart(builder):
    builder.StartObject(4)

def FB_HeliParamsMsgAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_HeliParamsMsgAddMass(builder, mass):
    builder.PrependFloat32Slot(1, mass, 0.0)

def FB_HeliParamsMsgAddForceScale(builder, forceScale):
    builder.PrependFloat32Slot(2, forceScale, 0.0)

def FB_HeliParamsMsgAddForceMax(builder, forceMax):
    builder.PrependFloat32Slot(3, forceMax, 0.0)

def FB_HeliParamsMsgEnd(builder):
    return builder.EndObject()



class FB_HeliParamsMsgT(object):

    # FB_HeliParamsMsgT
    def __init__(self):
        self.sender = None  # type: str
        self.mass = 0.0  # type: float
        self.forceScale = 0.0  # type: float
        self.forceMax = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbHeliParamsMsg = FB_HeliParamsMsg()
        fbHeliParamsMsg.Init(buf, pos)
        return cls.InitFromObj(fbHeliParamsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbHeliParamsMsg):
        x = FB_HeliParamsMsgT()
        x._UnPack(fbHeliParamsMsg)
        return x

    # FB_HeliParamsMsgT
    def _UnPack(self, fbHeliParamsMsg):
        if fbHeliParamsMsg is None:
            return
        self.sender = fbHeliParamsMsg.Sender()
        self.mass = fbHeliParamsMsg.Mass()
        self.forceScale = fbHeliParamsMsg.ForceScale()
        self.forceMax = fbHeliParamsMsg.ForceMax()

    # FB_HeliParamsMsgT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        FB_HeliParamsMsgStart(builder)
        if self.sender is not None:
            FB_HeliParamsMsgAddSender(builder, sender)
        FB_HeliParamsMsgAddMass(builder, self.mass)
        FB_HeliParamsMsgAddForceScale(builder, self.forceScale)
        FB_HeliParamsMsgAddForceMax(builder, self.forceMax)
        fbHeliParamsMsg = FB_HeliParamsMsgEnd(builder)
        return fbHeliParamsMsg


class FB_HeliMsgAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_HeliMsgAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_HeliMsgAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_HeliMsgAllBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x45\x4C\x49", size_prefixed=size_prefixed)

    # FB_HeliMsgAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_HeliMsgAll
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_HeliMsgAll
    def States(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_HeliStatesMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_HeliMsgAll
    def CmdInput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_HeliInputMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_HeliMsgAll
    def Heli2dParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_HeliParamsMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_HeliMsgAll
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FB_HeliMsgAllStart(builder):
    builder.StartObject(5)

def FB_HeliMsgAllAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_HeliMsgAllAddStates(builder, states):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(states), 0)

def FB_HeliMsgAllAddCmdInput(builder, cmdInput):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cmdInput), 0)

def FB_HeliMsgAllAddHeli2dParams(builder, heli2dParams):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(heli2dParams), 0)

def FB_HeliMsgAllAddMsgType(builder, msgType):
    builder.PrependInt32Slot(4, msgType, 0)

def FB_HeliMsgAllEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_HeliMsgAllT(object):

    # FB_HeliMsgAllT
    def __init__(self):
        self.sender = None  # type: str
        self.states = None  # type: Optional[FB_HeliStatesMsgT]
        self.cmdInput = None  # type: Optional[FB_HeliInputMsgT]
        self.heli2dParams = None  # type: Optional[FB_HeliParamsMsgT]
        self.msgType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbHeliMsgAll = FB_HeliMsgAll()
        fbHeliMsgAll.Init(buf, pos)
        return cls.InitFromObj(fbHeliMsgAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbHeliMsgAll):
        x = FB_HeliMsgAllT()
        x._UnPack(fbHeliMsgAll)
        return x

    # FB_HeliMsgAllT
    def _UnPack(self, fbHeliMsgAll):
        if fbHeliMsgAll is None:
            return
        self.sender = fbHeliMsgAll.Sender()
        if fbHeliMsgAll.States() is not None:
            self.states = FB_HeliStatesMsgT.InitFromObj(fbHeliMsgAll.States())
        if fbHeliMsgAll.CmdInput() is not None:
            self.cmdInput = FB_HeliInputMsgT.InitFromObj(fbHeliMsgAll.CmdInput())
        if fbHeliMsgAll.Heli2dParams() is not None:
            self.heli2dParams = FB_HeliParamsMsgT.InitFromObj(fbHeliMsgAll.Heli2dParams())
        self.msgType = fbHeliMsgAll.MsgType()

    # FB_HeliMsgAllT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        if self.states is not None:
            states = self.states.Pack(builder)
        if self.cmdInput is not None:
            cmdInput = self.cmdInput.Pack(builder)
        if self.heli2dParams is not None:
            heli2dParams = self.heli2dParams.Pack(builder)
        FB_HeliMsgAllStart(builder)
        if self.sender is not None:
            FB_HeliMsgAllAddSender(builder, sender)
        if self.states is not None:
            FB_HeliMsgAllAddStates(builder, states)
        if self.cmdInput is not None:
            FB_HeliMsgAllAddCmdInput(builder, cmdInput)
        if self.heli2dParams is not None:
            FB_HeliMsgAllAddHeli2dParams(builder, heli2dParams)
        FB_HeliMsgAllAddMsgType(builder, self.msgType)
        fbHeliMsgAll = FB_HeliMsgAllEnd(builder)
        return fbHeliMsgAll


