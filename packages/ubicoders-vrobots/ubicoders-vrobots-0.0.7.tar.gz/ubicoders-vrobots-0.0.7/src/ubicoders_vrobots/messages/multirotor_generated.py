# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FB_Vect16Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_Vect16Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_Vect16Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_Vect16MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_Vect16Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_Vect16Msg
    def M0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M9(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M11(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M12(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M13(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M14(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vect16Msg
    def M15(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_Vect16MsgStart(builder):
    builder.StartObject(16)

def FB_Vect16MsgAddM0(builder, m0):
    builder.PrependFloat32Slot(0, m0, 0.0)

def FB_Vect16MsgAddM1(builder, m1):
    builder.PrependFloat32Slot(1, m1, 0.0)

def FB_Vect16MsgAddM2(builder, m2):
    builder.PrependFloat32Slot(2, m2, 0.0)

def FB_Vect16MsgAddM3(builder, m3):
    builder.PrependFloat32Slot(3, m3, 0.0)

def FB_Vect16MsgAddM4(builder, m4):
    builder.PrependFloat32Slot(4, m4, 0.0)

def FB_Vect16MsgAddM5(builder, m5):
    builder.PrependFloat32Slot(5, m5, 0.0)

def FB_Vect16MsgAddM6(builder, m6):
    builder.PrependFloat32Slot(6, m6, 0.0)

def FB_Vect16MsgAddM7(builder, m7):
    builder.PrependFloat32Slot(7, m7, 0.0)

def FB_Vect16MsgAddM8(builder, m8):
    builder.PrependFloat32Slot(8, m8, 0.0)

def FB_Vect16MsgAddM9(builder, m9):
    builder.PrependFloat32Slot(9, m9, 0.0)

def FB_Vect16MsgAddM10(builder, m10):
    builder.PrependFloat32Slot(10, m10, 0.0)

def FB_Vect16MsgAddM11(builder, m11):
    builder.PrependFloat32Slot(11, m11, 0.0)

def FB_Vect16MsgAddM12(builder, m12):
    builder.PrependFloat32Slot(12, m12, 0.0)

def FB_Vect16MsgAddM13(builder, m13):
    builder.PrependFloat32Slot(13, m13, 0.0)

def FB_Vect16MsgAddM14(builder, m14):
    builder.PrependFloat32Slot(14, m14, 0.0)

def FB_Vect16MsgAddM15(builder, m15):
    builder.PrependFloat32Slot(15, m15, 0.0)

def FB_Vect16MsgEnd(builder):
    return builder.EndObject()



class FB_Vect16MsgT(object):

    # FB_Vect16MsgT
    def __init__(self):
        self.m0 = 0.0  # type: float
        self.m1 = 0.0  # type: float
        self.m2 = 0.0  # type: float
        self.m3 = 0.0  # type: float
        self.m4 = 0.0  # type: float
        self.m5 = 0.0  # type: float
        self.m6 = 0.0  # type: float
        self.m7 = 0.0  # type: float
        self.m8 = 0.0  # type: float
        self.m9 = 0.0  # type: float
        self.m10 = 0.0  # type: float
        self.m11 = 0.0  # type: float
        self.m12 = 0.0  # type: float
        self.m13 = 0.0  # type: float
        self.m14 = 0.0  # type: float
        self.m15 = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbVect16Msg = FB_Vect16Msg()
        fbVect16Msg.Init(buf, pos)
        return cls.InitFromObj(fbVect16Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbVect16Msg):
        x = FB_Vect16MsgT()
        x._UnPack(fbVect16Msg)
        return x

    # FB_Vect16MsgT
    def _UnPack(self, fbVect16Msg):
        if fbVect16Msg is None:
            return
        self.m0 = fbVect16Msg.M0()
        self.m1 = fbVect16Msg.M1()
        self.m2 = fbVect16Msg.M2()
        self.m3 = fbVect16Msg.M3()
        self.m4 = fbVect16Msg.M4()
        self.m5 = fbVect16Msg.M5()
        self.m6 = fbVect16Msg.M6()
        self.m7 = fbVect16Msg.M7()
        self.m8 = fbVect16Msg.M8()
        self.m9 = fbVect16Msg.M9()
        self.m10 = fbVect16Msg.M10()
        self.m11 = fbVect16Msg.M11()
        self.m12 = fbVect16Msg.M12()
        self.m13 = fbVect16Msg.M13()
        self.m14 = fbVect16Msg.M14()
        self.m15 = fbVect16Msg.M15()

    # FB_Vect16MsgT
    def Pack(self, builder):
        FB_Vect16MsgStart(builder)
        FB_Vect16MsgAddM0(builder, self.m0)
        FB_Vect16MsgAddM1(builder, self.m1)
        FB_Vect16MsgAddM2(builder, self.m2)
        FB_Vect16MsgAddM3(builder, self.m3)
        FB_Vect16MsgAddM4(builder, self.m4)
        FB_Vect16MsgAddM5(builder, self.m5)
        FB_Vect16MsgAddM6(builder, self.m6)
        FB_Vect16MsgAddM7(builder, self.m7)
        FB_Vect16MsgAddM8(builder, self.m8)
        FB_Vect16MsgAddM9(builder, self.m9)
        FB_Vect16MsgAddM10(builder, self.m10)
        FB_Vect16MsgAddM11(builder, self.m11)
        FB_Vect16MsgAddM12(builder, self.m12)
        FB_Vect16MsgAddM13(builder, self.m13)
        FB_Vect16MsgAddM14(builder, self.m14)
        FB_Vect16MsgAddM15(builder, self.m15)
        fbVect16Msg = FB_Vect16MsgEnd(builder)
        return fbVect16Msg


class FB_Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_Vec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_Vec4MsgStart(builder):
    builder.StartObject(4)

def FB_Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def FB_Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def FB_Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def FB_Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def FB_Vec4MsgEnd(builder):
    return builder.EndObject()



class FB_Vec4MsgT(object):

    # FB_Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbVec4Msg = FB_Vec4Msg()
        fbVec4Msg.Init(buf, pos)
        return cls.InitFromObj(fbVec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbVec4Msg):
        x = FB_Vec4MsgT()
        x._UnPack(fbVec4Msg)
        return x

    # FB_Vec4MsgT
    def _UnPack(self, fbVec4Msg):
        if fbVec4Msg is None:
            return
        self.x = fbVec4Msg.X()
        self.y = fbVec4Msg.Y()
        self.z = fbVec4Msg.Z()
        self.w = fbVec4Msg.W()

    # FB_Vec4MsgT
    def Pack(self, builder):
        FB_Vec4MsgStart(builder)
        FB_Vec4MsgAddX(builder, self.x)
        FB_Vec4MsgAddY(builder, self.y)
        FB_Vec4MsgAddZ(builder, self.z)
        FB_Vec4MsgAddW(builder, self.w)
        fbVec4Msg = FB_Vec4MsgEnd(builder)
        return fbVec4Msg


class FB_Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_Vec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FB_Vec3MsgStart(builder):
    builder.StartObject(3)

def FB_Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def FB_Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def FB_Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def FB_Vec3MsgEnd(builder):
    return builder.EndObject()



class FB_Vec3MsgT(object):

    # FB_Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbVec3Msg = FB_Vec3Msg()
        fbVec3Msg.Init(buf, pos)
        return cls.InitFromObj(fbVec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbVec3Msg):
        x = FB_Vec3MsgT()
        x._UnPack(fbVec3Msg)
        return x

    # FB_Vec3MsgT
    def _UnPack(self, fbVec3Msg):
        if fbVec3Msg is None:
            return
        self.x = fbVec3Msg.X()
        self.y = fbVec3Msg.Y()
        self.z = fbVec3Msg.Z()

    # FB_Vec3MsgT
    def Pack(self, builder):
        FB_Vec3MsgStart(builder)
        FB_Vec3MsgAddX(builder, self.x)
        FB_Vec3MsgAddY(builder, self.y)
        FB_Vec3MsgAddZ(builder, self.z)
        fbVec3Msg = FB_Vec3MsgEnd(builder)
        return fbVec3Msg


class FB_StatesMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_StatesMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_StatesMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_StatesMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_StatesMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_StatesMsg
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_StatesMsg
    def LinearVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_StatesMsg
    def EulerAngles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_StatesMsg
    def AngularVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_StatesMsgStart(builder):
    builder.StartObject(4)

def FB_StatesMsgAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def FB_StatesMsgAddLinearVelocity(builder, linearVelocity):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linearVelocity), 0)

def FB_StatesMsgAddEulerAngles(builder, eulerAngles):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(eulerAngles), 0)

def FB_StatesMsgAddAngularVelocity(builder, angularVelocity):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(angularVelocity), 0)

def FB_StatesMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_StatesMsgT(object):

    # FB_StatesMsgT
    def __init__(self):
        self.position = None  # type: Optional[FB_Vec3MsgT]
        self.linearVelocity = None  # type: Optional[FB_Vec3MsgT]
        self.eulerAngles = None  # type: Optional[FB_Vec3MsgT]
        self.angularVelocity = None  # type: Optional[FB_Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbStatesMsg = FB_StatesMsg()
        fbStatesMsg.Init(buf, pos)
        return cls.InitFromObj(fbStatesMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbStatesMsg):
        x = FB_StatesMsgT()
        x._UnPack(fbStatesMsg)
        return x

    # FB_StatesMsgT
    def _UnPack(self, fbStatesMsg):
        if fbStatesMsg is None:
            return
        if fbStatesMsg.Position() is not None:
            self.position = FB_Vec3MsgT.InitFromObj(fbStatesMsg.Position())
        if fbStatesMsg.LinearVelocity() is not None:
            self.linearVelocity = FB_Vec3MsgT.InitFromObj(fbStatesMsg.LinearVelocity())
        if fbStatesMsg.EulerAngles() is not None:
            self.eulerAngles = FB_Vec3MsgT.InitFromObj(fbStatesMsg.EulerAngles())
        if fbStatesMsg.AngularVelocity() is not None:
            self.angularVelocity = FB_Vec3MsgT.InitFromObj(fbStatesMsg.AngularVelocity())

    # FB_StatesMsgT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.linearVelocity is not None:
            linearVelocity = self.linearVelocity.Pack(builder)
        if self.eulerAngles is not None:
            eulerAngles = self.eulerAngles.Pack(builder)
        if self.angularVelocity is not None:
            angularVelocity = self.angularVelocity.Pack(builder)
        FB_StatesMsgStart(builder)
        if self.position is not None:
            FB_StatesMsgAddPosition(builder, position)
        if self.linearVelocity is not None:
            FB_StatesMsgAddLinearVelocity(builder, linearVelocity)
        if self.eulerAngles is not None:
            FB_StatesMsgAddEulerAngles(builder, eulerAngles)
        if self.angularVelocity is not None:
            FB_StatesMsgAddAngularVelocity(builder, angularVelocity)
        fbStatesMsg = FB_StatesMsgEnd(builder)
        return fbStatesMsg


class FB_SensorsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_SensorsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_SensorsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_SensorsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_SensorsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_SensorsMsg
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_SensorsMsg
    def Gyro(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_SensorsMsg
    def Mag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_SensorsMsgStart(builder):
    builder.StartObject(3)

def FB_SensorsMsgAddAcc(builder, acc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(acc), 0)

def FB_SensorsMsgAddGyro(builder, gyro):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gyro), 0)

def FB_SensorsMsgAddMag(builder, mag):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mag), 0)

def FB_SensorsMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_SensorsMsgT(object):

    # FB_SensorsMsgT
    def __init__(self):
        self.acc = None  # type: Optional[FB_Vec3MsgT]
        self.gyro = None  # type: Optional[FB_Vec3MsgT]
        self.mag = None  # type: Optional[FB_Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbSensorsMsg = FB_SensorsMsg()
        fbSensorsMsg.Init(buf, pos)
        return cls.InitFromObj(fbSensorsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbSensorsMsg):
        x = FB_SensorsMsgT()
        x._UnPack(fbSensorsMsg)
        return x

    # FB_SensorsMsgT
    def _UnPack(self, fbSensorsMsg):
        if fbSensorsMsg is None:
            return
        if fbSensorsMsg.Acc() is not None:
            self.acc = FB_Vec3MsgT.InitFromObj(fbSensorsMsg.Acc())
        if fbSensorsMsg.Gyro() is not None:
            self.gyro = FB_Vec3MsgT.InitFromObj(fbSensorsMsg.Gyro())
        if fbSensorsMsg.Mag() is not None:
            self.mag = FB_Vec3MsgT.InitFromObj(fbSensorsMsg.Mag())

    # FB_SensorsMsgT
    def Pack(self, builder):
        if self.acc is not None:
            acc = self.acc.Pack(builder)
        if self.gyro is not None:
            gyro = self.gyro.Pack(builder)
        if self.mag is not None:
            mag = self.mag.Pack(builder)
        FB_SensorsMsgStart(builder)
        if self.acc is not None:
            FB_SensorsMsgAddAcc(builder, acc)
        if self.gyro is not None:
            FB_SensorsMsgAddGyro(builder, gyro)
        if self.mag is not None:
            FB_SensorsMsgAddMag(builder, mag)
        fbSensorsMsg = FB_SensorsMsgEnd(builder)
        return fbSensorsMsg


class FB_ActuatorsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_ActuatorsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_ActuatorsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_ActuatorsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_ActuatorsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_ActuatorsMsg
    def Pwm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_Vect16Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_ActuatorsMsgStart(builder):
    builder.StartObject(1)

def FB_ActuatorsMsgAddPwm(builder, pwm):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pwm), 0)

def FB_ActuatorsMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_ActuatorsMsgT(object):

    # FB_ActuatorsMsgT
    def __init__(self):
        self.pwm = None  # type: Optional[FB_Vect16MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbActuatorsMsg = FB_ActuatorsMsg()
        fbActuatorsMsg.Init(buf, pos)
        return cls.InitFromObj(fbActuatorsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbActuatorsMsg):
        x = FB_ActuatorsMsgT()
        x._UnPack(fbActuatorsMsg)
        return x

    # FB_ActuatorsMsgT
    def _UnPack(self, fbActuatorsMsg):
        if fbActuatorsMsg is None:
            return
        if fbActuatorsMsg.Pwm() is not None:
            self.pwm = FB_Vect16MsgT.InitFromObj(fbActuatorsMsg.Pwm())

    # FB_ActuatorsMsgT
    def Pack(self, builder):
        if self.pwm is not None:
            pwm = self.pwm.Pack(builder)
        FB_ActuatorsMsgStart(builder)
        if self.pwm is not None:
            FB_ActuatorsMsgAddPwm(builder, pwm)
        fbActuatorsMsg = FB_ActuatorsMsgEnd(builder)
        return fbActuatorsMsg


class FB_MultirotorGroundTruthMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_MultirotorGroundTruthMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_MultirotorGroundTruthMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_MultirotorGroundTruthMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_MultirotorGroundTruthMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_MultirotorGroundTruthMsg
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_MultirotorGroundTruthMsg
    def TimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FB_MultirotorGroundTruthMsg
    def States(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_StatesMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_MultirotorGroundTruthMsg
    def Sensors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_SensorsMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_MultirotorGroundTruthMsg
    def Actuators(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_ActuatorsMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_MultirotorGroundTruthMsgStart(builder):
    builder.StartObject(5)

def FB_MultirotorGroundTruthMsgAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_MultirotorGroundTruthMsgAddTimeStamp(builder, timeStamp):
    builder.PrependFloat32Slot(1, timeStamp, 0.0)

def FB_MultirotorGroundTruthMsgAddStates(builder, states):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(states), 0)

def FB_MultirotorGroundTruthMsgAddSensors(builder, sensors):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sensors), 0)

def FB_MultirotorGroundTruthMsgAddActuators(builder, actuators):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actuators), 0)

def FB_MultirotorGroundTruthMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_MultirotorGroundTruthMsgT(object):

    # FB_MultirotorGroundTruthMsgT
    def __init__(self):
        self.sender = None  # type: str
        self.timeStamp = 0.0  # type: float
        self.states = None  # type: Optional[FB_StatesMsgT]
        self.sensors = None  # type: Optional[FB_SensorsMsgT]
        self.actuators = None  # type: Optional[FB_ActuatorsMsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbMultirotorGroundTruthMsg = FB_MultirotorGroundTruthMsg()
        fbMultirotorGroundTruthMsg.Init(buf, pos)
        return cls.InitFromObj(fbMultirotorGroundTruthMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbMultirotorGroundTruthMsg):
        x = FB_MultirotorGroundTruthMsgT()
        x._UnPack(fbMultirotorGroundTruthMsg)
        return x

    # FB_MultirotorGroundTruthMsgT
    def _UnPack(self, fbMultirotorGroundTruthMsg):
        if fbMultirotorGroundTruthMsg is None:
            return
        self.sender = fbMultirotorGroundTruthMsg.Sender()
        self.timeStamp = fbMultirotorGroundTruthMsg.TimeStamp()
        if fbMultirotorGroundTruthMsg.States() is not None:
            self.states = FB_StatesMsgT.InitFromObj(fbMultirotorGroundTruthMsg.States())
        if fbMultirotorGroundTruthMsg.Sensors() is not None:
            self.sensors = FB_SensorsMsgT.InitFromObj(fbMultirotorGroundTruthMsg.Sensors())
        if fbMultirotorGroundTruthMsg.Actuators() is not None:
            self.actuators = FB_ActuatorsMsgT.InitFromObj(fbMultirotorGroundTruthMsg.Actuators())

    # FB_MultirotorGroundTruthMsgT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        if self.states is not None:
            states = self.states.Pack(builder)
        if self.sensors is not None:
            sensors = self.sensors.Pack(builder)
        if self.actuators is not None:
            actuators = self.actuators.Pack(builder)
        FB_MultirotorGroundTruthMsgStart(builder)
        if self.sender is not None:
            FB_MultirotorGroundTruthMsgAddSender(builder, sender)
        FB_MultirotorGroundTruthMsgAddTimeStamp(builder, self.timeStamp)
        if self.states is not None:
            FB_MultirotorGroundTruthMsgAddStates(builder, states)
        if self.sensors is not None:
            FB_MultirotorGroundTruthMsgAddSensors(builder, sensors)
        if self.actuators is not None:
            FB_MultirotorGroundTruthMsgAddActuators(builder, actuators)
        fbMultirotorGroundTruthMsg = FB_MultirotorGroundTruthMsgEnd(builder)
        return fbMultirotorGroundTruthMsg


class FB_MultirotorControlParamsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_MultirotorControlParamsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_MultirotorControlParamsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_MultirotorControlParamsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_MultirotorControlParamsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_MultirotorControlParamsMsg
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_MultirotorControlParamsMsg
    def VelGainP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainPAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainPIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def VelGainD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def VelGainI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainIAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def VelGainIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def AttGainP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainPAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainPIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def AttGainD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def AttGainI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainIAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def AttGainIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def RateGainP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainPAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainPIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def RateGainD(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FB_MultirotorControlParamsMsg
    def RateGainI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainIAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FB_MultirotorControlParamsMsg
    def RateGainIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def FB_MultirotorControlParamsMsgStart(builder):
    builder.StartObject(10)

def FB_MultirotorControlParamsMsgAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_MultirotorControlParamsMsgAddVelGainP(builder, velGainP):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(velGainP), 0)

def FB_MultirotorControlParamsMsgStartVelGainPVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddVelGainD(builder, velGainD):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(velGainD), 0)

def FB_MultirotorControlParamsMsgStartVelGainDVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddVelGainI(builder, velGainI):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(velGainI), 0)

def FB_MultirotorControlParamsMsgStartVelGainIVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddAttGainP(builder, attGainP):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(attGainP), 0)

def FB_MultirotorControlParamsMsgStartAttGainPVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddAttGainD(builder, attGainD):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(attGainD), 0)

def FB_MultirotorControlParamsMsgStartAttGainDVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddAttGainI(builder, attGainI):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(attGainI), 0)

def FB_MultirotorControlParamsMsgStartAttGainIVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddRateGainP(builder, rateGainP):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rateGainP), 0)

def FB_MultirotorControlParamsMsgStartRateGainPVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddRateGainD(builder, rateGainD):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rateGainD), 0)

def FB_MultirotorControlParamsMsgStartRateGainDVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgAddRateGainI(builder, rateGainI):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rateGainI), 0)

def FB_MultirotorControlParamsMsgStartRateGainIVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FB_MultirotorControlParamsMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class FB_MultirotorControlParamsMsgT(object):

    # FB_MultirotorControlParamsMsgT
    def __init__(self):
        self.sender = None  # type: str
        self.velGainP = None  # type: List[float]
        self.velGainD = None  # type: List[float]
        self.velGainI = None  # type: List[float]
        self.attGainP = None  # type: List[float]
        self.attGainD = None  # type: List[float]
        self.attGainI = None  # type: List[float]
        self.rateGainP = None  # type: List[float]
        self.rateGainD = None  # type: List[float]
        self.rateGainI = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbMultirotorControlParamsMsg = FB_MultirotorControlParamsMsg()
        fbMultirotorControlParamsMsg.Init(buf, pos)
        return cls.InitFromObj(fbMultirotorControlParamsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbMultirotorControlParamsMsg):
        x = FB_MultirotorControlParamsMsgT()
        x._UnPack(fbMultirotorControlParamsMsg)
        return x

    # FB_MultirotorControlParamsMsgT
    def _UnPack(self, fbMultirotorControlParamsMsg):
        if fbMultirotorControlParamsMsg is None:
            return
        self.sender = fbMultirotorControlParamsMsg.Sender()
        if not fbMultirotorControlParamsMsg.VelGainPIsNone():
            if np is None:
                self.velGainP = []
                for i in range(fbMultirotorControlParamsMsg.VelGainPLength()):
                    self.velGainP.append(fbMultirotorControlParamsMsg.VelGainP(i))
            else:
                self.velGainP = fbMultirotorControlParamsMsg.VelGainPAsNumpy()
        if not fbMultirotorControlParamsMsg.VelGainDIsNone():
            if np is None:
                self.velGainD = []
                for i in range(fbMultirotorControlParamsMsg.VelGainDLength()):
                    self.velGainD.append(fbMultirotorControlParamsMsg.VelGainD(i))
            else:
                self.velGainD = fbMultirotorControlParamsMsg.VelGainDAsNumpy()
        if not fbMultirotorControlParamsMsg.VelGainIIsNone():
            if np is None:
                self.velGainI = []
                for i in range(fbMultirotorControlParamsMsg.VelGainILength()):
                    self.velGainI.append(fbMultirotorControlParamsMsg.VelGainI(i))
            else:
                self.velGainI = fbMultirotorControlParamsMsg.VelGainIAsNumpy()
        if not fbMultirotorControlParamsMsg.AttGainPIsNone():
            if np is None:
                self.attGainP = []
                for i in range(fbMultirotorControlParamsMsg.AttGainPLength()):
                    self.attGainP.append(fbMultirotorControlParamsMsg.AttGainP(i))
            else:
                self.attGainP = fbMultirotorControlParamsMsg.AttGainPAsNumpy()
        if not fbMultirotorControlParamsMsg.AttGainDIsNone():
            if np is None:
                self.attGainD = []
                for i in range(fbMultirotorControlParamsMsg.AttGainDLength()):
                    self.attGainD.append(fbMultirotorControlParamsMsg.AttGainD(i))
            else:
                self.attGainD = fbMultirotorControlParamsMsg.AttGainDAsNumpy()
        if not fbMultirotorControlParamsMsg.AttGainIIsNone():
            if np is None:
                self.attGainI = []
                for i in range(fbMultirotorControlParamsMsg.AttGainILength()):
                    self.attGainI.append(fbMultirotorControlParamsMsg.AttGainI(i))
            else:
                self.attGainI = fbMultirotorControlParamsMsg.AttGainIAsNumpy()
        if not fbMultirotorControlParamsMsg.RateGainPIsNone():
            if np is None:
                self.rateGainP = []
                for i in range(fbMultirotorControlParamsMsg.RateGainPLength()):
                    self.rateGainP.append(fbMultirotorControlParamsMsg.RateGainP(i))
            else:
                self.rateGainP = fbMultirotorControlParamsMsg.RateGainPAsNumpy()
        if not fbMultirotorControlParamsMsg.RateGainDIsNone():
            if np is None:
                self.rateGainD = []
                for i in range(fbMultirotorControlParamsMsg.RateGainDLength()):
                    self.rateGainD.append(fbMultirotorControlParamsMsg.RateGainD(i))
            else:
                self.rateGainD = fbMultirotorControlParamsMsg.RateGainDAsNumpy()
        if not fbMultirotorControlParamsMsg.RateGainIIsNone():
            if np is None:
                self.rateGainI = []
                for i in range(fbMultirotorControlParamsMsg.RateGainILength()):
                    self.rateGainI.append(fbMultirotorControlParamsMsg.RateGainI(i))
            else:
                self.rateGainI = fbMultirotorControlParamsMsg.RateGainIAsNumpy()

    # FB_MultirotorControlParamsMsgT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        if self.velGainP is not None:
            if np is not None and type(self.velGainP) is np.ndarray:
                velGainP = builder.CreateNumpyVector(self.velGainP)
            else:
                FB_MultirotorControlParamsMsgStartVelGainPVector(builder, len(self.velGainP))
                for i in reversed(range(len(self.velGainP))):
                    builder.PrependFloat32(self.velGainP[i])
                velGainP = builder.EndVector()
        if self.velGainD is not None:
            if np is not None and type(self.velGainD) is np.ndarray:
                velGainD = builder.CreateNumpyVector(self.velGainD)
            else:
                FB_MultirotorControlParamsMsgStartVelGainDVector(builder, len(self.velGainD))
                for i in reversed(range(len(self.velGainD))):
                    builder.PrependFloat32(self.velGainD[i])
                velGainD = builder.EndVector()
        if self.velGainI is not None:
            if np is not None and type(self.velGainI) is np.ndarray:
                velGainI = builder.CreateNumpyVector(self.velGainI)
            else:
                FB_MultirotorControlParamsMsgStartVelGainIVector(builder, len(self.velGainI))
                for i in reversed(range(len(self.velGainI))):
                    builder.PrependFloat32(self.velGainI[i])
                velGainI = builder.EndVector()
        if self.attGainP is not None:
            if np is not None and type(self.attGainP) is np.ndarray:
                attGainP = builder.CreateNumpyVector(self.attGainP)
            else:
                FB_MultirotorControlParamsMsgStartAttGainPVector(builder, len(self.attGainP))
                for i in reversed(range(len(self.attGainP))):
                    builder.PrependFloat32(self.attGainP[i])
                attGainP = builder.EndVector()
        if self.attGainD is not None:
            if np is not None and type(self.attGainD) is np.ndarray:
                attGainD = builder.CreateNumpyVector(self.attGainD)
            else:
                FB_MultirotorControlParamsMsgStartAttGainDVector(builder, len(self.attGainD))
                for i in reversed(range(len(self.attGainD))):
                    builder.PrependFloat32(self.attGainD[i])
                attGainD = builder.EndVector()
        if self.attGainI is not None:
            if np is not None and type(self.attGainI) is np.ndarray:
                attGainI = builder.CreateNumpyVector(self.attGainI)
            else:
                FB_MultirotorControlParamsMsgStartAttGainIVector(builder, len(self.attGainI))
                for i in reversed(range(len(self.attGainI))):
                    builder.PrependFloat32(self.attGainI[i])
                attGainI = builder.EndVector()
        if self.rateGainP is not None:
            if np is not None and type(self.rateGainP) is np.ndarray:
                rateGainP = builder.CreateNumpyVector(self.rateGainP)
            else:
                FB_MultirotorControlParamsMsgStartRateGainPVector(builder, len(self.rateGainP))
                for i in reversed(range(len(self.rateGainP))):
                    builder.PrependFloat32(self.rateGainP[i])
                rateGainP = builder.EndVector()
        if self.rateGainD is not None:
            if np is not None and type(self.rateGainD) is np.ndarray:
                rateGainD = builder.CreateNumpyVector(self.rateGainD)
            else:
                FB_MultirotorControlParamsMsgStartRateGainDVector(builder, len(self.rateGainD))
                for i in reversed(range(len(self.rateGainD))):
                    builder.PrependFloat32(self.rateGainD[i])
                rateGainD = builder.EndVector()
        if self.rateGainI is not None:
            if np is not None and type(self.rateGainI) is np.ndarray:
                rateGainI = builder.CreateNumpyVector(self.rateGainI)
            else:
                FB_MultirotorControlParamsMsgStartRateGainIVector(builder, len(self.rateGainI))
                for i in reversed(range(len(self.rateGainI))):
                    builder.PrependFloat32(self.rateGainI[i])
                rateGainI = builder.EndVector()
        FB_MultirotorControlParamsMsgStart(builder)
        if self.sender is not None:
            FB_MultirotorControlParamsMsgAddSender(builder, sender)
        if self.velGainP is not None:
            FB_MultirotorControlParamsMsgAddVelGainP(builder, velGainP)
        if self.velGainD is not None:
            FB_MultirotorControlParamsMsgAddVelGainD(builder, velGainD)
        if self.velGainI is not None:
            FB_MultirotorControlParamsMsgAddVelGainI(builder, velGainI)
        if self.attGainP is not None:
            FB_MultirotorControlParamsMsgAddAttGainP(builder, attGainP)
        if self.attGainD is not None:
            FB_MultirotorControlParamsMsgAddAttGainD(builder, attGainD)
        if self.attGainI is not None:
            FB_MultirotorControlParamsMsgAddAttGainI(builder, attGainI)
        if self.rateGainP is not None:
            FB_MultirotorControlParamsMsgAddRateGainP(builder, rateGainP)
        if self.rateGainD is not None:
            FB_MultirotorControlParamsMsgAddRateGainD(builder, rateGainD)
        if self.rateGainI is not None:
            FB_MultirotorControlParamsMsgAddRateGainI(builder, rateGainI)
        fbMultirotorControlParamsMsg = FB_MultirotorControlParamsMsgEnd(builder)
        return fbMultirotorControlParamsMsg


class FB_MultirotorMsgAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FB_MultirotorMsgAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFB_MultirotorMsgAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FB_MultirotorMsgAllBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4C\x52\x54", size_prefixed=size_prefixed)

    # FB_MultirotorMsgAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FB_MultirotorMsgAll
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FB_MultirotorMsgAll
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FB_MultirotorMsgAll
    def CmdReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FB_MultirotorMsgAll
    def GroundTruth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_MultirotorGroundTruthMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_MultirotorMsgAll
    def CtrlParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_MultirotorControlParamsMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_MultirotorMsgAll
    def CmdState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_MultirotorGroundTruthMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_MultirotorMsgAll
    def CmdControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_ActuatorsMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FB_MultirotorMsgAll
    def CmdControlParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FB_MultirotorControlParamsMsg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FB_MultirotorMsgAllStart(builder):
    builder.StartObject(8)

def FB_MultirotorMsgAllAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def FB_MultirotorMsgAllAddMsgType(builder, msgType):
    builder.PrependInt32Slot(1, msgType, 0)

def FB_MultirotorMsgAllAddCmdReset(builder, cmdReset):
    builder.PrependInt32Slot(2, cmdReset, 0)

def FB_MultirotorMsgAllAddGroundTruth(builder, groundTruth):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(groundTruth), 0)

def FB_MultirotorMsgAllAddCtrlParams(builder, ctrlParams):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlParams), 0)

def FB_MultirotorMsgAllAddCmdState(builder, cmdState):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(cmdState), 0)

def FB_MultirotorMsgAllAddCmdControl(builder, cmdControl):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cmdControl), 0)

def FB_MultirotorMsgAllAddCmdControlParams(builder, cmdControlParams):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cmdControlParams), 0)

def FB_MultirotorMsgAllEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class FB_MultirotorMsgAllT(object):

    # FB_MultirotorMsgAllT
    def __init__(self):
        self.sender = None  # type: str
        self.msgType = 0  # type: int
        self.cmdReset = 0  # type: int
        self.groundTruth = None  # type: Optional[FB_MultirotorGroundTruthMsgT]
        self.ctrlParams = None  # type: Optional[FB_MultirotorControlParamsMsgT]
        self.cmdState = None  # type: Optional[FB_MultirotorGroundTruthMsgT]
        self.cmdControl = None  # type: Optional[FB_ActuatorsMsgT]
        self.cmdControlParams = None  # type: Optional[FB_MultirotorControlParamsMsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fbMultirotorMsgAll = FB_MultirotorMsgAll()
        fbMultirotorMsgAll.Init(buf, pos)
        return cls.InitFromObj(fbMultirotorMsgAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fbMultirotorMsgAll):
        x = FB_MultirotorMsgAllT()
        x._UnPack(fbMultirotorMsgAll)
        return x

    # FB_MultirotorMsgAllT
    def _UnPack(self, fbMultirotorMsgAll):
        if fbMultirotorMsgAll is None:
            return
        self.sender = fbMultirotorMsgAll.Sender()
        self.msgType = fbMultirotorMsgAll.MsgType()
        self.cmdReset = fbMultirotorMsgAll.CmdReset()
        if fbMultirotorMsgAll.GroundTruth() is not None:
            self.groundTruth = FB_MultirotorGroundTruthMsgT.InitFromObj(fbMultirotorMsgAll.GroundTruth())
        if fbMultirotorMsgAll.CtrlParams() is not None:
            self.ctrlParams = FB_MultirotorControlParamsMsgT.InitFromObj(fbMultirotorMsgAll.CtrlParams())
        if fbMultirotorMsgAll.CmdState() is not None:
            self.cmdState = FB_MultirotorGroundTruthMsgT.InitFromObj(fbMultirotorMsgAll.CmdState())
        if fbMultirotorMsgAll.CmdControl() is not None:
            self.cmdControl = FB_ActuatorsMsgT.InitFromObj(fbMultirotorMsgAll.CmdControl())
        if fbMultirotorMsgAll.CmdControlParams() is not None:
            self.cmdControlParams = FB_MultirotorControlParamsMsgT.InitFromObj(fbMultirotorMsgAll.CmdControlParams())

    # FB_MultirotorMsgAllT
    def Pack(self, builder):
        if self.sender is not None:
            sender = builder.CreateString(self.sender)
        if self.groundTruth is not None:
            groundTruth = self.groundTruth.Pack(builder)
        if self.ctrlParams is not None:
            ctrlParams = self.ctrlParams.Pack(builder)
        if self.cmdState is not None:
            cmdState = self.cmdState.Pack(builder)
        if self.cmdControl is not None:
            cmdControl = self.cmdControl.Pack(builder)
        if self.cmdControlParams is not None:
            cmdControlParams = self.cmdControlParams.Pack(builder)
        FB_MultirotorMsgAllStart(builder)
        if self.sender is not None:
            FB_MultirotorMsgAllAddSender(builder, sender)
        FB_MultirotorMsgAllAddMsgType(builder, self.msgType)
        FB_MultirotorMsgAllAddCmdReset(builder, self.cmdReset)
        if self.groundTruth is not None:
            FB_MultirotorMsgAllAddGroundTruth(builder, groundTruth)
        if self.ctrlParams is not None:
            FB_MultirotorMsgAllAddCtrlParams(builder, ctrlParams)
        if self.cmdState is not None:
            FB_MultirotorMsgAllAddCmdState(builder, cmdState)
        if self.cmdControl is not None:
            FB_MultirotorMsgAllAddCmdControl(builder, cmdControl)
        if self.cmdControlParams is not None:
            FB_MultirotorMsgAllAddCmdControlParams(builder, cmdControlParams)
        fbMultirotorMsgAll = FB_MultirotorMsgAllEnd(builder)
        return fbMultirotorMsgAll


