#  Copyright (c) 2023.  OceanDSL (https://oceandsl.uni-kiel.de)
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Generated from Configuration.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,250,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,3,20,140,8,
        20,1,20,5,20,143,8,20,10,20,12,20,146,9,20,1,21,1,21,1,21,5,21,151,
        8,21,10,21,12,21,154,9,21,1,22,3,22,157,8,22,1,22,1,22,1,23,3,23,
        162,8,23,1,23,3,23,165,8,23,1,23,1,23,1,23,1,23,3,23,171,8,23,1,
        23,3,23,174,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,
        24,185,8,24,1,25,4,25,188,8,25,11,25,12,25,189,1,26,1,26,1,26,1,
        26,5,26,196,8,26,10,26,12,26,199,9,26,1,26,1,26,1,26,1,26,1,26,5,
        26,206,8,26,10,26,12,26,209,9,26,1,26,3,26,212,8,26,1,27,4,27,215,
        8,27,11,27,12,27,216,1,27,1,27,1,28,1,28,1,28,1,28,5,28,225,8,28,
        10,28,12,28,228,9,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        5,29,239,8,29,10,29,12,29,242,9,29,1,29,3,29,245,8,29,1,29,1,29,
        1,30,1,30,1,226,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,
        0,9,3,0,65,90,95,95,97,122,6,0,42,42,45,45,47,57,65,90,94,95,97,
        122,2,0,69,69,101,101,1,0,48,57,2,0,34,34,92,92,2,0,39,39,92,92,
        3,0,9,10,13,13,32,32,3,0,10,10,13,13,124,124,3,0,10,10,13,13,63,
        63,267,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,1,63,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,88,1,0,0,
        0,9,90,1,0,0,0,11,98,1,0,0,0,13,100,1,0,0,0,15,108,1,0,0,0,17,110,
        1,0,0,0,19,112,1,0,0,0,21,118,1,0,0,0,23,120,1,0,0,0,25,122,1,0,
        0,0,27,124,1,0,0,0,29,126,1,0,0,0,31,128,1,0,0,0,33,130,1,0,0,0,
        35,132,1,0,0,0,37,134,1,0,0,0,39,136,1,0,0,0,41,139,1,0,0,0,43,147,
        1,0,0,0,45,156,1,0,0,0,47,161,1,0,0,0,49,184,1,0,0,0,51,187,1,0,
        0,0,53,211,1,0,0,0,55,214,1,0,0,0,57,220,1,0,0,0,59,234,1,0,0,0,
        61,248,1,0,0,0,63,64,5,99,0,0,64,65,5,111,0,0,65,66,5,110,0,0,66,
        67,5,102,0,0,67,68,5,105,0,0,68,69,5,103,0,0,69,70,5,117,0,0,70,
        71,5,114,0,0,71,72,5,97,0,0,72,73,5,116,0,0,73,74,5,105,0,0,74,75,
        5,111,0,0,75,76,5,110,0,0,76,2,1,0,0,0,77,78,5,58,0,0,78,4,1,0,0,
        0,79,80,5,97,0,0,80,81,5,99,0,0,81,82,5,116,0,0,82,83,5,105,0,0,
        83,84,5,118,0,0,84,85,5,97,0,0,85,86,5,116,0,0,86,87,5,101,0,0,87,
        6,1,0,0,0,88,89,5,44,0,0,89,8,1,0,0,0,90,91,5,105,0,0,91,92,5,110,
        0,0,92,93,5,99,0,0,93,94,5,108,0,0,94,95,5,117,0,0,95,96,5,100,0,
        0,96,97,5,101,0,0,97,10,1,0,0,0,98,99,5,33,0,0,99,12,1,0,0,0,100,
        101,5,102,0,0,101,102,5,101,0,0,102,103,5,97,0,0,103,104,5,116,0,
        0,104,105,5,117,0,0,105,106,5,114,0,0,106,107,5,101,0,0,107,14,1,
        0,0,0,108,109,5,123,0,0,109,16,1,0,0,0,110,111,5,125,0,0,111,18,
        1,0,0,0,112,113,5,103,0,0,113,114,5,114,0,0,114,115,5,111,0,0,115,
        116,5,117,0,0,116,117,5,112,0,0,117,20,1,0,0,0,118,119,5,91,0,0,
        119,22,1,0,0,0,120,121,5,93,0,0,121,24,1,0,0,0,122,123,5,43,0,0,
        123,26,1,0,0,0,124,125,5,45,0,0,125,28,1,0,0,0,126,127,5,42,0,0,
        127,30,1,0,0,0,128,129,5,47,0,0,129,32,1,0,0,0,130,131,5,37,0,0,
        131,34,1,0,0,0,132,133,5,40,0,0,133,36,1,0,0,0,134,135,5,41,0,0,
        135,38,1,0,0,0,136,137,5,46,0,0,137,40,1,0,0,0,138,140,7,0,0,0,139,
        138,1,0,0,0,140,144,1,0,0,0,141,143,7,1,0,0,142,141,1,0,0,0,143,
        146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,42,1,0,0,0,146,144,
        1,0,0,0,147,152,3,41,20,0,148,149,5,46,0,0,149,151,3,41,20,0,150,
        148,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
        44,1,0,0,0,154,152,1,0,0,0,155,157,5,45,0,0,156,155,1,0,0,0,156,
        157,1,0,0,0,157,158,1,0,0,0,158,159,3,51,25,0,159,46,1,0,0,0,160,
        162,5,45,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,
        165,3,51,25,0,164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,
        167,5,46,0,0,167,173,3,51,25,0,168,170,7,2,0,0,169,171,5,45,0,0,
        170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,174,3,51,25,
        0,173,168,1,0,0,0,173,174,1,0,0,0,174,48,1,0,0,0,175,176,5,116,0,
        0,176,177,5,114,0,0,177,178,5,117,0,0,178,185,5,101,0,0,179,180,
        5,102,0,0,180,181,5,97,0,0,181,182,5,108,0,0,182,183,5,115,0,0,183,
        185,5,101,0,0,184,175,1,0,0,0,184,179,1,0,0,0,185,50,1,0,0,0,186,
        188,7,3,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,
        190,1,0,0,0,190,52,1,0,0,0,191,197,5,34,0,0,192,193,5,92,0,0,193,
        196,9,0,0,0,194,196,8,4,0,0,195,192,1,0,0,0,195,194,1,0,0,0,196,
        199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,
        197,1,0,0,0,200,212,5,34,0,0,201,207,5,39,0,0,202,203,5,92,0,0,203,
        206,9,0,0,0,204,206,8,5,0,0,205,202,1,0,0,0,205,204,1,0,0,0,206,
        209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,
        207,1,0,0,0,210,212,5,39,0,0,211,191,1,0,0,0,211,201,1,0,0,0,212,
        54,1,0,0,0,213,215,7,6,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,6,27,0,0,219,56,
        1,0,0,0,220,221,5,47,0,0,221,222,5,42,0,0,222,226,1,0,0,0,223,225,
        9,0,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,227,1,0,0,0,226,224,
        1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,42,0,0,230,231,
        5,47,0,0,231,232,1,0,0,0,232,233,6,28,0,0,233,58,1,0,0,0,234,235,
        5,47,0,0,235,236,5,47,0,0,236,240,1,0,0,0,237,239,8,7,0,0,238,237,
        1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,244,
        1,0,0,0,242,240,1,0,0,0,243,245,7,8,0,0,244,243,1,0,0,0,244,245,
        1,0,0,0,245,246,1,0,0,0,246,247,6,29,0,0,247,60,1,0,0,0,248,249,
        9,0,0,0,249,62,1,0,0,0,21,0,139,142,144,152,156,161,164,170,173,
        184,189,195,197,205,207,211,216,226,240,244,1,6,0,0
    ]

class ConfigurationLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    ID = 21
    QualifiedName = 22
    ELONG = 23
    EDOUBLE = 24
    EBoolean = 25
    INT = 26
    STRING = 27
    WS = 28
    ML_COMMENT = 29
    SL_COMMENT = 30
    ANY_OTHER = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'configuration'", "':'", "'activate'", "','", "'include'", 
            "'!'", "'feature'", "'{'", "'}'", "'group'", "'['", "']'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "QualifiedName", "ELONG", "EDOUBLE", "EBoolean", "INT", 
            "STRING", "WS", "ML_COMMENT", "SL_COMMENT", "ANY_OTHER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "ID", "QualifiedName", "ELONG", "EDOUBLE", "EBoolean", 
                  "INT", "STRING", "WS", "ML_COMMENT", "SL_COMMENT", "ANY_OTHER" ]

    grammarFileName = "Configuration.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


