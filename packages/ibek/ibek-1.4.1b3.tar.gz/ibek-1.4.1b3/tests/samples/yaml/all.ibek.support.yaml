# yaml-language-server: $schema=../schemas/ibek.support.schema.json

################################################################################
### ibek support YAML to demonstrate all arg types and definition outputs
################################################################################
module: module

defs:
  - name: AllObject
    description: |
      Example object that has one of each arg type
    args:
      - type: id
        name: name
        description: identifier

      - type: bool
        name: do_database
        description: don't render DB if this is false
        default: true

      - type: enum
        name: my_int_enum
        description: integer enumerated type
        default: 2
        values:
          all_ahead: 1
          full_speed: 2
          ramming_speed: 3
          stop: 0

      - type: enum
        name: my_inferred_enum
        description: integer enumerated type with inferred value
        values:
          first: hello
          second: world
          third:

      - type: enum
        name: clock_rate
        description: |
          demonstrates use of VME clock rates as an enum
          this is an example of an 'illegal' python enum
        values:
          1Hz: 0
          2Hz: 1
          5Hz: 2
          10Hz: 3
          dummy:

      # string demonstrates the use of no default to force user to specify
      # values in the IOC YAML
      - type: str
        name: my_str
        description: string arg

      - type: int
        name: my_int
        description: integer arg
        default: 1

      # non-defaulted arg in the middle demonstrates pydantic's ability to cope
      - type: object
        name: my_object
        description: object arg

      - type: float
        name: my_float
        description: float arg
        default: 1.0

      - type: bool
        name: my_bool
        description: bool arg
        default: true

    values:
      - name: calculated_one
        value: "{{ name }}.{{ my_str }}.{{ my_int }}.{{ my_float }}.{{ my_bool }}"
        description: test jinja render of arg values

    pre_init:
      - type: comment
        value: |
          this is a comment
          that spans multiple lines
      - type: text
        value: |-
          testPreInit "{{ name }}" "'{{ my_str }}'"

      # default type is text
      - value: |
          my_str =                    {{ my_str }}
          my_inferred_enum =          {{ my_inferred_enum }}
          clock_rate =                {{ clock_rate }}
          my_mixed_enum_no_default =  {{ my_mixed_enum_no_default }}
          .

    post_init:
      - value: |-
          testPostInit "{{ name }}" test_value:{{ test_value }}
      - value: this should appear once only in the post_init section
        when: first
      - type: comment
        value: |-
          post init comment

    databases:
      - file: another_test.db
        enabled: "{{ do_database }}"
        args:
          name:
          my_int_enum:
          clock_rate:
          db_calculated: "HELLO {{ name }}"
          calculated_one:
      - file: yet_another.db
        args:
          name:
          my_object:
          my_float:
          my_bool:
      - file: jinjified{{ my_int }}.db
        args:
          name:

    pvi:
      yaml_path: simple.pvi.device.yaml
      prefix: "{{ name }}"
      pva_template: true
