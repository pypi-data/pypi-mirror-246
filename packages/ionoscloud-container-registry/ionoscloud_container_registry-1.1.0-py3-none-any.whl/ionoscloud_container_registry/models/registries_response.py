# coding: utf-8

"""
    Container Registry service

    ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_container_registry.configuration import Configuration


class RegistriesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'links': 'PaginationLinks',

        'href': 'str',

        'id': 'str',

        'items': 'list[RegistryResponse]',

        'pagination': 'RegistryPagination',

        'type': 'str',
    }

    attribute_map = {

        'links': '_links',

        'href': 'href',

        'id': 'id',

        'items': 'items',

        'pagination': 'pagination',

        'type': 'type',
    }

    def __init__(self, links=None, href=None, id=None, items=None, pagination=None, type=None, local_vars_configuration=None):  # noqa: E501
        """RegistriesResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._href = None
        self._id = None
        self._items = None
        self._pagination = None
        self._type = None
        self.discriminator = None

        self.links = links
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        self.items = items
        self.pagination = pagination
        if type is not None:
            self.type = type


    @property
    def links(self):
        """Gets the links of this RegistriesResponse.  # noqa: E501


        :return: The links of this RegistriesResponse.  # noqa: E501
        :rtype: PaginationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RegistriesResponse.


        :param links: The links of this RegistriesResponse.  # noqa: E501
        :type links: PaginationLinks
        """
        if self.local_vars_configuration.client_side_validation and links is None:  # noqa: E501
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def href(self):
        """Gets the href of this RegistriesResponse.  # noqa: E501


        :return: The href of this RegistriesResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this RegistriesResponse.


        :param href: The href of this RegistriesResponse.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this RegistriesResponse.  # noqa: E501


        :return: The id of this RegistriesResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegistriesResponse.


        :param id: The id of this RegistriesResponse.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this RegistriesResponse.  # noqa: E501


        :return: The items of this RegistriesResponse.  # noqa: E501
        :rtype: list[RegistryResponse]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RegistriesResponse.


        :param items: The items of this RegistriesResponse.  # noqa: E501
        :type items: list[RegistryResponse]
        """

        self._items = items

    @property
    def pagination(self):
        """Gets the pagination of this RegistriesResponse.  # noqa: E501


        :return: The pagination of this RegistriesResponse.  # noqa: E501
        :rtype: RegistryPagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this RegistriesResponse.


        :param pagination: The pagination of this RegistriesResponse.  # noqa: E501
        :type pagination: RegistryPagination
        """
        if self.local_vars_configuration.client_side_validation and pagination is None:  # noqa: E501
            raise ValueError("Invalid value for `pagination`, must not be `None`")  # noqa: E501

        self._pagination = pagination

    @property
    def type(self):
        """Gets the type of this RegistriesResponse.  # noqa: E501


        :return: The type of this RegistriesResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegistriesResponse.


        :param type: The type of this RegistriesResponse.  # noqa: E501
        :type type: str
        """

        self._type = type
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistriesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistriesResponse):
            return True

        return self.to_dict() != other.to_dict()
