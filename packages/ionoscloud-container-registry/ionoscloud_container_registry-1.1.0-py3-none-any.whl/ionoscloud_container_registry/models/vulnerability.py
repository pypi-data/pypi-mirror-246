# coding: utf-8

"""
    Container Registry service

    ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_container_registry.configuration import Configuration


class Vulnerability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'description': 'str',

        'recommendations': 'str',

        'data_source': 'VulnerabilityDataSource',

        'fixable': 'bool',

        'affects': 'list[Purl]',

        'references': 'list[str]',

        'severity': 'str',

        'score': 'float',
    }

    attribute_map = {

        'description': 'description',

        'recommendations': 'recommendations',

        'data_source': 'dataSource',

        'fixable': 'fixable',

        'affects': 'affects',

        'references': 'references',

        'severity': 'severity',

        'score': 'score',
    }

    def __init__(self, description=None, recommendations=None, data_source=None, fixable=None, affects=None, references=None, severity=None, score=None, local_vars_configuration=None):  # noqa: E501
        """Vulnerability - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._recommendations = None
        self._data_source = None
        self._fixable = None
        self._affects = None
        self._references = None
        self._severity = None
        self._score = None
        self.discriminator = None

        self.description = description
        if recommendations is not None:
            self.recommendations = recommendations
        self.data_source = data_source
        self.fixable = fixable
        self.affects = affects
        if references is not None:
            self.references = references
        self.severity = severity
        self.score = score


    @property
    def description(self):
        """Gets the description of this Vulnerability.  # noqa: E501

        A description of the vulnerability as provided by the source.  # noqa: E501

        :return: The description of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vulnerability.

        A description of the vulnerability as provided by the source.  # noqa: E501

        :param description: The description of this Vulnerability.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def recommendations(self):
        """Gets the recommendations of this Vulnerability.  # noqa: E501

        Recommendations for the vulnerability as provided by the source.  # noqa: E501

        :return: The recommendations of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this Vulnerability.

        Recommendations for the vulnerability as provided by the source.  # noqa: E501

        :param recommendations: The recommendations of this Vulnerability.  # noqa: E501
        :type recommendations: str
        """

        self._recommendations = recommendations

    @property
    def data_source(self):
        """Gets the data_source of this Vulnerability.  # noqa: E501


        :return: The data_source of this Vulnerability.  # noqa: E501
        :rtype: VulnerabilityDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Vulnerability.


        :param data_source: The data_source of this Vulnerability.  # noqa: E501
        :type data_source: VulnerabilityDataSource
        """
        if self.local_vars_configuration.client_side_validation and data_source is None:  # noqa: E501
            raise ValueError("Invalid value for `data_source`, must not be `None`")  # noqa: E501

        self._data_source = data_source

    @property
    def fixable(self):
        """Gets the fixable of this Vulnerability.  # noqa: E501

        Indicates whether the vulnerability can be fixed by updating the affected package.  # noqa: E501

        :return: The fixable of this Vulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._fixable

    @fixable.setter
    def fixable(self, fixable):
        """Sets the fixable of this Vulnerability.

        Indicates whether the vulnerability can be fixed by updating the affected package.  # noqa: E501

        :param fixable: The fixable of this Vulnerability.  # noqa: E501
        :type fixable: bool
        """
        if self.local_vars_configuration.client_side_validation and fixable is None:  # noqa: E501
            raise ValueError("Invalid value for `fixable`, must not be `None`")  # noqa: E501

        self._fixable = fixable

    @property
    def affects(self):
        """Gets the affects of this Vulnerability.  # noqa: E501


        :return: The affects of this Vulnerability.  # noqa: E501
        :rtype: list[Purl]
        """
        return self._affects

    @affects.setter
    def affects(self, affects):
        """Sets the affects of this Vulnerability.


        :param affects: The affects of this Vulnerability.  # noqa: E501
        :type affects: list[Purl]
        """
        if self.local_vars_configuration.client_side_validation and affects is None:  # noqa: E501
            raise ValueError("Invalid value for `affects`, must not be `None`")  # noqa: E501

        self._affects = affects

    @property
    def references(self):
        """Gets the references of this Vulnerability.  # noqa: E501

        Published advisories of the vulnerability if provided.  # noqa: E501

        :return: The references of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Vulnerability.

        Published advisories of the vulnerability if provided.  # noqa: E501

        :param references: The references of this Vulnerability.  # noqa: E501
        :type references: list[str]
        """

        self._references = references

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.  # noqa: E501

        The CVSS vulnerability severity rating  # noqa: E501

        :return: The severity of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.

        The CVSS vulnerability severity rating  # noqa: E501

        :param severity: The severity of this Vulnerability.  # noqa: E501
        :type severity: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def score(self):
        """Gets the score of this Vulnerability.  # noqa: E501

        The CVSS score of the vulnerability  # noqa: E501

        :return: The score of this Vulnerability.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Vulnerability.

        The CVSS score of the vulnerability  # noqa: E501

        :param score: The score of this Vulnerability.  # noqa: E501
        :type score: float
        """
        if self.local_vars_configuration.client_side_validation and score is None:  # noqa: E501
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vulnerability):
            return True

        return self.to_dict() != other.to_dict()
