# coding: utf-8

"""
    Container Registry service

    ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_container_registry.configuration import Configuration


class Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'repository_name': 'str',

        'digest': 'str',

        'tags': 'list[str]',

        'media_type': 'str',
    }

    attribute_map = {

        'repository_name': 'repositoryName',

        'digest': 'digest',

        'tags': 'tags',

        'media_type': 'mediaType',
    }

    def __init__(self, repository_name=None, digest=None, tags=None, media_type=None, local_vars_configuration=None):  # noqa: E501
        """Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._repository_name = None
        self._digest = None
        self._tags = None
        self._media_type = None
        self.discriminator = None

        self.repository_name = repository_name
        self.digest = digest
        if tags is not None:
            self.tags = tags
        self.media_type = media_type


    @property
    def repository_name(self):
        """Gets the repository_name of this Artifact.  # noqa: E501


        :return: The repository_name of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this Artifact.


        :param repository_name: The repository_name of this Artifact.  # noqa: E501
        :type repository_name: str
        """
        if self.local_vars_configuration.client_side_validation and repository_name is None:  # noqa: E501
            raise ValueError("Invalid value for `repository_name`, must not be `None`")  # noqa: E501

        self._repository_name = repository_name

    @property
    def digest(self):
        """Gets the digest of this Artifact.  # noqa: E501

        The digest of the artifact  # noqa: E501

        :return: The digest of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this Artifact.

        The digest of the artifact  # noqa: E501

        :param digest: The digest of this Artifact.  # noqa: E501
        :type digest: str
        """
        if self.local_vars_configuration.client_side_validation and digest is None:  # noqa: E501
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501

        self._digest = digest

    @property
    def tags(self):
        """Gets the tags of this Artifact.  # noqa: E501

        The tags of an artifact  # noqa: E501

        :return: The tags of this Artifact.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Artifact.

        The tags of an artifact  # noqa: E501

        :param tags: The tags of this Artifact.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def media_type(self):
        """Gets the media_type of this Artifact.  # noqa: E501

        The media type of the artifact  # noqa: E501

        :return: The media_type of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Artifact.

        The media type of the artifact  # noqa: E501

        :param media_type: The media_type of this Artifact.  # noqa: E501
        :type media_type: str
        """
        if self.local_vars_configuration.client_side_validation and media_type is None:  # noqa: E501
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501

        self._media_type = media_type
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Artifact):
            return True

        return self.to_dict() != other.to_dict()
