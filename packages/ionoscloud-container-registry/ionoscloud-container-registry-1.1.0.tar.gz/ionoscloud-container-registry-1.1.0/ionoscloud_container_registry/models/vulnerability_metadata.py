# coding: utf-8

"""
    Container Registry service

    ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_container_registry.configuration import Configuration


class VulnerabilityMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'published_at': 'datetime',

        'updated_at': 'datetime',
    }

    attribute_map = {

        'published_at': 'publishedAt',

        'updated_at': 'updatedAt',
    }

    def __init__(self, published_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """VulnerabilityMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._published_at = None
        self._updated_at = None
        self.discriminator = None

        self.published_at = published_at
        if updated_at is not None:
            self.updated_at = updated_at


    @property
    def published_at(self):
        """Gets the published_at of this VulnerabilityMetadata.  # noqa: E501

        The date and time the vulnerability was published  # noqa: E501

        :return: The published_at of this VulnerabilityMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this VulnerabilityMetadata.

        The date and time the vulnerability was published  # noqa: E501

        :param published_at: The published_at of this VulnerabilityMetadata.  # noqa: E501
        :type published_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and published_at is None:  # noqa: E501
            raise ValueError("Invalid value for `published_at`, must not be `None`")  # noqa: E501

        self._published_at = published_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VulnerabilityMetadata.  # noqa: E501

        The date and time the vulnerability was last updated  # noqa: E501

        :return: The updated_at of this VulnerabilityMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VulnerabilityMetadata.

        The date and time the vulnerability was last updated  # noqa: E501

        :param updated_at: The updated_at of this VulnerabilityMetadata.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityMetadata):
            return True

        return self.to_dict() != other.to_dict()
