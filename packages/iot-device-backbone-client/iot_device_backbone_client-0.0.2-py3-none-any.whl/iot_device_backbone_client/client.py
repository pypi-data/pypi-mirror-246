# Generated by ariadne-codegen
# Source: queries.graphql

from datetime import datetime
from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType, Upload
from .create_device_system_resource_metrics import CreateDeviceSystemResourceMetrics
from .create_fire_incident import CreateFireIncident
from .update_fire_incident import UpdateFireIncident
from .who_am_i import WhoAmI


def gql(q: str) -> str:
    return q


class IotDeviceBackboneClient(AsyncBaseClient):
    async def who_am_i(self, **kwargs: Any) -> WhoAmI:
        query = gql(
            """
            query WhoAmI {
              meDevice {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="WhoAmI", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return WhoAmI.model_validate(data)

    async def create_device_system_resource_metrics(
        self,
        timestamp: datetime,
        device_id: str,
        online_since: datetime,
        cpu_temperature: float,
        cpu_usage: float,
        ram_usage: float,
        disk_usage: float,
        **kwargs: Any
    ) -> CreateDeviceSystemResourceMetrics:
        query = gql(
            """
            mutation CreateDeviceSystemResourceMetrics($timestamp: DateTime!, $deviceId: ID!, $onlineSince: DateTime!, $cpuTemperature: Float!, $cpuUsage: Float!, $ramUsage: Float!, $diskUsage: Float!) {
              createDeviceSystemResourceMetrics(
                data: {deviceId: $deviceId, onlineSince: $onlineSince, cpuTemperature: $cpuTemperature, cpuUsage: $cpuUsage, ramUsage: $ramUsage, diskUsage: $diskUsage, timestamp: $timestamp}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "timestamp": timestamp,
            "deviceId": device_id,
            "onlineSince": online_since,
            "cpuTemperature": cpu_temperature,
            "cpuUsage": cpu_usage,
            "ramUsage": ram_usage,
            "diskUsage": disk_usage,
        }
        response = await self.execute(
            query=query,
            operation_name="CreateDeviceSystemResourceMetrics",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDeviceSystemResourceMetrics.model_validate(data)

    async def create_fire_incident(
        self,
        timestamp: datetime,
        device_id: str,
        has_fire: float,
        has_fire_hazard: float,
        **kwargs: Any
    ) -> CreateFireIncident:
        query = gql(
            """
            mutation CreateFireIncident($timestamp: DateTime!, $deviceId: ID!, $hasFire: Float!, $hasFireHazard: Float!) {
              createFireIncident(
                data: {timestamp: $timestamp, deviceId: $deviceId, hasFire: $hasFire, hasFireHazard: $hasFireHazard}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "timestamp": timestamp,
            "deviceId": device_id,
            "hasFire": has_fire,
            "hasFireHazard": has_fire_hazard,
        }
        response = await self.execute(
            query=query,
            operation_name="CreateFireIncident",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateFireIncident.model_validate(data)

    async def update_fire_incident(
        self,
        id: str,
        has_fire: Union[Optional[float], UnsetType] = UNSET,
        has_fire_hazard: Union[Optional[float], UnsetType] = UNSET,
        rgb_image: Union[Optional[Upload], UnsetType] = UNSET,
        annotated_rgb_image: Union[Optional[Upload], UnsetType] = UNSET,
        thermal_image: Union[Optional[Upload], UnsetType] = UNSET,
        annotated_thermal_image: Union[Optional[Upload], UnsetType] = UNSET,
        overlay_image: Union[Optional[Upload], UnsetType] = UNSET,
        rgb_video: Union[Optional[Upload], UnsetType] = UNSET,
        thermal_video: Union[Optional[Upload], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateFireIncident:
        query = gql(
            """
            mutation UpdateFireIncident($id: ID!, $hasFire: Float, $hasFireHazard: Float, $rgbImage: Upload, $annotatedRgbImage: Upload, $thermalImage: Upload, $annotatedThermalImage: Upload, $overlayImage: Upload, $rgbVideo: Upload, $thermalVideo: Upload) {
              updateFireIncident(
                data: {id: $id, hasFire: $hasFire, hasFireHazard: $hasFireHazard, rgbImage: $rgbImage, annotatedRgbImage: $annotatedRgbImage, thermalImage: $thermalImage, annotatedThermalImage: $annotatedThermalImage, overlayImage: $overlayImage, rgbVideo: $rgbVideo, thermalVideo: $thermalVideo}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "hasFire": has_fire,
            "hasFireHazard": has_fire_hazard,
            "rgbImage": rgb_image,
            "annotatedRgbImage": annotated_rgb_image,
            "thermalImage": thermal_image,
            "annotatedThermalImage": annotated_thermal_image,
            "overlayImage": overlay_image,
            "rgbVideo": rgb_video,
            "thermalVideo": thermal_video,
        }
        response = await self.execute(
            query=query,
            operation_name="UpdateFireIncident",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateFireIncident.model_validate(data)
