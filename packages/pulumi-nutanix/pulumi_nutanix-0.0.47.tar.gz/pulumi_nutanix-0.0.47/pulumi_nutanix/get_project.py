# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, account_reference_lists=None, api_version=None, categories=None, default_subnet_reference=None, description=None, environment_reference_lists=None, external_network_lists=None, external_user_group_reference_lists=None, id=None, is_default=None, metadata=None, name=None, owner_reference=None, project_id=None, project_name=None, project_reference=None, resource_domains=None, state=None, subnet_reference_lists=None, user_reference_lists=None):
        if account_reference_lists and not isinstance(account_reference_lists, list):
            raise TypeError("Expected argument 'account_reference_lists' to be a list")
        pulumi.set(__self__, "account_reference_lists", account_reference_lists)
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if default_subnet_reference and not isinstance(default_subnet_reference, dict):
            raise TypeError("Expected argument 'default_subnet_reference' to be a dict")
        pulumi.set(__self__, "default_subnet_reference", default_subnet_reference)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_reference_lists and not isinstance(environment_reference_lists, list):
            raise TypeError("Expected argument 'environment_reference_lists' to be a list")
        pulumi.set(__self__, "environment_reference_lists", environment_reference_lists)
        if external_network_lists and not isinstance(external_network_lists, list):
            raise TypeError("Expected argument 'external_network_lists' to be a list")
        pulumi.set(__self__, "external_network_lists", external_network_lists)
        if external_user_group_reference_lists and not isinstance(external_user_group_reference_lists, list):
            raise TypeError("Expected argument 'external_user_group_reference_lists' to be a list")
        pulumi.set(__self__, "external_user_group_reference_lists", external_user_group_reference_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner_reference and not isinstance(owner_reference, dict):
            raise TypeError("Expected argument 'owner_reference' to be a dict")
        pulumi.set(__self__, "owner_reference", owner_reference)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if project_reference and not isinstance(project_reference, dict):
            raise TypeError("Expected argument 'project_reference' to be a dict")
        pulumi.set(__self__, "project_reference", project_reference)
        if resource_domains and not isinstance(resource_domains, list):
            raise TypeError("Expected argument 'resource_domains' to be a list")
        pulumi.set(__self__, "resource_domains", resource_domains)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subnet_reference_lists and not isinstance(subnet_reference_lists, list):
            raise TypeError("Expected argument 'subnet_reference_lists' to be a list")
        pulumi.set(__self__, "subnet_reference_lists", subnet_reference_lists)
        if user_reference_lists and not isinstance(user_reference_lists, list):
            raise TypeError("Expected argument 'user_reference_lists' to be a list")
        pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="accountReferenceLists")
    def account_reference_lists(self) -> Sequence['outputs.GetProjectAccountReferenceListResult']:
        """
        List of accounts associated with the project.
        * `account_reference_list.#.kind` - The kind name. Default value is `account`
        * `account_reference_list.#.uuid` - The UUID of an account.
        * `account_reference_list.#.name` - The name of an account.
        """
        return pulumi.get(self, "account_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProjectCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="defaultSubnetReference")
    def default_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        * `default_subnet_reference.kind` - The kind name. Default value is `subnet`
        * `default_subnet_reference.uuid` - The UUID of a subnet.
        * `default_subnet_reference.name` - The name of a subnet.
        """
        return pulumi.get(self, "default_subnet_reference")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentReferenceLists")
    def environment_reference_lists(self) -> Sequence['outputs.GetProjectEnvironmentReferenceListResult']:
        """
        List of environments associated with the project.
        * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
        * `environment_reference_list.#.uuid` - The UUID of an environment.
        * `environment_reference_list.#.name` - The name of an environment.
        """
        return pulumi.get(self, "environment_reference_lists")

    @property
    @pulumi.getter(name="externalNetworkLists")
    def external_network_lists(self) -> Sequence['outputs.GetProjectExternalNetworkListResult']:
        """
        List of external networks associated with the project.
        * `external_network_list.#.uuid` - The UUID of a network.
        * `external_network_list.#.name` - The name of a network.
        """
        return pulumi.get(self, "external_network_lists")

    @property
    @pulumi.getter(name="externalUserGroupReferenceLists")
    def external_user_group_reference_lists(self) -> Sequence['outputs.GetProjectExternalUserGroupReferenceListResult']:
        """
        List of directory service user groups. These groups are not managed by Nutanix.
        * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
        * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
        * `external_user_group_reference_list.#.name` - The name of a user_group
        """
        return pulumi.get(self, "external_user_group_reference_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="resourceDomains")
    def resource_domains(self) -> Sequence['outputs.GetProjectResourceDomainResult']:
        """
        The status for a resource domain (limits and values)
        * `resource_domain.resources` Array of the utilization/limit for resource types
        * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
        * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
        * `resource_domain.resources.#.units` - The units of the resource type
        * `resource_domain.resources.#.value` - The amount of resource consumed
        """
        return pulumi.get(self, "resource_domains")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetReferenceLists")
    def subnet_reference_lists(self) -> Sequence['outputs.GetProjectSubnetReferenceListResult']:
        """
        List of subnets for the project.
        * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
        * `subnet_reference_list.#.uuid` - The UUID of a subnet
        * `subnet_reference_list.#.name` - The name of a subnet.
        """
        return pulumi.get(self, "subnet_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Sequence['outputs.GetProjectUserReferenceListResult']:
        """
        List of users in the project.
        * `user_reference_list.#.kind` - The kind name. Default value is `user`
        * `user_reference_list.#.uuid` - The UUID of a user
        * `user_reference_list.#.name` - The name of a user.
        """
        return pulumi.get(self, "user_reference_lists")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            account_reference_lists=self.account_reference_lists,
            api_version=self.api_version,
            categories=self.categories,
            default_subnet_reference=self.default_subnet_reference,
            description=self.description,
            environment_reference_lists=self.environment_reference_lists,
            external_network_lists=self.external_network_lists,
            external_user_group_reference_lists=self.external_user_group_reference_lists,
            id=self.id,
            is_default=self.is_default,
            metadata=self.metadata,
            name=self.name,
            owner_reference=self.owner_reference,
            project_id=self.project_id,
            project_name=self.project_name,
            project_reference=self.project_reference,
            resource_domains=self.resource_domains,
            state=self.state,
            subnet_reference_lists=self.subnet_reference_lists,
            user_reference_lists=self.user_reference_lists)


def get_project(categories: Optional[Sequence[pulumi.InputType['GetProjectCategoryArgs']]] = None,
                external_user_group_reference_lists: Optional[Sequence[pulumi.InputType['GetProjectExternalUserGroupReferenceListArgs']]] = None,
                project_id: Optional[str] = None,
                project_name: Optional[str] = None,
                subnet_reference_lists: Optional[Sequence[pulumi.InputType['GetProjectSubnetReferenceListArgs']]] = None,
                user_reference_lists: Optional[Sequence[pulumi.InputType['GetProjectUserReferenceListArgs']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Describe a Nutanix Project and its values (if it has them).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    subnet = nutanix.Subnet("subnet",
        cluster_uuid="<YOUR_CLUSTER_ID>",
        description="Description of my unit test VLAN",
        vlan_id=31,
        subnet_type="VLAN",
        subnet_ip="10.250.140.0",
        default_gateway_ip="10.250.140.1",
        prefix_length=24,
        dhcp_options={
            "boot_file_name": "bootfile",
            "domain_name": "nutanix",
            "tftp_server_name": "10.250.140.200",
        },
        dhcp_domain_name_server_lists=[
            "8.8.8.8",
            "4.2.2.2",
        ],
        dhcp_domain_search_lists=[
            "terraform.nutanix.com",
            "terraform.unit.test.com",
        ])
    project_test = nutanix.Project("projectTest",
        description="This is my project",
        categories=[nutanix.ProjectCategoryArgs(
            name="Environment",
            value="Staging",
        )],
        resource_domain=nutanix.ProjectResourceDomainArgs(
            resources=[nutanix.ProjectResourceDomainResourceArgs(
                limit=4,
                resource_type="STORAGE",
            )],
        ),
        default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(
            uuid=subnet.metadata["uuid"],
        ),
        api_version="3.1")
    test = nutanix.get_project_output(project_id=project_test.id)
    ```


    :param Sequence[pulumi.InputType['GetProjectExternalUserGroupReferenceListArgs']] external_user_group_reference_lists: List of directory service user groups. These groups are not managed by Nutanix.
           * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
           * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
           * `external_user_group_reference_list.#.name` - The name of a user_group
    :param str project_id: - (Required) The `id` of the project.
    :param Sequence[pulumi.InputType['GetProjectSubnetReferenceListArgs']] subnet_reference_lists: List of subnets for the project.
           * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
           * `subnet_reference_list.#.uuid` - The UUID of a subnet
           * `subnet_reference_list.#.name` - The name of a subnet.
    :param Sequence[pulumi.InputType['GetProjectUserReferenceListArgs']] user_reference_lists: List of users in the project.
           * `user_reference_list.#.kind` - The kind name. Default value is `user`
           * `user_reference_list.#.uuid` - The UUID of a user
           * `user_reference_list.#.name` - The name of a user.
    """
    __args__ = dict()
    __args__['categories'] = categories
    __args__['externalUserGroupReferenceLists'] = external_user_group_reference_lists
    __args__['projectId'] = project_id
    __args__['projectName'] = project_name
    __args__['subnetReferenceLists'] = subnet_reference_lists
    __args__['userReferenceLists'] = user_reference_lists
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        account_reference_lists=pulumi.get(__ret__, 'account_reference_lists'),
        api_version=pulumi.get(__ret__, 'api_version'),
        categories=pulumi.get(__ret__, 'categories'),
        default_subnet_reference=pulumi.get(__ret__, 'default_subnet_reference'),
        description=pulumi.get(__ret__, 'description'),
        environment_reference_lists=pulumi.get(__ret__, 'environment_reference_lists'),
        external_network_lists=pulumi.get(__ret__, 'external_network_lists'),
        external_user_group_reference_lists=pulumi.get(__ret__, 'external_user_group_reference_lists'),
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        owner_reference=pulumi.get(__ret__, 'owner_reference'),
        project_id=pulumi.get(__ret__, 'project_id'),
        project_name=pulumi.get(__ret__, 'project_name'),
        project_reference=pulumi.get(__ret__, 'project_reference'),
        resource_domains=pulumi.get(__ret__, 'resource_domains'),
        state=pulumi.get(__ret__, 'state'),
        subnet_reference_lists=pulumi.get(__ret__, 'subnet_reference_lists'),
        user_reference_lists=pulumi.get(__ret__, 'user_reference_lists'))


@_utilities.lift_output_func(get_project)
def get_project_output(categories: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetProjectCategoryArgs']]]]] = None,
                       external_user_group_reference_lists: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetProjectExternalUserGroupReferenceListArgs']]]]] = None,
                       project_id: Optional[pulumi.Input[Optional[str]]] = None,
                       project_name: Optional[pulumi.Input[Optional[str]]] = None,
                       subnet_reference_lists: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetProjectSubnetReferenceListArgs']]]]] = None,
                       user_reference_lists: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetProjectUserReferenceListArgs']]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectResult]:
    """
    Describe a Nutanix Project and its values (if it has them).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    subnet = nutanix.Subnet("subnet",
        cluster_uuid="<YOUR_CLUSTER_ID>",
        description="Description of my unit test VLAN",
        vlan_id=31,
        subnet_type="VLAN",
        subnet_ip="10.250.140.0",
        default_gateway_ip="10.250.140.1",
        prefix_length=24,
        dhcp_options={
            "boot_file_name": "bootfile",
            "domain_name": "nutanix",
            "tftp_server_name": "10.250.140.200",
        },
        dhcp_domain_name_server_lists=[
            "8.8.8.8",
            "4.2.2.2",
        ],
        dhcp_domain_search_lists=[
            "terraform.nutanix.com",
            "terraform.unit.test.com",
        ])
    project_test = nutanix.Project("projectTest",
        description="This is my project",
        categories=[nutanix.ProjectCategoryArgs(
            name="Environment",
            value="Staging",
        )],
        resource_domain=nutanix.ProjectResourceDomainArgs(
            resources=[nutanix.ProjectResourceDomainResourceArgs(
                limit=4,
                resource_type="STORAGE",
            )],
        ),
        default_subnet_reference=nutanix.ProjectDefaultSubnetReferenceArgs(
            uuid=subnet.metadata["uuid"],
        ),
        api_version="3.1")
    test = nutanix.get_project_output(project_id=project_test.id)
    ```


    :param Sequence[pulumi.InputType['GetProjectExternalUserGroupReferenceListArgs']] external_user_group_reference_lists: List of directory service user groups. These groups are not managed by Nutanix.
           * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
           * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
           * `external_user_group_reference_list.#.name` - The name of a user_group
    :param str project_id: - (Required) The `id` of the project.
    :param Sequence[pulumi.InputType['GetProjectSubnetReferenceListArgs']] subnet_reference_lists: List of subnets for the project.
           * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
           * `subnet_reference_list.#.uuid` - The UUID of a subnet
           * `subnet_reference_list.#.name` - The name of a subnet.
    :param Sequence[pulumi.InputType['GetProjectUserReferenceListArgs']] user_reference_lists: List of users in the project.
           * `user_reference_list.#.kind` - The kind name. Default value is `user`
           * `user_reference_list.#.uuid` - The UUID of a user
           * `user_reference_list.#.name` - The name of a user.
    """
    ...
