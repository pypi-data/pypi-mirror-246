# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AccessControlPolicyCategory',
    'AccessControlPolicyContextFilterList',
    'AccessControlPolicyContextFilterListEntityFilterExpressionList',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide',
    'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories',
    'AccessControlPolicyContextFilterListScopeFilterExpressionList',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide',
    'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories',
    'AccessControlPolicyOwnerReference',
    'AccessControlPolicyRoleReference',
    'AccessControlPolicyUserGroupReferenceList',
    'AccessControlPolicyUserReferenceList',
    'AddressGroupIpAddressBlockList',
    'FoundationCentralImageClusterClusterStatus',
    'FoundationCentralImageClusterClusterStatusClusterProgressDetail',
    'FoundationCentralImageClusterClusterStatusNodeProgressDetail',
    'FoundationCentralImageClusterCommonNetworkSettings',
    'FoundationCentralImageClusterFoundationInitConfig',
    'FoundationCentralImageClusterFoundationInitConfigBlock',
    'FoundationCentralImageClusterFoundationInitConfigBlockNode',
    'FoundationCentralImageClusterFoundationInitConfigCluster',
    'FoundationCentralImageClusterFoundationInitConfigHypervisorIso',
    'FoundationCentralImageClusterFoundationInitConfigNosPackageUrl',
    'FoundationCentralImageClusterHypervisorIsoDetails',
    'FoundationCentralImageClusterNodeList',
    'FoundationImageNodesBlock',
    'FoundationImageNodesBlockNode',
    'FoundationImageNodesBlockNodeUcsmParams',
    'FoundationImageNodesBlockNodeVswitch',
    'FoundationImageNodesCluster',
    'FoundationImageNodesClusterUrl',
    'FoundationImageNodesEosMetadata',
    'FoundationImageNodesFcSettings',
    'FoundationImageNodesFcSettingsFcMetadata',
    'FoundationImageNodesHypervisorIso',
    'FoundationImageNodesHypervisorIsoEsx',
    'FoundationImageNodesHypervisorIsoHyperv',
    'FoundationImageNodesHypervisorIsoKvm',
    'FoundationImageNodesHypervisorIsoXen',
    'FoundationImageNodesTests',
    'FoundationIpmiConfigBlock',
    'FoundationIpmiConfigBlockNode',
    'ImageCategory',
    'ImageClusterReference',
    'ImageCurrentClusterReferenceList',
    'KarbonClusterActivePassiveConfig',
    'KarbonClusterCniConfig',
    'KarbonClusterCniConfigCalicoConfig',
    'KarbonClusterCniConfigCalicoConfigIpPoolConfig',
    'KarbonClusterCniConfigFlannelConfig',
    'KarbonClusterEtcdNodePool',
    'KarbonClusterEtcdNodePoolAhvConfig',
    'KarbonClusterEtcdNodePoolNode',
    'KarbonClusterExternalLbConfig',
    'KarbonClusterExternalLbConfigMasterNodesConfig',
    'KarbonClusterMasterNodePool',
    'KarbonClusterMasterNodePoolAhvConfig',
    'KarbonClusterMasterNodePoolNode',
    'KarbonClusterPrivateRegistry',
    'KarbonClusterSingleMasterConfig',
    'KarbonClusterStorageClassConfig',
    'KarbonClusterStorageClassConfigVolumesConfig',
    'KarbonClusterWorkerNodePool',
    'KarbonClusterWorkerNodePoolAhvConfig',
    'KarbonClusterWorkerNodePoolNode',
    'NetworkSecurityRuleAdRuleInboundAllowList',
    'NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAdRuleInboundAllowListFilterParam',
    'NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList',
    'NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAdRuleOutboundAllowList',
    'NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAdRuleOutboundAllowListFilterParam',
    'NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList',
    'NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAdRuleTargetGroupFilterParam',
    'NetworkSecurityRuleAppRuleInboundAllowList',
    'NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAppRuleInboundAllowListFilterParam',
    'NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList',
    'NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAppRuleOutboundAllowList',
    'NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList',
    'NetworkSecurityRuleAppRuleOutboundAllowListFilterParam',
    'NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList',
    'NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList',
    'NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList',
    'NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList',
    'NetworkSecurityRuleAppRuleTargetGroupFilterParam',
    'NetworkSecurityRuleCategory',
    'NetworkSecurityRuleIsolationRuleFirstEntityFilterParam',
    'NetworkSecurityRuleIsolationRuleSecondEntityFilterParam',
    'PbrDestination',
    'PbrProtocolParameters',
    'PbrProtocolParametersIcmp',
    'PbrProtocolParametersTcp',
    'PbrProtocolParametersTcpDestinationPortRangeList',
    'PbrProtocolParametersTcpSourcePortRangeList',
    'PbrProtocolParametersUdp',
    'PbrProtocolParametersUdpDestinationPortRangeList',
    'PbrProtocolParametersUdpSourcePortRangeList',
    'PbrSource',
    'ProjectAccountReferenceList',
    'ProjectCategory',
    'ProjectDefaultSubnetReference',
    'ProjectEnvironmentReferenceList',
    'ProjectExternalNetworkList',
    'ProjectExternalUserGroupReferenceList',
    'ProjectResourceDomain',
    'ProjectResourceDomainResource',
    'ProjectSubnetReferenceList',
    'ProjectUserReferenceList',
    'ProtectionRuleAvailabilityZoneConnectivityList',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy',
    'ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy',
    'ProtectionRuleCategory',
    'ProtectionRuleCategoryFilter',
    'ProtectionRuleCategoryFilterParam',
    'ProtectionRuleOrderedAvailabilityZoneList',
    'ProtectionRuleOwnerReference',
    'ProtectionRuleProjectReference',
    'RecoveryPlanCategory',
    'RecoveryPlanOwnerReference',
    'RecoveryPlanParameters',
    'RecoveryPlanParametersFloatingIpAssignmentList',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation',
    'RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference',
    'RecoveryPlanParametersNetworkMappingList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference',
    'RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference',
    'RecoveryPlanProjectReference',
    'RecoveryPlanStageList',
    'RecoveryPlanStageListStageWork',
    'RecoveryPlanStageListStageWorkRecoverEntities',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory',
    'RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList',
    'RoleCategory',
    'RoleOwnerReference',
    'RolePermissionReferenceList',
    'RoleProjectReference',
    'ServiceGroupServiceList',
    'ServiceGroupServiceListIcmpTypeCodeList',
    'ServiceGroupServiceListTcpPortRangeList',
    'ServiceGroupServiceListUdpPortRangeList',
    'StaticRoutesDefaultRouteNexthop',
    'StaticRoutesStaticRoutesList',
    'SubnetCategory',
    'UserAccessControlPolicyReferenceList',
    'UserCategory',
    'UserDirectoryServiceUser',
    'UserDirectoryServiceUserDirectoryServiceReference',
    'UserIdentityProviderUser',
    'UserIdentityProviderUserIdentityProviderReference',
    'UserProjectReferenceList',
    'VirtualMachineCategory',
    'VirtualMachineDiskList',
    'VirtualMachineDiskListDeviceProperties',
    'VirtualMachineDiskListStorageConfig',
    'VirtualMachineDiskListStorageConfigStorageContainerReference',
    'VirtualMachineGpuList',
    'VirtualMachineNicList',
    'VirtualMachineNicListIpEndpointList',
    'VirtualMachineNicListStatus',
    'VirtualMachineNicListStatusIpEndpointList',
    'VirtualMachineSerialPortList',
    'VpcCommonDomainNameServerIpList',
    'VpcExternalSubnetListStatus',
    'VpcExternalSubnetListStatusActiveGatewayNode',
    'VpcExternallyRoutablePrefixList',
    'GetAccessControlPoliciesEntityResult',
    'GetAccessControlPoliciesEntityCategoryResult',
    'GetAccessControlPoliciesEntityContextFilterListResult',
    'GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult',
    'GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult',
    'GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult',
    'GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult',
    'GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPoliciesEntityRoleReferenceResult',
    'GetAccessControlPoliciesEntityUserGroupReferenceListResult',
    'GetAccessControlPoliciesEntityUserReferenceListResult',
    'GetAccessControlPoliciesMetadataResult',
    'GetAccessControlPolicyCategoryResult',
    'GetAccessControlPolicyContextFilterListResult',
    'GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult',
    'GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult',
    'GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult',
    'GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult',
    'GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult',
    'GetAccessControlPolicyRoleReferenceResult',
    'GetAccessControlPolicyUserGroupReferenceListResult',
    'GetAccessControlPolicyUserReferenceListResult',
    'GetAddressGroupIpAddressBlockListResult',
    'GetAddressGroupsEntityResult',
    'GetAddressGroupsEntityAddressGroupResult',
    'GetAddressGroupsEntityAddressGroupIpAddressBlockListResult',
    'GetAddressGroupsEntityAssociatedPoliciesListResult',
    'GetAddressGroupsMetadataResult',
    'GetAssertHelperCheckResult',
    'GetClusterAuthorizedPublicKeyListResult',
    'GetClusterCaCertificateListResult',
    'GetClusterCategoryResult',
    'GetClusterHttpProxyListResult',
    'GetClusterHttpProxyWhitelistResult',
    'GetClusterManagementServerListResult',
    'GetClusterNodeResult',
    'GetClustersEntityResult',
    'GetClustersEntityAuthorizedPublicKeyListResult',
    'GetClustersEntityCaCertificateListResult',
    'GetClustersEntityCategoryResult',
    'GetClustersEntityHttpProxyListResult',
    'GetClustersEntityHttpProxyWhitelistResult',
    'GetClustersEntityManagementServerListResult',
    'GetClustersEntityNodeResult',
    'GetFloatingIpSpecResult',
    'GetFloatingIpSpecResourceResult',
    'GetFloatingIpStatusResult',
    'GetFloatingIpStatusExecutionContextResult',
    'GetFloatingIpStatusResourceResult',
    'GetFloatingIpsEntityResult',
    'GetFloatingIpsEntitySpecResult',
    'GetFloatingIpsEntitySpecResourceResult',
    'GetFloatingIpsEntityStatusResult',
    'GetFloatingIpsEntityStatusExecutionContextResult',
    'GetFloatingIpsEntityStatusResourceResult',
    'GetFloatingIpsMetadataResult',
    'GetFoundationCentralClusterDetailsClusterStatusResult',
    'GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult',
    'GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult',
    'GetFoundationCentralClusterDetailsCommonNetworkSettingsResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult',
    'GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult',
    'GetFoundationCentralImagedClustersListFiltersResult',
    'GetFoundationCentralImagedClustersListImagedClusterResult',
    'GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult',
    'GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult',
    'GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult',
    'GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult',
    'GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult',
    'GetFoundationCentralImagedClustersListMetadataResult',
    'GetFoundationCentralImagedNodesListFiltersResult',
    'GetFoundationCentralImagedNodesListImagedNodeResult',
    'GetFoundationCentralImagedNodesListMetadataResult',
    'GetFoundationCentralListApiKeysApiKeyResult',
    'GetFoundationCentralListApiKeysMetadataResult',
    'GetFoundationDiscoverNodesEntityResult',
    'GetFoundationDiscoverNodesEntityNodeResult',
    'GetFoundationHypervisorIsosEsxResult',
    'GetFoundationHypervisorIsosHypervResult',
    'GetFoundationHypervisorIsosKvmResult',
    'GetFoundationHypervisorIsosLinuxResult',
    'GetFoundationHypervisorIsosXenResult',
    'GetFoundationNodeNetworkDetailsNodeResult',
    'GetHostCategoryResult',
    'GetHostGpuListResult',
    'GetHostHostDisksReferenceListResult',
    'GetHostsEntityResult',
    'GetHostsEntityCategoryResult',
    'GetHostsEntityGpuListResult',
    'GetHostsEntityHostDisksReferenceListResult',
    'GetImageCategoryResult',
    'GetImageClusterReferenceResult',
    'GetImageCurrentClusterReferenceListResult',
    'GetKarbonClusterEtcdNodePoolResult',
    'GetKarbonClusterEtcdNodePoolAhvConfigResult',
    'GetKarbonClusterEtcdNodePoolNodeResult',
    'GetKarbonClusterMasterNodePoolResult',
    'GetKarbonClusterMasterNodePoolAhvConfigResult',
    'GetKarbonClusterMasterNodePoolNodeResult',
    'GetKarbonClusterWorkerNodePoolResult',
    'GetKarbonClusterWorkerNodePoolAhvConfigResult',
    'GetKarbonClusterWorkerNodePoolNodeResult',
    'GetKarbonClustersClusterResult',
    'GetKarbonClustersClusterEtcdNodePoolResult',
    'GetKarbonClustersClusterEtcdNodePoolAhvConfigResult',
    'GetKarbonClustersClusterEtcdNodePoolNodeResult',
    'GetKarbonClustersClusterMasterNodePoolResult',
    'GetKarbonClustersClusterMasterNodePoolAhvConfigResult',
    'GetKarbonClustersClusterMasterNodePoolNodeResult',
    'GetKarbonClustersClusterWorkerNodePoolResult',
    'GetKarbonClustersClusterWorkerNodePoolAhvConfigResult',
    'GetKarbonClustersClusterWorkerNodePoolNodeResult',
    'GetKarbonPrivateRegistriesPrivateRegistryResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAdRuleTargetGroupFilterParamResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleAppRuleTargetGroupFilterParamResult',
    'GetNetworkSecurityRuleCategoryResult',
    'GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParamResult',
    'GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParamResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult',
    'GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParamResult',
    'GetPbrSpecResult',
    'GetPbrSpecResourceResult',
    'GetPbrSpecResourceActionResult',
    'GetPbrSpecResourceDestinationResult',
    'GetPbrSpecResourceProtocolParameterResult',
    'GetPbrSpecResourceProtocolParameterIcmpResult',
    'GetPbrSpecResourceProtocolParameterTcpResult',
    'GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrSpecResourceProtocolParameterUdpResult',
    'GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrSpecResourceSourceResult',
    'GetPbrStatusResult',
    'GetPbrStatusExecutionContextResult',
    'GetPbrStatusResourceResult',
    'GetPbrStatusResourceActionResult',
    'GetPbrStatusResourceDestinationResult',
    'GetPbrStatusResourceProtocolParameterResult',
    'GetPbrStatusResourceProtocolParameterIcmpResult',
    'GetPbrStatusResourceProtocolParameterTcpResult',
    'GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrStatusResourceProtocolParameterUdpResult',
    'GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrStatusResourceRoutingPolicyCounterResult',
    'GetPbrStatusResourceSourceResult',
    'GetPbrsEntityResult',
    'GetPbrsEntitySpecResult',
    'GetPbrsEntitySpecResourceResult',
    'GetPbrsEntitySpecResourceActionResult',
    'GetPbrsEntitySpecResourceDestinationResult',
    'GetPbrsEntitySpecResourceProtocolParameterResult',
    'GetPbrsEntitySpecResourceProtocolParameterIcmpResult',
    'GetPbrsEntitySpecResourceProtocolParameterTcpResult',
    'GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrsEntitySpecResourceProtocolParameterUdpResult',
    'GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrsEntitySpecResourceSourceResult',
    'GetPbrsEntityStatusResult',
    'GetPbrsEntityStatusExecutionContextResult',
    'GetPbrsEntityStatusResourceResult',
    'GetPbrsEntityStatusResourceActionResult',
    'GetPbrsEntityStatusResourceDestinationResult',
    'GetPbrsEntityStatusResourceProtocolParameterResult',
    'GetPbrsEntityStatusResourceProtocolParameterIcmpResult',
    'GetPbrsEntityStatusResourceProtocolParameterTcpResult',
    'GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult',
    'GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult',
    'GetPbrsEntityStatusResourceProtocolParameterUdpResult',
    'GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult',
    'GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult',
    'GetPbrsEntityStatusResourceRoutingPolicyCounterResult',
    'GetPbrsEntityStatusResourceSourceResult',
    'GetPbrsMetadataResult',
    'GetPermissionCategoryResult',
    'GetPermissionFieldResult',
    'GetPermissionsEntityResult',
    'GetPermissionsEntityCategoryResult',
    'GetPermissionsEntityFieldResult',
    'GetPermissionsMetadataResult',
    'GetProjectAccountReferenceListResult',
    'GetProjectCategoryResult',
    'GetProjectEnvironmentReferenceListResult',
    'GetProjectExternalNetworkListResult',
    'GetProjectExternalUserGroupReferenceListResult',
    'GetProjectResourceDomainResult',
    'GetProjectResourceDomainResourceResult',
    'GetProjectSubnetReferenceListResult',
    'GetProjectUserReferenceListResult',
    'GetProjectsEntityResult',
    'GetProjectsEntityAccountReferenceListResult',
    'GetProjectsEntityCategoryResult',
    'GetProjectsEntityEnvironmentReferenceListResult',
    'GetProjectsEntityExternalNetworkListResult',
    'GetProjectsEntityExternalUserGroupReferenceListResult',
    'GetProjectsEntityResourceDomainResult',
    'GetProjectsEntityResourceDomainResourceResult',
    'GetProjectsEntitySubnetReferenceListResult',
    'GetProjectsEntityUserReferenceListResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult',
    'GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult',
    'GetProtectionRuleCategoryResult',
    'GetProtectionRuleCategoryFilterResult',
    'GetProtectionRuleCategoryFilterParamResult',
    'GetProtectionRuleOrderedAvailabilityZoneListResult',
    'GetProtectionRuleOwnerReferenceResult',
    'GetProtectionRuleProjectReferenceResult',
    'GetProtectionRulesEntityResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult',
    'GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult',
    'GetProtectionRulesEntityCategoryResult',
    'GetProtectionRulesEntityCategoryFilterResult',
    'GetProtectionRulesEntityCategoryFilterParamResult',
    'GetProtectionRulesEntityOrderedAvailabilityZoneListResult',
    'GetProtectionRulesEntityOwnerReferenceResult',
    'GetProtectionRulesEntityProjectReferenceResult',
    'GetRecoveryPlanCategoryResult',
    'GetRecoveryPlanOwnerReferenceResult',
    'GetRecoveryPlanParameterResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult',
    'GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult',
    'GetRecoveryPlanProjectReferenceResult',
    'GetRecoveryPlanStageListResult',
    'GetRecoveryPlanStageListStageWorkResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult',
    'GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult',
    'GetRecoveryPlansEntityResult',
    'GetRecoveryPlansEntityCategoryResult',
    'GetRecoveryPlansEntityOwnerReferenceResult',
    'GetRecoveryPlansEntityParameterResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult',
    'GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult',
    'GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult',
    'GetRecoveryPlansEntityProjectReferenceResult',
    'GetRecoveryPlansEntityStageListResult',
    'GetRecoveryPlansEntityStageListStageWorkResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult',
    'GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult',
    'GetRoleCategoryResult',
    'GetRolePermissionReferenceListResult',
    'GetRolesEntityResult',
    'GetRolesEntityCategoryResult',
    'GetRolesEntityPermissionReferenceListResult',
    'GetRolesMetadataResult',
    'GetServiceGroupServiceListResult',
    'GetServiceGroupServiceListIcmpTypeCodeListResult',
    'GetServiceGroupServiceListTcpPortRangeListResult',
    'GetServiceGroupServiceListUdpPortRangeListResult',
    'GetServiceGroupsEntityResult',
    'GetServiceGroupsEntityAssociatedPoliciesListResult',
    'GetServiceGroupsEntityServiceGroupResult',
    'GetServiceGroupsEntityServiceGroupServiceListResult',
    'GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult',
    'GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult',
    'GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult',
    'GetServiceGroupsMetadataResult',
    'GetStaticRoutesSpecResult',
    'GetStaticRoutesSpecResourceResult',
    'GetStaticRoutesSpecResourceDefaultRouteNexthopResult',
    'GetStaticRoutesSpecResourceStaticRoutesListResult',
    'GetStaticRoutesSpecResourceStaticRoutesListNexthopResult',
    'GetStaticRoutesStatusResult',
    'GetStaticRoutesStatusExecutionContextResult',
    'GetStaticRoutesStatusResourceResult',
    'GetStaticRoutesStatusResourceDefaultRouteResult',
    'GetStaticRoutesStatusResourceDefaultRouteNexthopResult',
    'GetStaticRoutesStatusResourceDynamicRoutesListResult',
    'GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult',
    'GetStaticRoutesStatusResourceLocalRoutesListResult',
    'GetStaticRoutesStatusResourceLocalRoutesListNexthopResult',
    'GetStaticRoutesStatusResourceStaticRoutesListResult',
    'GetStaticRoutesStatusResourceStaticRoutesListNexthopResult',
    'GetSubnetAdditionalFilterResult',
    'GetSubnetCategoryResult',
    'GetSubnetMessageListResult',
    'GetSubnetsEntityResult',
    'GetSubnetsEntityCategoryResult',
    'GetSubnetsEntityMessageListResult',
    'GetSubnetsMetadataResult',
    'GetUserAccessControlPolicyReferenceListResult',
    'GetUserCategoryResult',
    'GetUserDirectoryServiceUserResult',
    'GetUserDirectoryServiceUserDirectoryServiceReferenceResult',
    'GetUserGroupAccessControlPolicyReferenceListResult',
    'GetUserGroupCategoryResult',
    'GetUserGroupDirectoryServiceUserGroupResult',
    'GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult',
    'GetUserGroupProjectReferenceListResult',
    'GetUserGroupsEntityResult',
    'GetUserGroupsEntityAccessControlPolicyReferenceListResult',
    'GetUserGroupsEntityCategoryResult',
    'GetUserGroupsEntityDirectoryServiceUserGroupResult',
    'GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult',
    'GetUserGroupsEntityProjectReferenceListResult',
    'GetUserGroupsMetadataResult',
    'GetUserIdentityProviderUserResult',
    'GetUserIdentityProviderUserIdentityProviderReferenceResult',
    'GetUserProjectReferenceListResult',
    'GetUsersEntityResult',
    'GetUsersEntityAccessControlPolicyReferenceListResult',
    'GetUsersEntityCategoryResult',
    'GetUsersEntityDirectoryServiceUserResult',
    'GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult',
    'GetUsersEntityIdentityProviderUserResult',
    'GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult',
    'GetUsersEntityProjectReferenceListResult',
    'GetUsersMetadataResult',
    'GetVirtualMachineCategoryResult',
    'GetVirtualMachineDiskListResult',
    'GetVirtualMachineDiskListDevicePropertyResult',
    'GetVirtualMachineDiskListStorageConfigResult',
    'GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult',
    'GetVirtualMachineGpuListResult',
    'GetVirtualMachineMessageListResult',
    'GetVirtualMachineNicListResult',
    'GetVirtualMachineNicListIpEndpointListResult',
    'GetVirtualMachineSerialPortListResult',
    'GetVpcSpecResult',
    'GetVpcSpecResourceResult',
    'GetVpcSpecResourceCommonDomainNameServerIpListResult',
    'GetVpcSpecResourceExternalSubnetListResult',
    'GetVpcSpecResourceExternallyRoutablePrefixListResult',
    'GetVpcStatusResult',
    'GetVpcStatusExecutionContextResult',
    'GetVpcStatusResourceResult',
    'GetVpcStatusResourceCommonDomainNameServerIpListResult',
    'GetVpcStatusResourceExternalSubnetListResult',
    'GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult',
    'GetVpcStatusResourceExternallyRoutablePrefixListResult',
    'GetVpcsEntityResult',
    'GetVpcsEntitySpecResult',
    'GetVpcsEntitySpecResourceResult',
    'GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult',
    'GetVpcsEntitySpecResourceExternalSubnetListResult',
    'GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult',
    'GetVpcsEntityStatusResult',
    'GetVpcsEntityStatusExecutionContextResult',
    'GetVpcsEntityStatusResourceResult',
    'GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult',
    'GetVpcsEntityStatusResourceExternalSubnetListResult',
    'GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult',
    'GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult',
    'GetVpcsMetadataResult',
]

@pulumi.output_type
class AccessControlPolicyCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Optional) Name of the Access Control Policy.
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AccessControlPolicyContextFilterList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityFilterExpressionLists":
            suggest = "entity_filter_expression_lists"
        elif key == "scopeFilterExpressionLists":
            suggest = "scope_filter_expression_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionList'],
                 scope_filter_expression_lists: Optional[Sequence['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionList']] = None):
        """
        :param Sequence['AccessControlPolicyContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: A list of Entity filter expressions.
        :param Sequence['AccessControlPolicyContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - (Optional) Filter the scope of an Access Control Policy.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        if scope_filter_expression_lists is not None:
            pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionList']:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Optional[Sequence['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionList']]:
        """
        - (Optional) Filter the scope of an Access Control Policy.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class AccessControlPolicyContextFilterListEntityFilterExpressionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rightHandSide":
            suggest = "right_hand_side"
        elif key == "leftHandSideEntityType":
            suggest = "left_hand_side_entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListEntityFilterExpressionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 right_hand_side: 'outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide',
                 left_hand_side_entity_type: Optional[str] = None):
        """
        :param str operator: - (Required) The operator in the filter expression.
        :param 'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs' right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        :param str left_hand_side_entity_type: - (Optional)  The LHS of the filter expression - the entity type.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)
        if left_hand_side_entity_type is not None:
            pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> 'outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide':
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> Optional[str]:
        """
        - (Optional)  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")


@pulumi.output_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidLists":
            suggest = "uuid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories'] = None,
                 collection: Optional[str] = None,
                 uuid_lists: Optional[Sequence[str]] = None):
        """
        :param 'AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoriesArgs' categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional['outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[Sequence[str]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: - (Optional) Name of the Access Control Policy.
        :param Sequence[str] values: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AccessControlPolicyContextFilterListScopeFilterExpressionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "leftHandSide":
            suggest = "left_hand_side"
        elif key == "rightHandSide":
            suggest = "right_hand_side"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListScopeFilterExpressionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_side: 'outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide'):
        """
        :param str left_hand_side: - (Optional)  The LHS of the filter expression - the scope type.
        :param str operator: - (Required) The operator of the filter expression.
        :param 'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs' right_hand_side: - (Required) The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_side", right_hand_side)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        - (Optional)  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - (Required) The operator of the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSide")
    def right_hand_side(self) -> 'outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide':
        """
        - (Required) The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_side")


@pulumi.output_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidLists":
            suggest = "uuid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories'] = None,
                 collection: Optional[str] = None,
                 uuid_lists: Optional[Sequence[str]] = None):
        """
        :param 'AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoriesArgs' categories: - (Optional) The category values represented as a dictionary of key > list of values.
        :param str collection: - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - (Optional) The explicit list of UUIDs for the given kind.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if uuid_lists is not None:
            pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Optional['outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories']:
        """
        - (Optional) The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        - (Optional)  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Optional[Sequence[str]]:
        """
        - (Optional) The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: - (Optional) Name of the Access Control Policy.
        :param Sequence[str] values: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AccessControlPolicyOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class AccessControlPolicyRoleReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str uuid: - the UUID(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AccessControlPolicyUserGroupReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AccessControlPolicyUserReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the Access Control Policy.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the Access Control Policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AddressGroupIpAddressBlockList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressGroupIpAddressBlockList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressGroupIpAddressBlockList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressGroupIpAddressBlockList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: - (Required) IP of the address block
        :param int prefix_length: - (Required) Prefix length of address block in int
               
               See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/reference/prism_central/v3/api/address-groups/postaddressgroups).
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - (Required) IP of the address block
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        - (Required) Prefix length of address block in int

        See detailed information in [Nutanix Address Groups](https://www.nutanix.dev/reference/prism_central/v3/api/address-groups/postaddressgroups).
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class FoundationCentralImageClusterClusterStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatePercentComplete":
            suggest = "aggregate_percent_complete"
        elif key == "clusterCreationStarted":
            suggest = "cluster_creation_started"
        elif key == "clusterProgressDetails":
            suggest = "cluster_progress_details"
        elif key == "currentFoundationIp":
            suggest = "current_foundation_ip"
        elif key == "foundationSessionId":
            suggest = "foundation_session_id"
        elif key == "imagingStopped":
            suggest = "imaging_stopped"
        elif key == "intentPickedUp":
            suggest = "intent_picked_up"
        elif key == "nodeProgressDetails":
            suggest = "node_progress_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterClusterStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterClusterStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterClusterStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_percent_complete: Optional[float] = None,
                 cluster_creation_started: Optional[bool] = None,
                 cluster_progress_details: Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail']] = None,
                 current_foundation_ip: Optional[str] = None,
                 foundation_session_id: Optional[str] = None,
                 imaging_stopped: Optional[bool] = None,
                 intent_picked_up: Optional[bool] = None,
                 node_progress_details: Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail']] = None):
        if aggregate_percent_complete is not None:
            pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        if cluster_creation_started is not None:
            pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        if cluster_progress_details is not None:
            pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        if current_foundation_ip is not None:
            pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        if foundation_session_id is not None:
            pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        if imaging_stopped is not None:
            pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        if intent_picked_up is not None:
            pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        if node_progress_details is not None:
            pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "aggregate_percent_complete")

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_creation_started")

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail']]:
        return pulumi.get(self, "cluster_progress_details")

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> Optional[str]:
        return pulumi.get(self, "current_foundation_ip")

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> Optional[str]:
        return pulumi.get(self, "foundation_session_id")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> Optional[bool]:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> Optional[bool]:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail']]:
        return pulumi.get(self, "node_progress_details")


@pulumi.output_type
class FoundationCentralImageClusterClusterStatusClusterProgressDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "messageLists":
            suggest = "message_lists"
        elif key == "percentComplete":
            suggest = "percent_complete"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterClusterStatusClusterProgressDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterClusterStatusClusterProgressDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterClusterStatusClusterProgressDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[str] = None,
                 message_lists: Optional[Sequence[str]] = None,
                 percent_complete: Optional[float] = None,
                 status: Optional[str] = None):
        """
        :param str cluster_name: Name of the cluster.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if message_lists is not None:
            pulumi.set(__self__, "message_lists", message_lists)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class FoundationCentralImageClusterClusterStatusNodeProgressDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagedNodeUuid":
            suggest = "imaged_node_uuid"
        elif key == "imagingStopped":
            suggest = "imaging_stopped"
        elif key == "intentPickedUp":
            suggest = "intent_picked_up"
        elif key == "messageLists":
            suggest = "message_lists"
        elif key == "percentComplete":
            suggest = "percent_complete"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterClusterStatusNodeProgressDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterClusterStatusNodeProgressDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterClusterStatusNodeProgressDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 imaged_node_uuid: Optional[str] = None,
                 imaging_stopped: Optional[bool] = None,
                 intent_picked_up: Optional[bool] = None,
                 message_lists: Optional[Sequence[str]] = None,
                 percent_complete: Optional[float] = None,
                 status: Optional[str] = None):
        """
        :param str imaged_node_uuid: UUID of the node.
        """
        if imaged_node_uuid is not None:
            pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        if imaging_stopped is not None:
            pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        if intent_picked_up is not None:
            pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        if message_lists is not None:
            pulumi.set(__self__, "message_lists", message_lists)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> Optional[str]:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> Optional[bool]:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> Optional[bool]:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class FoundationCentralImageClusterCommonNetworkSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmDnsServers":
            suggest = "cvm_dns_servers"
        elif key == "cvmNtpServers":
            suggest = "cvm_ntp_servers"
        elif key == "hypervisorDnsServers":
            suggest = "hypervisor_dns_servers"
        elif key == "hypervisorNtpServers":
            suggest = "hypervisor_ntp_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterCommonNetworkSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterCommonNetworkSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterCommonNetworkSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_dns_servers: Optional[Sequence[str]] = None,
                 cvm_ntp_servers: Optional[Sequence[str]] = None,
                 hypervisor_dns_servers: Optional[Sequence[str]] = None,
                 hypervisor_ntp_servers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param Sequence[str] cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param Sequence[str] hypervisor_dns_servers: List of dns servers for the hypervisors in the cluster.
        :param Sequence[str] hypervisor_ntp_servers: List of ntp servers for the hypervisors in the cluster.
        """
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if hypervisor_dns_servers is not None:
            pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        if hypervisor_ntp_servers is not None:
            pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[Sequence[str]]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[Sequence[str]]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Optional[Sequence[str]]:
        """
        List of dns servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_dns_servers")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Optional[Sequence[str]]:
        """
        List of ntp servers for the hypervisors in the cluster.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmGateway":
            suggest = "cvm_gateway"
        elif key == "cvmNetmask":
            suggest = "cvm_netmask"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "hypervProductKey":
            suggest = "hyperv_product_key"
        elif key == "hypervSku":
            suggest = "hyperv_sku"
        elif key == "hypervisorGateway":
            suggest = "hypervisor_gateway"
        elif key == "hypervisorIsoUrl":
            suggest = "hypervisor_iso_url"
        elif key == "hypervisorIsos":
            suggest = "hypervisor_isos"
        elif key == "hypervisorNetmask":
            suggest = "hypervisor_netmask"
        elif key == "ipmiGateway":
            suggest = "ipmi_gateway"
        elif key == "ipmiNetmask":
            suggest = "ipmi_netmask"
        elif key == "nosPackageUrls":
            suggest = "nos_package_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocks: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlock']] = None,
                 clusters: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigCluster']] = None,
                 cvm_gateway: Optional[str] = None,
                 cvm_netmask: Optional[str] = None,
                 dns_servers: Optional[str] = None,
                 hyperv_product_key: Optional[str] = None,
                 hyperv_sku: Optional[str] = None,
                 hypervisor_gateway: Optional[str] = None,
                 hypervisor_iso_url: Optional[Mapping[str, str]] = None,
                 hypervisor_isos: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso']] = None,
                 hypervisor_netmask: Optional[str] = None,
                 ipmi_gateway: Optional[str] = None,
                 ipmi_netmask: Optional[str] = None,
                 nos_package_urls: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl']] = None):
        """
        :param str cvm_gateway: Gateway of the cvm.
        :param str cvm_netmask: Netmask of the cvm.
        :param str hyperv_product_key: Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        :param str hyperv_sku: SKU of hyperv to be installed if hypervisor_type is hyperv.
        :param str hypervisor_gateway: Gateway of the hypervisor.
        :param str hypervisor_netmask: Netmask of the hypervisor.
        :param str ipmi_gateway: Gateway of the ipmi.
        :param str ipmi_netmask: Netmask of the ipmi.
        """
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if cvm_gateway is not None:
            pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        if cvm_netmask is not None:
            pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if hyperv_product_key is not None:
            pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        if hyperv_sku is not None:
            pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        if hypervisor_gateway is not None:
            pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        if hypervisor_iso_url is not None:
            pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        if hypervisor_isos is not None:
            pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        if hypervisor_netmask is not None:
            pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if nos_package_urls is not None:
            pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlock']]:
        return pulumi.get(self, "blocks")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigCluster']]:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> Optional[str]:
        """
        Gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> Optional[str]:
        """
        Netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[str]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> Optional[str]:
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> Optional[str]:
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> Optional[str]:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "hypervisor_iso_url")

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso']]:
        return pulumi.get(self, "hypervisor_isos")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> Optional[str]:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[str]:
        """
        Gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[str]:
        """
        Netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl']]:
        return pulumi.get(self, "nos_package_urls")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockId":
            suggest = "block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_id: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlockNode']] = None):
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[str]:
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.FoundationCentralImageClusterFoundationInitConfigBlockNode']]:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigBlockNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmIp":
            suggest = "cvm_ip"
        elif key == "cvmVlanId":
            suggest = "cvm_vlan_id"
        elif key == "fcImagedNodeUuid":
            suggest = "fc_imaged_node_uuid"
        elif key == "hardwareAttributesOverride":
            suggest = "hardware_attributes_override"
        elif key == "hypervisorHostname":
            suggest = "hypervisor_hostname"
        elif key == "hypervisorIp":
            suggest = "hypervisor_ip"
        elif key == "imageNow":
            suggest = "image_now"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "nodePosition":
            suggest = "node_position"
        elif key == "nodeSerial":
            suggest = "node_serial"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigBlockNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlockNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigBlockNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_ip: Optional[str] = None,
                 cvm_vlan_id: Optional[int] = None,
                 fc_imaged_node_uuid: Optional[str] = None,
                 hardware_attributes_override: Optional[Mapping[str, str]] = None,
                 hypervisor: Optional[str] = None,
                 hypervisor_hostname: Optional[str] = None,
                 hypervisor_ip: Optional[str] = None,
                 image_now: Optional[bool] = None,
                 ipmi_ip: Optional[str] = None,
                 ipv6_address: Optional[str] = None,
                 node_position: Optional[str] = None,
                 node_serial: Optional[str] = None):
        """
        :param str cvm_ip: IP address to be set for the cvm on the node.
        :param int cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param Mapping[str, str] hardware_attributes_override: Hardware attributes override json for the node.
        :param str hypervisor_hostname: Name to be set for the hypervisor host.
        :param str hypervisor_ip: IP address to be set for the hypervisor on the node.
        :param bool image_now: True, if the node should be imaged, False, otherwise.
        :param str ipmi_ip: IP address to be set for the ipmi of the node.
        """
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_vlan_id is not None:
            pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        if fc_imaged_node_uuid is not None:
            pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        if hardware_attributes_override is not None:
            pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if hypervisor_hostname is not None:
            pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        if hypervisor_ip is not None:
            pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if node_position is not None:
            pulumi.set(__self__, "node_position", node_position)
        if node_serial is not None:
            pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[str]:
        """
        IP address to be set for the cvm on the node.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> Optional[int]:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> Optional[str]:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Optional[Mapping[str, str]]:
        """
        Hardware attributes override json for the node.
        """
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> Optional[str]:
        """
        Name to be set for the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> Optional[str]:
        """
        IP address to be set for the hypervisor on the node.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[bool]:
        """
        True, if the node should be imaged, False, otherwise.
        """
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[str]:
        """
        IP address to be set for the ipmi of the node.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> Optional[str]:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> Optional[str]:
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterExternalIp":
            suggest = "cluster_external_ip"
        elif key == "clusterInitNow":
            suggest = "cluster_init_now"
        elif key == "clusterInitSuccessful":
            suggest = "cluster_init_successful"
        elif key == "clusterMembers":
            suggest = "cluster_members"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "cvmDnsServers":
            suggest = "cvm_dns_servers"
        elif key == "cvmNtpServers":
            suggest = "cvm_ntp_servers"
        elif key == "redundancyFactor":
            suggest = "redundancy_factor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_external_ip: Optional[str] = None,
                 cluster_init_now: Optional[bool] = None,
                 cluster_init_successful: Optional[bool] = None,
                 cluster_members: Optional[Sequence[str]] = None,
                 cluster_name: Optional[str] = None,
                 cvm_dns_servers: Optional[str] = None,
                 cvm_ntp_servers: Optional[str] = None,
                 redundancy_factor: Optional[int] = None,
                 timezone: Optional[str] = None):
        """
        :param str cluster_external_ip: External management ip of the cluster.
        :param str cluster_name: Name of the cluster.
        :param str cvm_dns_servers: List of dns servers for the cvms in the cluster.
        :param str cvm_ntp_servers: List of ntp servers for the cvms in the cluster.
        :param int redundancy_factor: Redundancy factor of the cluster.
        :param str timezone: Timezone to be set on the cluster.
        """
        if cluster_external_ip is not None:
            pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        if cluster_init_now is not None:
            pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        if cluster_init_successful is not None:
            pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        if cluster_members is not None:
            pulumi.set(__self__, "cluster_members", cluster_members)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if redundancy_factor is not None:
            pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> Optional[str]:
        """
        External management ip of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[str]:
        """
        List of dns servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[str]:
        """
        List of ntp servers for the cvms in the cluster.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> Optional[int]:
        """
        Redundancy factor of the cluster.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Timezone to be set on the cluster.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigHypervisorIso(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervisorType":
            suggest = "hypervisor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterFoundationInitConfigHypervisorIso. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterFoundationInitConfigHypervisorIso.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterFoundationInitConfigHypervisorIso.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hypervisor_type: Optional[str] = None,
                 sha256sum: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str hypervisor_type: Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        :param str sha256sum: sha256sum of the hypervisor iso.
        :param str url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[str]:
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FoundationCentralImageClusterFoundationInitConfigNosPackageUrl(dict):
    def __init__(__self__, *,
                 sha256sum: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str sha256sum: sha256sum of the hypervisor iso.
        :param str url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FoundationCentralImageClusterHypervisorIsoDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervProductKey":
            suggest = "hyperv_product_key"
        elif key == "hypervSku":
            suggest = "hyperv_sku"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterHypervisorIsoDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterHypervisorIsoDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterHypervisorIsoDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hyperv_product_key: Optional[str] = None,
                 hyperv_sku: Optional[str] = None,
                 sha256sum: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str hyperv_product_key: Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        :param str hyperv_sku: SKU of hyperv to be installed if hypervisor_type is hyperv.
        :param str sha256sum: sha256sum of the hypervisor iso.
        :param str url: URL to download hypervisor iso. Required only if imaging is needed.
        """
        if hyperv_product_key is not None:
            pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        if hyperv_sku is not None:
            pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        if sha256sum is not None:
            pulumi.set(__self__, "sha256sum", sha256sum)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> Optional[str]:
        """
        Product key for hyperv isos. Required only if the hypervisor type is hyperv and product key is mandatory (ex: for volume license).
        """
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> Optional[str]:
        """
        SKU of hyperv to be installed if hypervisor_type is hyperv.
        """
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        """
        sha256sum of the hypervisor iso.
        """
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to download hypervisor iso. Required only if imaging is needed.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FoundationCentralImageClusterNodeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmGateway":
            suggest = "cvm_gateway"
        elif key == "cvmIp":
            suggest = "cvm_ip"
        elif key == "cvmNetmask":
            suggest = "cvm_netmask"
        elif key == "cvmRamGb":
            suggest = "cvm_ram_gb"
        elif key == "cvmVlanId":
            suggest = "cvm_vlan_id"
        elif key == "hardwareAttributesOverride":
            suggest = "hardware_attributes_override"
        elif key == "hypervisorGateway":
            suggest = "hypervisor_gateway"
        elif key == "hypervisorHostname":
            suggest = "hypervisor_hostname"
        elif key == "hypervisorIp":
            suggest = "hypervisor_ip"
        elif key == "hypervisorNetmask":
            suggest = "hypervisor_netmask"
        elif key == "hypervisorType":
            suggest = "hypervisor_type"
        elif key == "imageNow":
            suggest = "image_now"
        elif key == "imagedNodeUuid":
            suggest = "imaged_node_uuid"
        elif key == "ipmiGateway":
            suggest = "ipmi_gateway"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipmiNetmask":
            suggest = "ipmi_netmask"
        elif key == "rdmaPassthrough":
            suggest = "rdma_passthrough"
        elif key == "useExistingNetworkSettings":
            suggest = "use_existing_network_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationCentralImageClusterNodeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationCentralImageClusterNodeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationCentralImageClusterNodeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_gateway: Optional[str] = None,
                 cvm_ip: Optional[str] = None,
                 cvm_netmask: Optional[str] = None,
                 cvm_ram_gb: Optional[int] = None,
                 cvm_vlan_id: Optional[int] = None,
                 hardware_attributes_override: Optional[Mapping[str, Any]] = None,
                 hypervisor_gateway: Optional[str] = None,
                 hypervisor_hostname: Optional[str] = None,
                 hypervisor_ip: Optional[str] = None,
                 hypervisor_netmask: Optional[str] = None,
                 hypervisor_type: Optional[str] = None,
                 image_now: Optional[bool] = None,
                 imaged_node_uuid: Optional[str] = None,
                 ipmi_gateway: Optional[str] = None,
                 ipmi_ip: Optional[str] = None,
                 ipmi_netmask: Optional[str] = None,
                 rdma_passthrough: Optional[bool] = None,
                 use_existing_network_settings: Optional[bool] = None):
        """
        :param str cvm_gateway: Gateway of the cvm.
        :param str cvm_ip: IP address to be set for the cvm on the node.
        :param str cvm_netmask: Netmask of the cvm.
        :param int cvm_ram_gb: Amount of memory to be assigned for the cvm.
        :param int cvm_vlan_id: Vlan tag of the cvm, if the cvm is on a vlan.
        :param Mapping[str, Any] hardware_attributes_override: Hardware attributes override json for the node.
        :param str hypervisor_gateway: Gateway of the hypervisor.
        :param str hypervisor_hostname: Name to be set for the hypervisor host.
        :param str hypervisor_ip: IP address to be set for the hypervisor on the node.
        :param str hypervisor_netmask: Netmask of the hypervisor.
        :param str hypervisor_type: Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        :param bool image_now: True, if the node should be imaged, False, otherwise.
        :param str imaged_node_uuid: UUID of the node.
        :param str ipmi_gateway: Gateway of the ipmi.
        :param str ipmi_ip: IP address to be set for the ipmi of the node.
        :param str ipmi_netmask: Netmask of the ipmi.
        :param bool rdma_passthrough: Passthrough RDMA nic to CVM if possible, default to false.
        :param bool use_existing_network_settings: Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
        if cvm_gateway is not None:
            pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_netmask is not None:
            pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        if cvm_ram_gb is not None:
            pulumi.set(__self__, "cvm_ram_gb", cvm_ram_gb)
        if cvm_vlan_id is not None:
            pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        if hardware_attributes_override is not None:
            pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        if hypervisor_gateway is not None:
            pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        if hypervisor_hostname is not None:
            pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        if hypervisor_ip is not None:
            pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        if hypervisor_netmask is not None:
            pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if imaged_node_uuid is not None:
            pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if rdma_passthrough is not None:
            pulumi.set(__self__, "rdma_passthrough", rdma_passthrough)
        if use_existing_network_settings is not None:
            pulumi.set(__self__, "use_existing_network_settings", use_existing_network_settings)

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> Optional[str]:
        """
        Gateway of the cvm.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[str]:
        """
        IP address to be set for the cvm on the node.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> Optional[str]:
        """
        Netmask of the cvm.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="cvmRamGb")
    def cvm_ram_gb(self) -> Optional[int]:
        """
        Amount of memory to be assigned for the cvm.
        """
        return pulumi.get(self, "cvm_ram_gb")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> Optional[int]:
        """
        Vlan tag of the cvm, if the cvm is on a vlan.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Optional[Mapping[str, Any]]:
        """
        Hardware attributes override json for the node.
        """
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> Optional[str]:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> Optional[str]:
        """
        Name to be set for the hypervisor host.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> Optional[str]:
        """
        IP address to be set for the hypervisor on the node.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> Optional[str]:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[str]:
        """
        Type of hypervisor to be installed. Must be one of {kvm, esx, hyperv}.
        """
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[bool]:
        """
        True, if the node should be imaged, False, otherwise.
        """
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> Optional[str]:
        """
        UUID of the node.
        """
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[str]:
        """
        Gateway of the ipmi.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[str]:
        """
        IP address to be set for the ipmi of the node.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[str]:
        """
        Netmask of the ipmi.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="rdmaPassthrough")
    def rdma_passthrough(self) -> Optional[bool]:
        """
        Passthrough RDMA nic to CVM if possible, default to false.
        """
        return pulumi.get(self, "rdma_passthrough")

    @property
    @pulumi.getter(name="useExistingNetworkSettings")
    def use_existing_network_settings(self) -> Optional[bool]:
        """
        Decides whether to use the existing network settings for the node. If True, the existing network settings of the node will be used during cluster creation. If False, then client must provide new network settings. If all nodes are booted in phoenix, this field is, by default, considered to be False.
        """
        return pulumi.get(self, "use_existing_network_settings")


@pulumi.output_type
class FoundationImageNodesBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockId":
            suggest = "block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nodes: Sequence['outputs.FoundationImageNodesBlockNode'],
                 block_id: Optional[str] = None):
        """
        :param str block_id: - Block ID.
        """
        pulumi.set(__self__, "nodes", nodes)
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.FoundationImageNodesBlockNode']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[str]:
        """
        - Block ID.
        """
        return pulumi.get(self, "block_id")


@pulumi.output_type
class FoundationImageNodesBlockNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervisorHostname":
            suggest = "hypervisor_hostname"
        elif key == "hypervisorIp":
            suggest = "hypervisor_ip"
        elif key == "nodePosition":
            suggest = "node_position"
        elif key == "bondLacpRate":
            suggest = "bond_lacp_rate"
        elif key == "bondMode":
            suggest = "bond_mode"
        elif key == "bondUplinks":
            suggest = "bond_uplinks"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "currentCvmVlanTag":
            suggest = "current_cvm_vlan_tag"
        elif key == "currentNetworkInterface":
            suggest = "current_network_interface"
        elif key == "cvmGbRam":
            suggest = "cvm_gb_ram"
        elif key == "cvmIp":
            suggest = "cvm_ip"
        elif key == "cvmNumVcpus":
            suggest = "cvm_num_vcpus"
        elif key == "deviceHint":
            suggest = "device_hint"
        elif key == "exludeBootSerial":
            suggest = "exlude_boot_serial"
        elif key == "imageDelay":
            suggest = "image_delay"
        elif key == "imageNow":
            suggest = "image_now"
        elif key == "imageSuccessful":
            suggest = "image_successful"
        elif key == "ipmiConfigureNow":
            suggest = "ipmi_configure_now"
        elif key == "ipmiGateway":
            suggest = "ipmi_gateway"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipmiMac":
            suggest = "ipmi_mac"
        elif key == "ipmiNetmask":
            suggest = "ipmi_netmask"
        elif key == "ipmiPassword":
            suggest = "ipmi_password"
        elif key == "ipmiUser":
            suggest = "ipmi_user"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6Interface":
            suggest = "ipv6_interface"
        elif key == "mitigateLowBootSpace":
            suggest = "mitigate_low_boot_space"
        elif key == "nodeSerial":
            suggest = "node_serial"
        elif key == "rdmaMacAddr":
            suggest = "rdma_mac_addr"
        elif key == "rdmaPassthrough":
            suggest = "rdma_passthrough"
        elif key == "ucsmManagedMode":
            suggest = "ucsm_managed_mode"
        elif key == "ucsmNodeSerial":
            suggest = "ucsm_node_serial"
        elif key == "ucsmParams":
            suggest = "ucsm_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlockNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlockNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlockNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 node_position: str,
                 bond_lacp_rate: Optional[str] = None,
                 bond_mode: Optional[str] = None,
                 bond_uplinks: Optional[str] = None,
                 cluster_id: Optional[str] = None,
                 current_cvm_vlan_tag: Optional[int] = None,
                 current_network_interface: Optional[str] = None,
                 cvm_gb_ram: Optional[int] = None,
                 cvm_ip: Optional[str] = None,
                 cvm_num_vcpus: Optional[int] = None,
                 device_hint: Optional[str] = None,
                 exlude_boot_serial: Optional[str] = None,
                 hypervisor: Optional[str] = None,
                 image_delay: Optional[int] = None,
                 image_now: Optional[bool] = None,
                 image_successful: Optional[bool] = None,
                 ipmi_configure_now: Optional[bool] = None,
                 ipmi_gateway: Optional[str] = None,
                 ipmi_ip: Optional[str] = None,
                 ipmi_mac: Optional[str] = None,
                 ipmi_netmask: Optional[str] = None,
                 ipmi_password: Optional[str] = None,
                 ipmi_user: Optional[str] = None,
                 ipv6_address: Optional[str] = None,
                 ipv6_interface: Optional[str] = None,
                 mitigate_low_boot_space: Optional[bool] = None,
                 node_serial: Optional[str] = None,
                 rdma_mac_addr: Optional[str] = None,
                 rdma_passthrough: Optional[bool] = None,
                 ucsm_managed_mode: Optional[str] = None,
                 ucsm_node_serial: Optional[str] = None,
                 ucsm_params: Optional['outputs.FoundationImageNodesBlockNodeUcsmParams'] = None,
                 vswitches: Optional[Sequence['outputs.FoundationImageNodesBlockNodeVswitch']] = None):
        """
        :param str hypervisor_hostname: - (Required) Hypervisor Hostname.
        :param str hypervisor_ip: - (Required) Hypervisor IP address.
        :param str node_position: - (Required) Position of the node in the block.
        :param str bond_lacp_rate: - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        :param str bond_mode: - (Required if node is capable) dynamic if using LACP, static for LAG
        :param str bond_uplinks: - MAC Addresses of NICs in a team/bond
        :param str cluster_id: - ID of cluster.
        :param int current_cvm_vlan_tag: - Current CVM vlan tag. 0 Value with remove vlan tag.
        :param str current_network_interface: - CVM current network interface.
        :param int cvm_gb_ram: - RAM capacity of CVM in GB.
        :param int cvm_num_vcpus: - Number of CVM vcpus.
        :param str device_hint: - use "vm_installer" to enable CVM imaging from standalone.
        :param str exlude_boot_serial: - serial of boot device to be excluded (used by NX G6 platforms)
        :param int image_delay: - Imaging delay.
        :param bool image_now: - (Optional, Default = true) If the node should be imaged now.
        :param bool ipmi_configure_now: - Whether IPMI should be configured.
        :param str ipmi_gateway: - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        :param str ipmi_ip: - (Required) IPMI IP address.
        :param str ipmi_mac: - IPMI MAC address.
        :param str ipmi_netmask: - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        :param str ipmi_password: - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        :param str ipmi_user: - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        :param str ipv6_address: - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        :param str ipv6_interface: - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        :param bool mitigate_low_boot_space: - relocate bootbank files to make space for phoenix files.
        :param str node_serial: - serial number of the node.
        :param str rdma_mac_addr: - mac address of nic to be used for rdma
        :param bool rdma_passthrough: - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        :param str ucsm_managed_mode: - UCSM Managed mode.
        :param str ucsm_node_serial: - UCSM node serial.
        :param 'FoundationImageNodesBlockNodeUcsmParamsArgs' ucsm_params: - Object of UCSM parameters.
               * `ucsm_params.native_vlan` :- If the vlan is native.
               * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
               * `ucsm_params.mac_pool` :- Mac address pool.
               * `ucsm_params.vlan_name` :- Name of vlan.
        """
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "node_position", node_position)
        if bond_lacp_rate is not None:
            pulumi.set(__self__, "bond_lacp_rate", bond_lacp_rate)
        if bond_mode is not None:
            pulumi.set(__self__, "bond_mode", bond_mode)
        if bond_uplinks is not None:
            pulumi.set(__self__, "bond_uplinks", bond_uplinks)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if current_cvm_vlan_tag is not None:
            pulumi.set(__self__, "current_cvm_vlan_tag", current_cvm_vlan_tag)
        if current_network_interface is not None:
            pulumi.set(__self__, "current_network_interface", current_network_interface)
        if cvm_gb_ram is not None:
            pulumi.set(__self__, "cvm_gb_ram", cvm_gb_ram)
        if cvm_ip is not None:
            pulumi.set(__self__, "cvm_ip", cvm_ip)
        if cvm_num_vcpus is not None:
            pulumi.set(__self__, "cvm_num_vcpus", cvm_num_vcpus)
        if device_hint is not None:
            pulumi.set(__self__, "device_hint", device_hint)
        if exlude_boot_serial is not None:
            pulumi.set(__self__, "exlude_boot_serial", exlude_boot_serial)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if image_delay is not None:
            pulumi.set(__self__, "image_delay", image_delay)
        if image_now is not None:
            pulumi.set(__self__, "image_now", image_now)
        if image_successful is not None:
            pulumi.set(__self__, "image_successful", image_successful)
        if ipmi_configure_now is not None:
            pulumi.set(__self__, "ipmi_configure_now", ipmi_configure_now)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_ip is not None:
            pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        if ipmi_mac is not None:
            pulumi.set(__self__, "ipmi_mac", ipmi_mac)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if ipmi_password is not None:
            pulumi.set(__self__, "ipmi_password", ipmi_password)
        if ipmi_user is not None:
            pulumi.set(__self__, "ipmi_user", ipmi_user)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_interface is not None:
            pulumi.set(__self__, "ipv6_interface", ipv6_interface)
        if mitigate_low_boot_space is not None:
            pulumi.set(__self__, "mitigate_low_boot_space", mitigate_low_boot_space)
        if node_serial is not None:
            pulumi.set(__self__, "node_serial", node_serial)
        if rdma_mac_addr is not None:
            pulumi.set(__self__, "rdma_mac_addr", rdma_mac_addr)
        if rdma_passthrough is not None:
            pulumi.set(__self__, "rdma_passthrough", rdma_passthrough)
        if ucsm_managed_mode is not None:
            pulumi.set(__self__, "ucsm_managed_mode", ucsm_managed_mode)
        if ucsm_node_serial is not None:
            pulumi.set(__self__, "ucsm_node_serial", ucsm_node_serial)
        if ucsm_params is not None:
            pulumi.set(__self__, "ucsm_params", ucsm_params)
        if vswitches is not None:
            pulumi.set(__self__, "vswitches", vswitches)

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        """
        - (Required) Hypervisor Hostname.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        """
        - (Required) Hypervisor IP address.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        """
        - (Required) Position of the node in the block.
        """
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="bondLacpRate")
    def bond_lacp_rate(self) -> Optional[str]:
        """
        - (Required if node is lacp configured) slow or fast if lacp if being used at the switch
        """
        return pulumi.get(self, "bond_lacp_rate")

    @property
    @pulumi.getter(name="bondMode")
    def bond_mode(self) -> Optional[str]:
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        return pulumi.get(self, "bond_mode")

    @property
    @pulumi.getter(name="bondUplinks")
    def bond_uplinks(self) -> Optional[str]:
        """
        - MAC Addresses of NICs in a team/bond
        """
        return pulumi.get(self, "bond_uplinks")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        - ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="currentCvmVlanTag")
    def current_cvm_vlan_tag(self) -> Optional[int]:
        """
        - Current CVM vlan tag. 0 Value with remove vlan tag.
        """
        return pulumi.get(self, "current_cvm_vlan_tag")

    @property
    @pulumi.getter(name="currentNetworkInterface")
    def current_network_interface(self) -> Optional[str]:
        """
        - CVM current network interface.
        """
        return pulumi.get(self, "current_network_interface")

    @property
    @pulumi.getter(name="cvmGbRam")
    def cvm_gb_ram(self) -> Optional[int]:
        """
        - RAM capacity of CVM in GB.
        """
        return pulumi.get(self, "cvm_gb_ram")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> Optional[str]:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmNumVcpus")
    def cvm_num_vcpus(self) -> Optional[int]:
        """
        - Number of CVM vcpus.
        """
        return pulumi.get(self, "cvm_num_vcpus")

    @property
    @pulumi.getter(name="deviceHint")
    def device_hint(self) -> Optional[str]:
        """
        - use "vm_installer" to enable CVM imaging from standalone.
        """
        return pulumi.get(self, "device_hint")

    @property
    @pulumi.getter(name="exludeBootSerial")
    def exlude_boot_serial(self) -> Optional[str]:
        """
        - serial of boot device to be excluded (used by NX G6 platforms)
        """
        return pulumi.get(self, "exlude_boot_serial")

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="imageDelay")
    def image_delay(self) -> Optional[int]:
        """
        - Imaging delay.
        """
        return pulumi.get(self, "image_delay")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> Optional[bool]:
        """
        - (Optional, Default = true) If the node should be imaged now.
        """
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="imageSuccessful")
    def image_successful(self) -> Optional[bool]:
        return pulumi.get(self, "image_successful")

    @property
    @pulumi.getter(name="ipmiConfigureNow")
    def ipmi_configure_now(self) -> Optional[bool]:
        """
        - Whether IPMI should be configured.
        """
        return pulumi.get(self, "ipmi_configure_now")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI gateway for this node
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> Optional[str]:
        """
        - (Required) IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiMac")
    def ipmi_mac(self) -> Optional[str]:
        """
        - IPMI MAC address.
        """
        return pulumi.get(self, "ipmi_mac")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI netmask for this node
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="ipmiPassword")
    def ipmi_password(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI username
        """
        return pulumi.get(self, "ipmi_password")

    @property
    @pulumi.getter(name="ipmiUser")
    def ipmi_user(self) -> Optional[str]:
        """
        - (Required incase using IPMI based imaging either here or outside blocks) IPMI password
        """
        return pulumi.get(self, "ipmi_user")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) IPV6 address.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6Interface")
    def ipv6_interface(self) -> Optional[str]:
        """
        - (Required when device_hint = "vm_installer" for imaging using node's existing cvm for imaging) ipv6 interface.
        """
        return pulumi.get(self, "ipv6_interface")

    @property
    @pulumi.getter(name="mitigateLowBootSpace")
    def mitigate_low_boot_space(self) -> Optional[bool]:
        """
        - relocate bootbank files to make space for phoenix files.
        """
        return pulumi.get(self, "mitigate_low_boot_space")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> Optional[str]:
        """
        - serial number of the node.
        """
        return pulumi.get(self, "node_serial")

    @property
    @pulumi.getter(name="rdmaMacAddr")
    def rdma_mac_addr(self) -> Optional[str]:
        """
        - mac address of nic to be used for rdma
        """
        return pulumi.get(self, "rdma_mac_addr")

    @property
    @pulumi.getter(name="rdmaPassthrough")
    def rdma_passthrough(self) -> Optional[bool]:
        """
        - (Required if node is capable) passthru RDMA nic to CVM if possible, default to false
        """
        return pulumi.get(self, "rdma_passthrough")

    @property
    @pulumi.getter(name="ucsmManagedMode")
    def ucsm_managed_mode(self) -> Optional[str]:
        """
        - UCSM Managed mode.
        """
        return pulumi.get(self, "ucsm_managed_mode")

    @property
    @pulumi.getter(name="ucsmNodeSerial")
    def ucsm_node_serial(self) -> Optional[str]:
        """
        - UCSM node serial.
        """
        return pulumi.get(self, "ucsm_node_serial")

    @property
    @pulumi.getter(name="ucsmParams")
    def ucsm_params(self) -> Optional['outputs.FoundationImageNodesBlockNodeUcsmParams']:
        """
        - Object of UCSM parameters.
        * `ucsm_params.native_vlan` :- If the vlan is native.
        * `ucsm_params.keep_ucsm_settings` :- Whether UCSM settings should be kept.
        * `ucsm_params.mac_pool` :- Mac address pool.
        * `ucsm_params.vlan_name` :- Name of vlan.
        """
        return pulumi.get(self, "ucsm_params")

    @property
    @pulumi.getter
    def vswitches(self) -> Optional[Sequence['outputs.FoundationImageNodesBlockNodeVswitch']]:
        return pulumi.get(self, "vswitches")


@pulumi.output_type
class FoundationImageNodesBlockNodeUcsmParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepUcsmSettings":
            suggest = "keep_ucsm_settings"
        elif key == "macPool":
            suggest = "mac_pool"
        elif key == "nativeVlan":
            suggest = "native_vlan"
        elif key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlockNodeUcsmParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlockNodeUcsmParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlockNodeUcsmParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_ucsm_settings: Optional[bool] = None,
                 mac_pool: Optional[str] = None,
                 native_vlan: Optional[bool] = None,
                 vlan_name: Optional[str] = None):
        if keep_ucsm_settings is not None:
            pulumi.set(__self__, "keep_ucsm_settings", keep_ucsm_settings)
        if mac_pool is not None:
            pulumi.set(__self__, "mac_pool", mac_pool)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="keepUcsmSettings")
    def keep_ucsm_settings(self) -> Optional[bool]:
        return pulumi.get(self, "keep_ucsm_settings")

    @property
    @pulumi.getter(name="macPool")
    def mac_pool(self) -> Optional[str]:
        return pulumi.get(self, "mac_pool")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[bool]:
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class FoundationImageNodesBlockNodeVswitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bondMode":
            suggest = "bond_mode"
        elif key == "otherConfigs":
            suggest = "other_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesBlockNodeVswitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesBlockNodeVswitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesBlockNodeVswitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bond_mode: Optional[str] = None,
                 lacp: Optional[str] = None,
                 mtu: Optional[int] = None,
                 name: Optional[str] = None,
                 other_configs: Optional[Sequence[str]] = None,
                 uplinks: Optional[Sequence[str]] = None):
        """
        :param str bond_mode: - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        if bond_mode is not None:
            pulumi.set(__self__, "bond_mode", bond_mode)
        if lacp is not None:
            pulumi.set(__self__, "lacp", lacp)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if other_configs is not None:
            pulumi.set(__self__, "other_configs", other_configs)
        if uplinks is not None:
            pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter(name="bondMode")
    def bond_mode(self) -> Optional[str]:
        """
        - (Required if node is capable) dynamic if using LACP, static for LAG
        """
        return pulumi.get(self, "bond_mode")

    @property
    @pulumi.getter
    def lacp(self) -> Optional[str]:
        return pulumi.get(self, "lacp")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="otherConfigs")
    def other_configs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "other_configs")

    @property
    @pulumi.getter
    def uplinks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "uplinks")


@pulumi.output_type
class FoundationImageNodesCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterMembers":
            suggest = "cluster_members"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "redundancyFactor":
            suggest = "redundancy_factor"
        elif key == "backplaneNetmask":
            suggest = "backplane_netmask"
        elif key == "backplaneSubnet":
            suggest = "backplane_subnet"
        elif key == "backplaneVlan":
            suggest = "backplane_vlan"
        elif key == "clusterExternalIp":
            suggest = "cluster_external_ip"
        elif key == "clusterInitNow":
            suggest = "cluster_init_now"
        elif key == "clusterInitSuccessful":
            suggest = "cluster_init_successful"
        elif key == "cvmDnsServers":
            suggest = "cvm_dns_servers"
        elif key == "cvmNtpServers":
            suggest = "cvm_ntp_servers"
        elif key == "enableNs":
            suggest = "enable_ns"
        elif key == "hypervisorNtpServers":
            suggest = "hypervisor_ntp_servers"
        elif key == "singleNodeCluster":
            suggest = "single_node_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_members: Sequence[str],
                 cluster_name: str,
                 redundancy_factor: int,
                 backplane_netmask: Optional[str] = None,
                 backplane_subnet: Optional[str] = None,
                 backplane_vlan: Optional[str] = None,
                 cluster_external_ip: Optional[str] = None,
                 cluster_init_now: Optional[bool] = None,
                 cluster_init_successful: Optional[bool] = None,
                 cvm_dns_servers: Optional[str] = None,
                 cvm_ntp_servers: Optional[str] = None,
                 enable_ns: Optional[bool] = None,
                 hypervisor_ntp_servers: Optional[str] = None,
                 single_node_cluster: Optional[bool] = None):
        """
        :param Sequence[str] cluster_members: - (Required) Members in the cluster.
        :param str cluster_name: - (Required) Name of the cluster.
        :param int redundancy_factor: - (Required) Cluster Redundancy Factor.
        :param str backplane_netmask: - Backplane netmask.
        :param str backplane_subnet: - Backplane subnet address.
        :param str backplane_vlan: - Backplane vlan.
        :param str cluster_external_ip: - External IP of the cluster.
        :param bool cluster_init_now: - (Optional, Default = true) If cluster should be created.
        :param bool cluster_init_successful: - If cluster initialization was successful.
        :param str cvm_dns_servers: - DNS servers of CVM.
        :param str cvm_ntp_servers: - NTP servers of CVM.
        :param bool enable_ns: - If network segmentation should be enabled.
        :param str hypervisor_ntp_servers: - NTP servers of hypervisor.
        :param bool single_node_cluster: - If it is a single node cluster.
        """
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if backplane_netmask is not None:
            pulumi.set(__self__, "backplane_netmask", backplane_netmask)
        if backplane_subnet is not None:
            pulumi.set(__self__, "backplane_subnet", backplane_subnet)
        if backplane_vlan is not None:
            pulumi.set(__self__, "backplane_vlan", backplane_vlan)
        if cluster_external_ip is not None:
            pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        if cluster_init_now is not None:
            pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        if cluster_init_successful is not None:
            pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        if cvm_dns_servers is not None:
            pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        if cvm_ntp_servers is not None:
            pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        if enable_ns is not None:
            pulumi.set(__self__, "enable_ns", enable_ns)
        if hypervisor_ntp_servers is not None:
            pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)
        if single_node_cluster is not None:
            pulumi.set(__self__, "single_node_cluster", single_node_cluster)

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Sequence[str]:
        """
        - (Required) Members in the cluster.
        """
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        - (Required) Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        """
        - (Required) Cluster Redundancy Factor.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter(name="backplaneNetmask")
    def backplane_netmask(self) -> Optional[str]:
        """
        - Backplane netmask.
        """
        return pulumi.get(self, "backplane_netmask")

    @property
    @pulumi.getter(name="backplaneSubnet")
    def backplane_subnet(self) -> Optional[str]:
        """
        - Backplane subnet address.
        """
        return pulumi.get(self, "backplane_subnet")

    @property
    @pulumi.getter(name="backplaneVlan")
    def backplane_vlan(self) -> Optional[str]:
        """
        - Backplane vlan.
        """
        return pulumi.get(self, "backplane_vlan")

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> Optional[str]:
        """
        - External IP of the cluster.
        """
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> Optional[bool]:
        """
        - (Optional, Default = true) If cluster should be created.
        """
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> Optional[bool]:
        """
        - If cluster initialization was successful.
        """
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Optional[str]:
        """
        - DNS servers of CVM.
        """
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Optional[str]:
        """
        - NTP servers of CVM.
        """
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="enableNs")
    def enable_ns(self) -> Optional[bool]:
        """
        - If network segmentation should be enabled.
        """
        return pulumi.get(self, "enable_ns")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Optional[str]:
        """
        - NTP servers of hypervisor.
        """
        return pulumi.get(self, "hypervisor_ntp_servers")

    @property
    @pulumi.getter(name="singleNodeCluster")
    def single_node_cluster(self) -> Optional[bool]:
        """
        - If it is a single node cluster.
        """
        return pulumi.get(self, "single_node_cluster")


@pulumi.output_type
class FoundationImageNodesClusterUrl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterUrl":
            suggest = "cluster_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesClusterUrl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesClusterUrl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesClusterUrl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[str] = None,
                 cluster_url: Optional[str] = None):
        """
        :param str cluster_name: - (Required) Name of the cluster.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        - (Required) Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")


@pulumi.output_type
class FoundationImageNodesEosMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNames":
            suggest = "account_names"
        elif key == "configId":
            suggest = "config_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesEosMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesEosMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesEosMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_names: Optional[Sequence[str]] = None,
                 config_id: Optional[str] = None,
                 email: Optional[str] = None):
        """
        :param Sequence[str] account_names: - arrya of account names
        :param str config_id: - Id of the Eos config uploaded in foundation GUI.
        :param str email: - Email address of the user who downloaded Eos config.
        """
        if account_names is not None:
            pulumi.set(__self__, "account_names", account_names)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="accountNames")
    def account_names(self) -> Optional[Sequence[str]]:
        """
        - arrya of account names
        """
        return pulumi.get(self, "account_names")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[str]:
        """
        - Id of the Eos config uploaded in foundation GUI.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        - Email address of the user who downloaded Eos config.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class FoundationImageNodesFcSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fcMetadata":
            suggest = "fc_metadata"
        elif key == "foundationCentral":
            suggest = "foundation_central"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesFcSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesFcSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesFcSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fc_metadata: 'outputs.FoundationImageNodesFcSettingsFcMetadata',
                 foundation_central: bool):
        """
        :param 'FoundationImageNodesFcSettingsFcMetadataArgs' fc_metadata: - Foundation Central metadata which will be transferred to the newly imaged node.
               * `fc_metadata.fc_ip` :- IP address of foundation central.
               * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        :param bool foundation_central: - If this attribute is set to True, FC workflow will be invoked.
        """
        pulumi.set(__self__, "fc_metadata", fc_metadata)
        pulumi.set(__self__, "foundation_central", foundation_central)

    @property
    @pulumi.getter(name="fcMetadata")
    def fc_metadata(self) -> 'outputs.FoundationImageNodesFcSettingsFcMetadata':
        """
        - Foundation Central metadata which will be transferred to the newly imaged node.
        * `fc_metadata.fc_ip` :- IP address of foundation central.
        * `fc_metadata.api_key` :- api_key which the node uses to register itself with foundation central.
        """
        return pulumi.get(self, "fc_metadata")

    @property
    @pulumi.getter(name="foundationCentral")
    def foundation_central(self) -> bool:
        """
        - If this attribute is set to True, FC workflow will be invoked.
        """
        return pulumi.get(self, "foundation_central")


@pulumi.output_type
class FoundationImageNodesFcSettingsFcMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "fcIp":
            suggest = "fc_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesFcSettingsFcMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesFcSettingsFcMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesFcSettingsFcMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 fc_ip: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "fc_ip", fc_ip)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="fcIp")
    def fc_ip(self) -> str:
        return pulumi.get(self, "fc_ip")


@pulumi.output_type
class FoundationImageNodesHypervisorIso(dict):
    def __init__(__self__, *,
                 esx: Optional['outputs.FoundationImageNodesHypervisorIsoEsx'] = None,
                 hyperv: Optional['outputs.FoundationImageNodesHypervisorIsoHyperv'] = None,
                 kvm: Optional['outputs.FoundationImageNodesHypervisorIsoKvm'] = None,
                 xen: Optional['outputs.FoundationImageNodesHypervisorIsoXen'] = None):
        """
        :param 'FoundationImageNodesHypervisorIsoEsxArgs' esx: - Details of hypervisor ISO of type esx.
        :param 'FoundationImageNodesHypervisorIsoHypervArgs' hyperv: - Details of hypervisor ISO of type hyperv.
        :param 'FoundationImageNodesHypervisorIsoKvmArgs' kvm: - Details of hypervisor ISO of type kvm.
        :param 'FoundationImageNodesHypervisorIsoXenArgs' xen: - Details of hypervisor ISO of type xen.
        """
        if esx is not None:
            pulumi.set(__self__, "esx", esx)
        if hyperv is not None:
            pulumi.set(__self__, "hyperv", hyperv)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if xen is not None:
            pulumi.set(__self__, "xen", xen)

    @property
    @pulumi.getter
    def esx(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoEsx']:
        """
        - Details of hypervisor ISO of type esx.
        """
        return pulumi.get(self, "esx")

    @property
    @pulumi.getter
    def hyperv(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoHyperv']:
        """
        - Details of hypervisor ISO of type hyperv.
        """
        return pulumi.get(self, "hyperv")

    @property
    @pulumi.getter
    def kvm(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoKvm']:
        """
        - Details of hypervisor ISO of type kvm.
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter
    def xen(self) -> Optional['outputs.FoundationImageNodesHypervisorIsoXen']:
        """
        - Details of hypervisor ISO of type xen.
        """
        return pulumi.get(self, "xen")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoEsx(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoHyperv(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoKvm(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesHypervisorIsoXen(dict):
    def __init__(__self__, *,
                 checksum: str,
                 filename: str):
        """
        :param str checksum: - (Required) Filename of hypervisor ISO.
        :param str filename: - (Required) Checksum for ISO file.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        - (Required) Filename of hypervisor ISO.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        - (Required) Checksum for ISO file.
        """
        return pulumi.get(self, "filename")


@pulumi.output_type
class FoundationImageNodesTests(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runNcc":
            suggest = "run_ncc"
        elif key == "runSyscheck":
            suggest = "run_syscheck"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationImageNodesTests. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationImageNodesTests.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationImageNodesTests.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_ncc: Optional[bool] = None,
                 run_syscheck: Optional[bool] = None):
        """
        :param bool run_ncc: - Whether NCC checks should run.
        :param bool run_syscheck: - Whether system checks should run.
        """
        if run_ncc is not None:
            pulumi.set(__self__, "run_ncc", run_ncc)
        if run_syscheck is not None:
            pulumi.set(__self__, "run_syscheck", run_syscheck)

    @property
    @pulumi.getter(name="runNcc")
    def run_ncc(self) -> Optional[bool]:
        """
        - Whether NCC checks should run.
        """
        return pulumi.get(self, "run_ncc")

    @property
    @pulumi.getter(name="runSyscheck")
    def run_syscheck(self) -> Optional[bool]:
        """
        - Whether system checks should run.
        """
        return pulumi.get(self, "run_syscheck")


@pulumi.output_type
class FoundationIpmiConfigBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockId":
            suggest = "block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationIpmiConfigBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationIpmiConfigBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationIpmiConfigBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nodes: Sequence['outputs.FoundationIpmiConfigBlockNode'],
                 block_id: Optional[str] = None):
        """
        :param Sequence['FoundationIpmiConfigBlockNodeArgs'] nodes: - (Required) array of nodes for ipmi config.
        :param str block_id: - (Optional) Block Id
        """
        pulumi.set(__self__, "nodes", nodes)
        if block_id is not None:
            pulumi.set(__self__, "block_id", block_id)

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.FoundationIpmiConfigBlockNode']:
        """
        - (Required) array of nodes for ipmi config.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> Optional[str]:
        """
        - (Optional) Block Id
        """
        return pulumi.get(self, "block_id")


@pulumi.output_type
class FoundationIpmiConfigBlockNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipmiConfigureNow":
            suggest = "ipmi_configure_now"
        elif key == "ipmiIp":
            suggest = "ipmi_ip"
        elif key == "ipmiMac":
            suggest = "ipmi_mac"
        elif key == "ipmiConfigureSuccessful":
            suggest = "ipmi_configure_successful"
        elif key == "ipmiMessage":
            suggest = "ipmi_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FoundationIpmiConfigBlockNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FoundationIpmiConfigBlockNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FoundationIpmiConfigBlockNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipmi_configure_now: bool,
                 ipmi_ip: str,
                 ipmi_mac: str,
                 ipmi_configure_successful: Optional[bool] = None,
                 ipmi_message: Optional[str] = None):
        """
        :param bool ipmi_configure_now: - (Required) Whether IPMI should be configured. Should be kept true to configure
        :param str ipmi_ip: - IPMI IP address.
        :param str ipmi_mac: - (Required) IPMI mac address.
        :param bool ipmi_configure_successful: - Whether IPMI was successfully configured.
        :param str ipmi_message: - IPMI configuration status message if any.
        """
        pulumi.set(__self__, "ipmi_configure_now", ipmi_configure_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_mac", ipmi_mac)
        if ipmi_configure_successful is not None:
            pulumi.set(__self__, "ipmi_configure_successful", ipmi_configure_successful)
        if ipmi_message is not None:
            pulumi.set(__self__, "ipmi_message", ipmi_message)

    @property
    @pulumi.getter(name="ipmiConfigureNow")
    def ipmi_configure_now(self) -> bool:
        """
        - (Required) Whether IPMI should be configured. Should be kept true to configure
        """
        return pulumi.get(self, "ipmi_configure_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        """
        - IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiMac")
    def ipmi_mac(self) -> str:
        """
        - (Required) IPMI mac address.
        """
        return pulumi.get(self, "ipmi_mac")

    @property
    @pulumi.getter(name="ipmiConfigureSuccessful")
    def ipmi_configure_successful(self) -> Optional[bool]:
        """
        - Whether IPMI was successfully configured.
        """
        return pulumi.get(self, "ipmi_configure_successful")

    @property
    @pulumi.getter(name="ipmiMessage")
    def ipmi_message(self) -> Optional[str]:
        """
        - IPMI configuration status message if any.
        """
        return pulumi.get(self, "ipmi_message")


@pulumi.output_type
class ImageCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) The name for the image.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageClusterReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the image.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ImageCurrentClusterReferenceList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the image.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class KarbonClusterActivePassiveConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIpv4Address":
            suggest = "external_ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterActivePassiveConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterActivePassiveConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterActivePassiveConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ipv4_address: str):
        pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> str:
        return pulumi.get(self, "external_ipv4_address")


@pulumi.output_type
class KarbonClusterCniConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calicoConfig":
            suggest = "calico_config"
        elif key == "flannelConfigs":
            suggest = "flannel_configs"
        elif key == "nodeCidrMaskSize":
            suggest = "node_cidr_mask_size"
        elif key == "podIpv4Cidr":
            suggest = "pod_ipv4_cidr"
        elif key == "serviceIpv4Cidr":
            suggest = "service_ipv4_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterCniConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterCniConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterCniConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calico_config: Optional['outputs.KarbonClusterCniConfigCalicoConfig'] = None,
                 flannel_configs: Optional[Sequence['outputs.KarbonClusterCniConfigFlannelConfig']] = None,
                 node_cidr_mask_size: Optional[int] = None,
                 pod_ipv4_cidr: Optional[str] = None,
                 service_ipv4_cidr: Optional[str] = None):
        """
        :param 'KarbonClusterCniConfigCalicoConfigArgs' calico_config: - (Optional) Configuration of the calico CNI provider.
               * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
               * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.
               
               **Note:** Updates to this attribute forces new resource creation.
               
               See detailed information in [Nutanix Karbon Cluster](https://www.nutanix.dev/reference/karbon/api-reference/cluster/).
        :param Sequence['KarbonClusterCniConfigFlannelConfigArgs'] flannel_configs: - (Optional) Configuration of the flannel container network interface (CNI) provider.
        :param int node_cidr_mask_size: - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        :param str pod_ipv4_cidr: - (Optional) CIDR for pods in the cluster.
        :param str service_ipv4_cidr: - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
        if calico_config is not None:
            pulumi.set(__self__, "calico_config", calico_config)
        if flannel_configs is not None:
            pulumi.set(__self__, "flannel_configs", flannel_configs)
        if node_cidr_mask_size is not None:
            pulumi.set(__self__, "node_cidr_mask_size", node_cidr_mask_size)
        if pod_ipv4_cidr is not None:
            pulumi.set(__self__, "pod_ipv4_cidr", pod_ipv4_cidr)
        if service_ipv4_cidr is not None:
            pulumi.set(__self__, "service_ipv4_cidr", service_ipv4_cidr)

    @property
    @pulumi.getter(name="calicoConfig")
    def calico_config(self) -> Optional['outputs.KarbonClusterCniConfigCalicoConfig']:
        """
        - (Optional) Configuration of the calico CNI provider.
        * `calico_config.ip_pool_config`: - (Optional) List of IP pools to be configured/managed by calico.
        * `calico_config.ip_pool_config.cidr`: - (Optional) IP range to use for this pool, it should fall within pod cidr.

        **Note:** Updates to this attribute forces new resource creation.

        See detailed information in [Nutanix Karbon Cluster](https://www.nutanix.dev/reference/karbon/api-reference/cluster/).
        """
        return pulumi.get(self, "calico_config")

    @property
    @pulumi.getter(name="flannelConfigs")
    def flannel_configs(self) -> Optional[Sequence['outputs.KarbonClusterCniConfigFlannelConfig']]:
        """
        - (Optional) Configuration of the flannel container network interface (CNI) provider.
        """
        return pulumi.get(self, "flannel_configs")

    @property
    @pulumi.getter(name="nodeCidrMaskSize")
    def node_cidr_mask_size(self) -> Optional[int]:
        """
        - (Optional) The size of the subnet from the pod_ipv4_cidr assigned to each host. A value of 24 would allow up to 255 pods per node.
        """
        return pulumi.get(self, "node_cidr_mask_size")

    @property
    @pulumi.getter(name="podIpv4Cidr")
    def pod_ipv4_cidr(self) -> Optional[str]:
        """
        - (Optional) CIDR for pods in the cluster.
        """
        return pulumi.get(self, "pod_ipv4_cidr")

    @property
    @pulumi.getter(name="serviceIpv4Cidr")
    def service_ipv4_cidr(self) -> Optional[str]:
        """
        - (Optional) Classless inter-domain routing (CIDR) for k8s services in the cluster.
        """
        return pulumi.get(self, "service_ipv4_cidr")


@pulumi.output_type
class KarbonClusterCniConfigCalicoConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipPoolConfigs":
            suggest = "ip_pool_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterCniConfigCalicoConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterCniConfigCalicoConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterCniConfigCalicoConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_pool_configs: Optional[Sequence['outputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig']] = None):
        if ip_pool_configs is not None:
            pulumi.set(__self__, "ip_pool_configs", ip_pool_configs)

    @property
    @pulumi.getter(name="ipPoolConfigs")
    def ip_pool_configs(self) -> Optional[Sequence['outputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig']]:
        return pulumi.get(self, "ip_pool_configs")


@pulumi.output_type
class KarbonClusterCniConfigCalicoConfigIpPoolConfig(dict):
    def __init__(__self__, *,
                 cidr: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class KarbonClusterCniConfigFlannelConfig(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class KarbonClusterEtcdNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeOsVersion":
            suggest = "node_os_version"
        elif key == "numInstances":
            suggest = "num_instances"
        elif key == "ahvConfig":
            suggest = "ahv_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterEtcdNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterEtcdNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterEtcdNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_os_version: str,
                 num_instances: int,
                 ahv_config: Optional['outputs.KarbonClusterEtcdNodePoolAhvConfig'] = None,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.KarbonClusterEtcdNodePoolNode']] = None):
        """
        :param str node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param int num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param 'KarbonClusterEtcdNodePoolAhvConfigArgs' ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        :param Sequence['KarbonClusterEtcdNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional['outputs.KarbonClusterEtcdNodePoolAhvConfig']:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Unique name of the node pool. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.KarbonClusterEtcdNodePoolNode']]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class KarbonClusterEtcdNodePoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "memoryMib":
            suggest = "memory_mib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterEtcdNodePoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterEtcdNodePoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterEtcdNodePoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 prism_element_cluster_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 memory_mib: Optional[int] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        return pulumi.get(self, "memory_mib")


@pulumi.output_type
class KarbonClusterEtcdNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterEtcdNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterEtcdNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterEtcdNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class KarbonClusterExternalLbConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIpv4Address":
            suggest = "external_ipv4_address"
        elif key == "masterNodesConfigs":
            suggest = "master_nodes_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterExternalLbConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterExternalLbConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterExternalLbConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ipv4_address: str,
                 master_nodes_configs: Sequence['outputs.KarbonClusterExternalLbConfigMasterNodesConfig']):
        pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)
        pulumi.set(__self__, "master_nodes_configs", master_nodes_configs)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> str:
        return pulumi.get(self, "external_ipv4_address")

    @property
    @pulumi.getter(name="masterNodesConfigs")
    def master_nodes_configs(self) -> Sequence['outputs.KarbonClusterExternalLbConfigMasterNodesConfig']:
        return pulumi.get(self, "master_nodes_configs")


@pulumi.output_type
class KarbonClusterExternalLbConfigMasterNodesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "nodePoolName":
            suggest = "node_pool_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterExternalLbConfigMasterNodesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterExternalLbConfigMasterNodesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterExternalLbConfigMasterNodesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: str,
                 node_pool_name: Optional[str] = None):
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if node_pool_name is not None:
            pulumi.set(__self__, "node_pool_name", node_pool_name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="nodePoolName")
    def node_pool_name(self) -> Optional[str]:
        return pulumi.get(self, "node_pool_name")


@pulumi.output_type
class KarbonClusterMasterNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeOsVersion":
            suggest = "node_os_version"
        elif key == "numInstances":
            suggest = "num_instances"
        elif key == "ahvConfig":
            suggest = "ahv_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterMasterNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterMasterNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterMasterNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_os_version: str,
                 num_instances: int,
                 ahv_config: Optional['outputs.KarbonClusterMasterNodePoolAhvConfig'] = None,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.KarbonClusterMasterNodePoolNode']] = None):
        """
        :param str node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param int num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param 'KarbonClusterMasterNodePoolAhvConfigArgs' ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
        :param Sequence['KarbonClusterMasterNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional['outputs.KarbonClusterMasterNodePoolAhvConfig']:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.KarbonClusterMasterNodePoolNode']]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class KarbonClusterMasterNodePoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "memoryMib":
            suggest = "memory_mib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterMasterNodePoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterMasterNodePoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterMasterNodePoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 prism_element_cluster_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 memory_mib: Optional[int] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        return pulumi.get(self, "memory_mib")


@pulumi.output_type
class KarbonClusterMasterNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterMasterNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterMasterNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterMasterNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class KarbonClusterPrivateRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryName":
            suggest = "registry_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterPrivateRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterPrivateRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterPrivateRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 registry_name: str):
        pulumi.set(__self__, "registry_name", registry_name)

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        return pulumi.get(self, "registry_name")


@pulumi.output_type
class KarbonClusterSingleMasterConfig(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class KarbonClusterStorageClassConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumesConfig":
            suggest = "volumes_config"
        elif key == "reclaimPolicy":
            suggest = "reclaim_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterStorageClassConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterStorageClassConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterStorageClassConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volumes_config: 'outputs.KarbonClusterStorageClassConfigVolumesConfig',
                 name: Optional[str] = None,
                 reclaim_policy: Optional[str] = None):
        """
        :param str name: - (Required) The name of the storage class.
        :param str reclaim_policy: Reclaim policy for persistent volumes provisioned using the specified storage class.
               * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
               * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
               * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
               * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
               * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
               * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.
               
               **Note:** Updates to this attribute forces new resource creation.
        """
        pulumi.set(__self__, "volumes_config", volumes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)

    @property
    @pulumi.getter(name="volumesConfig")
    def volumes_config(self) -> 'outputs.KarbonClusterStorageClassConfigVolumesConfig':
        return pulumi.get(self, "volumes_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name of the storage class.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[str]:
        """
        Reclaim policy for persistent volumes provisioned using the specified storage class.
        * `volumes_config.#.file_system` - (Optional) Karbon uses either the ext4 or xfs file-system on the volume disk.
        * `volumes_config.#.flash_mode` - (Optional) Pins the persistent volumes to the flash tier in case of a `true` value.
        * `volumes_config.#.password` - (Required) The password of the Prism Element user that the API calls use to provision volumes.
        * `volumes_config.#.prism_element_cluster_uuid` - (Required) The universally unique identifier (UUID) of the Prism Element cluster.
        * `volumes_config.#.storage_container` - (Required) Name of the storage container the storage container uses to provision volumes.
        * `volumes_config.#.username` - (Required) Username of the Prism Element user that the API calls use to provision volumes.

        **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "reclaim_policy")


@pulumi.output_type
class KarbonClusterStorageClassConfigVolumesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "storageContainer":
            suggest = "storage_container"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "flashMode":
            suggest = "flash_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterStorageClassConfigVolumesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterStorageClassConfigVolumesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterStorageClassConfigVolumesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 prism_element_cluster_uuid: str,
                 storage_container: str,
                 username: str,
                 file_system: Optional[str] = None,
                 flash_mode: Optional[bool] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        pulumi.set(__self__, "storage_container", storage_container)
        pulumi.set(__self__, "username", username)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if flash_mode is not None:
            pulumi.set(__self__, "flash_mode", flash_mode)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter(name="storageContainer")
    def storage_container(self) -> str:
        return pulumi.get(self, "storage_container")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> Optional[bool]:
        return pulumi.get(self, "flash_mode")


@pulumi.output_type
class KarbonClusterWorkerNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeOsVersion":
            suggest = "node_os_version"
        elif key == "numInstances":
            suggest = "num_instances"
        elif key == "ahvConfig":
            suggest = "ahv_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterWorkerNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterWorkerNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterWorkerNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_os_version: str,
                 num_instances: int,
                 ahv_config: Optional['outputs.KarbonClusterWorkerNodePoolAhvConfig'] = None,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.KarbonClusterWorkerNodePoolNode']] = None):
        """
        :param str node_os_version: - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        :param int num_instances: - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        :param 'KarbonClusterWorkerNodePoolAhvConfigArgs' ahv_config: - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
               * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
        :param Sequence['KarbonClusterWorkerNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        """
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "num_instances", num_instances)
        if ahv_config is not None:
            pulumi.set(__self__, "ahv_config", ahv_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - (Required) The version of the node OS image. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - (Required) Number of nodes in the node pool. **Note:** Updates to etcd or master node pool forces new resource creation.
        """
        return pulumi.get(self, "num_instances")

    @property
    @pulumi.getter(name="ahvConfig")
    def ahv_config(self) -> Optional['outputs.KarbonClusterWorkerNodePoolAhvConfig']:
        """
        - (Optional) VM configuration in AHV. **Note:** Updates to this attribute forces new resource creation.
        * `ahv_config.cpu`: - (Required) The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - (Optional) Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - (Optional) Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - (Required) The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - (Required) The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the k8s cluster. **Note:** Updates to this attribute forces new resource creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.KarbonClusterWorkerNodePoolNode']]:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class KarbonClusterWorkerNodePoolAhvConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkUuid":
            suggest = "network_uuid"
        elif key == "prismElementClusterUuid":
            suggest = "prism_element_cluster_uuid"
        elif key == "diskMib":
            suggest = "disk_mib"
        elif key == "memoryMib":
            suggest = "memory_mib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterWorkerNodePoolAhvConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterWorkerNodePoolAhvConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterWorkerNodePoolAhvConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_uuid: str,
                 prism_element_cluster_uuid: str,
                 cpu: Optional[int] = None,
                 disk_mib: Optional[int] = None,
                 memory_mib: Optional[int] = None):
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_mib is not None:
            pulumi.set(__self__, "disk_mib", disk_mib)
        if memory_mib is not None:
            pulumi.set(__self__, "memory_mib", memory_mib)

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> Optional[int]:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> Optional[int]:
        return pulumi.get(self, "memory_mib")


@pulumi.output_type
class KarbonClusterWorkerNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KarbonClusterWorkerNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KarbonClusterWorkerNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KarbonClusterWorkerNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ipv4_address: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleInboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleOutboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAdRuleTargetGroupFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleInboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressGroupInclusionLists":
            suggest = "address_group_inclusion_lists"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "filterKindLists":
            suggest = "filter_kind_lists"
        elif key == "filterParams":
            suggest = "filter_params"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "ipSubnet":
            suggest = "ip_subnet"
        elif key == "ipSubnetPrefixLength":
            suggest = "ip_subnet_prefix_length"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "peerSpecificationType":
            suggest = "peer_specification_type"
        elif key == "serviceGroupLists":
            suggest = "service_group_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleOutboundAllowList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_group_inclusion_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList']] = None,
                 expiration_time: Optional[str] = None,
                 filter_kind_lists: Optional[Sequence[str]] = None,
                 filter_params: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam']] = None,
                 filter_type: Optional[str] = None,
                 icmp_type_code_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList']] = None,
                 ip_subnet: Optional[str] = None,
                 ip_subnet_prefix_length: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 peer_specification_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_group_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList']] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList']] = None):
        if address_group_inclusion_lists is not None:
            pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if filter_kind_lists is not None:
            pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ip_subnet_prefix_length is not None:
            pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if peer_specification_type is not None:
            pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_group_lists is not None:
            pulumi.set(__self__, "service_group_lists", service_group_lists)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList']]:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam']]:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList']]:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> Optional[str]:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> Optional[str]:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList']]:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList']]:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList']]:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the network_security_rule.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class NetworkSecurityRuleAppRuleTargetGroupFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkSecurityRuleIsolationRuleFirstEntityFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkSecurityRuleIsolationRuleSecondEntityFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - (Required) The name for the network_security_rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PbrDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressType":
            suggest = "address_type"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "subnetIp":
            suggest = "subnet_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_type: Optional[str] = None,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class PbrProtocolParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolNumber":
            suggest = "protocol_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp: Optional['outputs.PbrProtocolParametersIcmp'] = None,
                 protocol_number: Optional[str] = None,
                 tcp: Optional['outputs.PbrProtocolParametersTcp'] = None,
                 udp: Optional['outputs.PbrProtocolParametersUdp'] = None):
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def icmp(self) -> Optional['outputs.PbrProtocolParametersIcmp']:
        return pulumi.get(self, "icmp")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[str]:
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.PbrProtocolParametersTcp']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.PbrProtocolParametersUdp']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class PbrProtocolParametersIcmp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpCode":
            suggest = "icmp_code"
        elif key == "icmpType":
            suggest = "icmp_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersIcmp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersIcmp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersIcmp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class PbrProtocolParametersTcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRangeLists":
            suggest = "destination_port_range_lists"
        elif key == "sourcePortRangeLists":
            suggest = "source_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersTcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersTcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersTcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersTcpDestinationPortRangeList']] = None,
                 source_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersTcpSourcePortRangeList']] = None):
        if destination_port_range_lists is not None:
            pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        if source_port_range_lists is not None:
            pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersTcpDestinationPortRangeList']]:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersTcpSourcePortRangeList']]:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class PbrProtocolParametersTcpDestinationPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersTcpDestinationPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersTcpDestinationPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersTcpDestinationPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrProtocolParametersTcpSourcePortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersTcpSourcePortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersTcpSourcePortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersTcpSourcePortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrProtocolParametersUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRangeLists":
            suggest = "destination_port_range_lists"
        elif key == "sourcePortRangeLists":
            suggest = "source_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersUdpDestinationPortRangeList']] = None,
                 source_port_range_lists: Optional[Sequence['outputs.PbrProtocolParametersUdpSourcePortRangeList']] = None):
        if destination_port_range_lists is not None:
            pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        if source_port_range_lists is not None:
            pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersUdpDestinationPortRangeList']]:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Optional[Sequence['outputs.PbrProtocolParametersUdpSourcePortRangeList']]:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class PbrProtocolParametersUdpDestinationPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersUdpDestinationPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersUdpDestinationPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersUdpDestinationPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrProtocolParametersUdpSourcePortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrProtocolParametersUdpSourcePortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrProtocolParametersUdpSourcePortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrProtocolParametersUdpSourcePortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class PbrSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressType":
            suggest = "address_type"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "subnetIp":
            suggest = "subnet_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PbrSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PbrSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PbrSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_type: Optional[str] = None,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class ProjectAccountReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the project.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectDefaultSubnetReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectEnvironmentReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectExternalNetworkList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectExternalUserGroupReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectResourceDomain(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.ProjectResourceDomainResource']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.ProjectResourceDomainResource']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class ProjectResourceDomainResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectResourceDomainResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectResourceDomainResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectResourceDomainResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 limit: int,
                 resource_type: str,
                 units: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param int value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> Optional[str]:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectSubnetReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectUserReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the project.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the project.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAvailabilityZoneIndex":
            suggest = "destination_availability_zone_index"
        elif key == "snapshotScheduleLists":
            suggest = "snapshot_schedule_lists"
        elif key == "sourceAvailabilityZoneIndex":
            suggest = "source_availability_zone_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_availability_zone_index: Optional[int] = None,
                 snapshot_schedule_lists: Optional[Sequence['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList']] = None,
                 source_availability_zone_index: Optional[int] = None):
        if destination_availability_zone_index is not None:
            pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        if snapshot_schedule_lists is not None:
            pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        if source_availability_zone_index is not None:
            pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> Optional[int]:
        return pulumi.get(self, "destination_availability_zone_index")

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Optional[Sequence['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList']]:
        return pulumi.get(self, "snapshot_schedule_lists")

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> Optional[int]:
        return pulumi.get(self, "source_availability_zone_index")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoveryPointObjectiveSecs":
            suggest = "recovery_point_objective_secs"
        elif key == "autoSuspendTimeoutSecs":
            suggest = "auto_suspend_timeout_secs"
        elif key == "localSnapshotRetentionPolicy":
            suggest = "local_snapshot_retention_policy"
        elif key == "remoteSnapshotRetentionPolicy":
            suggest = "remote_snapshot_retention_policy"
        elif key == "snapshotType":
            suggest = "snapshot_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recovery_point_objective_secs: int,
                 auto_suspend_timeout_secs: Optional[int] = None,
                 local_snapshot_retention_policy: Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy'] = None,
                 remote_snapshot_retention_policy: Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy'] = None,
                 snapshot_type: Optional[str] = None):
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        if auto_suspend_timeout_secs is not None:
            pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        if local_snapshot_retention_policy is not None:
            pulumi.set(__self__, "local_snapshot_retention_policy", local_snapshot_retention_policy)
        if remote_snapshot_retention_policy is not None:
            pulumi.set(__self__, "remote_snapshot_retention_policy", remote_snapshot_retention_policy)
        if snapshot_type is not None:
            pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> int:
        return pulumi.get(self, "recovery_point_objective_secs")

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> Optional[int]:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicy")
    def local_snapshot_retention_policy(self) -> Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy']:
        return pulumi.get(self, "local_snapshot_retention_policy")

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicy")
    def remote_snapshot_retention_policy(self) -> Optional['outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy']:
        return pulumi.get(self, "remote_snapshot_retention_policy")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_type")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numSnapshots":
            suggest = "num_snapshots"
        elif key == "rollupRetentionPolicyMultiple":
            suggest = "rollup_retention_policy_multiple"
        elif key == "rollupRetentionPolicySnapshotIntervalType":
            suggest = "rollup_retention_policy_snapshot_interval_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_snapshots: Optional[int] = None,
                 rollup_retention_policy_multiple: Optional[int] = None,
                 rollup_retention_policy_snapshot_interval_type: Optional[str] = None):
        if num_snapshots is not None:
            pulumi.set(__self__, "num_snapshots", num_snapshots)
        if rollup_retention_policy_multiple is not None:
            pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        if rollup_retention_policy_snapshot_interval_type is not None:
            pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> Optional[int]:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> Optional[int]:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> Optional[str]:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numSnapshots":
            suggest = "num_snapshots"
        elif key == "rollupRetentionPolicyMultiple":
            suggest = "rollup_retention_policy_multiple"
        elif key == "rollupRetentionPolicySnapshotIntervalType":
            suggest = "rollup_retention_policy_snapshot_interval_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_snapshots: Optional[int] = None,
                 rollup_retention_policy_multiple: Optional[int] = None,
                 rollup_retention_policy_snapshot_interval_type: Optional[str] = None):
        if num_snapshots is not None:
            pulumi.set(__self__, "num_snapshots", num_snapshots)
        if rollup_retention_policy_multiple is not None:
            pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        if rollup_retention_policy_snapshot_interval_type is not None:
            pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> Optional[int]:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> Optional[int]:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> Optional[str]:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class ProtectionRuleCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the protection rule.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProtectionRuleCategoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kindLists":
            suggest = "kind_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleCategoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleCategoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleCategoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind_lists: Optional[Sequence[str]] = None,
                 params: Optional[Sequence['outputs.ProtectionRuleCategoryFilterParam']] = None,
                 type: Optional[str] = None):
        if kind_lists is not None:
            pulumi.set(__self__, "kind_lists", kind_lists)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "kind_lists")

    @property
    @pulumi.getter
    def params(self) -> Optional[Sequence['outputs.ProtectionRuleCategoryFilterParam']]:
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProtectionRuleCategoryFilterParam(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The name for the protection rule.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ProtectionRuleOrderedAvailabilityZoneList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZoneUrl":
            suggest = "availability_zone_url"
        elif key == "clusterUuid":
            suggest = "cluster_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectionRuleOrderedAvailabilityZoneList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectionRuleOrderedAvailabilityZoneList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectionRuleOrderedAvailabilityZoneList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_url: Optional[str] = None,
                 cluster_uuid: Optional[str] = None):
        if availability_zone_url is not None:
            pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        if cluster_uuid is not None:
            pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> Optional[str]:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> Optional[str]:
        return pulumi.get(self, "cluster_uuid")


@pulumi.output_type
class ProtectionRuleOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the protection rule.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ProtectionRuleProjectReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the protection rule.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the protection rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the Recovery Plan.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RecoveryPlanOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "floatingIpAssignmentLists":
            suggest = "floating_ip_assignment_lists"
        elif key == "networkMappingLists":
            suggest = "network_mapping_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 floating_ip_assignment_lists: Optional[Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentList']] = None,
                 network_mapping_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingList']] = None):
        if floating_ip_assignment_lists is not None:
            pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        if network_mapping_lists is not None:
            pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentList']]:
        return pulumi.get(self, "floating_ip_assignment_lists")

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingList']]:
        return pulumi.get(self, "network_mapping_lists")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZoneUrl":
            suggest = "availability_zone_url"
        elif key == "vmIpAssignmentLists":
            suggest = "vm_ip_assignment_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_url: str,
                 vm_ip_assignment_lists: Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> Sequence['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList']:
        return pulumi.get(self, "vm_ip_assignment_lists")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmNicInformation":
            suggest = "vm_nic_information"
        elif key == "vmReference":
            suggest = "vm_reference"
        elif key == "recoveryFloatingIpConfig":
            suggest = "recovery_floating_ip_config"
        elif key == "testFloatingIpConfig":
            suggest = "test_floating_ip_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_nic_information: 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation',
                 vm_reference: 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference',
                 recovery_floating_ip_config: Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig'] = None,
                 test_floating_ip_config: Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig'] = None):
        pulumi.set(__self__, "vm_nic_information", vm_nic_information)
        pulumi.set(__self__, "vm_reference", vm_reference)
        if recovery_floating_ip_config is not None:
            pulumi.set(__self__, "recovery_floating_ip_config", recovery_floating_ip_config)
        if test_floating_ip_config is not None:
            pulumi.set(__self__, "test_floating_ip_config", test_floating_ip_config)

    @property
    @pulumi.getter(name="vmNicInformation")
    def vm_nic_information(self) -> 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation':
        return pulumi.get(self, "vm_nic_information")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference':
        return pulumi.get(self, "vm_reference")

    @property
    @pulumi.getter(name="recoveryFloatingIpConfig")
    def recovery_floating_ip_config(self) -> Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig']:
        return pulumi.get(self, "recovery_floating_ip_config")

    @property
    @pulumi.getter(name="testFloatingIpConfig")
    def test_floating_ip_config(self) -> Optional['outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig']:
        return pulumi.get(self, "test_floating_ip_config")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldAllocateDynamically":
            suggest = "should_allocate_dynamically"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 should_allocate_dynamically: Optional[bool] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if should_allocate_dynamically is not None:
            pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> Optional[bool]:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldAllocateDynamically":
            suggest = "should_allocate_dynamically"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 should_allocate_dynamically: Optional[bool] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if should_allocate_dynamically is not None:
            pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> Optional[bool]:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation(dict):
    def __init__(__self__, *,
                 uuid: str,
                 ip: Optional[str] = None):
        """
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "uuid", uuid)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str uuid: (Required) the UUID.
        :param str name: The name for the Recovery Plan.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areNetworksStretched":
            suggest = "are_networks_stretched"
        elif key == "availabilityZoneNetworkMappingLists":
            suggest = "availability_zone_network_mapping_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_networks_stretched: Optional[bool] = None,
                 availability_zone_network_mapping_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList']] = None):
        if are_networks_stretched is not None:
            pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        if availability_zone_network_mapping_lists is not None:
            pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> Optional[bool]:
        return pulumi.get(self, "are_networks_stretched")

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList']]:
        return pulumi.get(self, "availability_zone_network_mapping_lists")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZoneUrl":
            suggest = "availability_zone_url"
        elif key == "clusterReferenceLists":
            suggest = "cluster_reference_lists"
        elif key == "recoveryIpAssignmentLists":
            suggest = "recovery_ip_assignment_lists"
        elif key == "recoveryNetwork":
            suggest = "recovery_network"
        elif key == "testIpAssignmentLists":
            suggest = "test_ip_assignment_lists"
        elif key == "testNetwork":
            suggest = "test_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_url: Optional[str] = None,
                 cluster_reference_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList']] = None,
                 recovery_ip_assignment_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList']] = None,
                 recovery_network: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork'] = None,
                 test_ip_assignment_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList']] = None,
                 test_network: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork'] = None):
        if availability_zone_url is not None:
            pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        if cluster_reference_lists is not None:
            pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        if recovery_ip_assignment_lists is not None:
            pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        if recovery_network is not None:
            pulumi.set(__self__, "recovery_network", recovery_network)
        if test_ip_assignment_lists is not None:
            pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        if test_network is not None:
            pulumi.set(__self__, "test_network", test_network)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> Optional[str]:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList']]:
        return pulumi.get(self, "cluster_reference_lists")

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList']]:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @property
    @pulumi.getter(name="recoveryNetwork")
    def recovery_network(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork']:
        return pulumi.get(self, "recovery_network")

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList']]:
        return pulumi.get(self, "test_ip_assignment_lists")

    @property
    @pulumi.getter(name="testNetwork")
    def test_network(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork']:
        return pulumi.get(self, "test_network")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList(dict):
    def __init__(__self__, *,
                 kind: str,
                 uuid: str,
                 name: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str uuid: (Required) the UUID.
        :param str name: The name for the Recovery Plan.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfigLists":
            suggest = "ip_config_lists"
        elif key == "vmReference":
            suggest = "vm_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList'],
                 vm_reference: 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetLists":
            suggest = "subnet_lists"
        elif key == "useVpcReference":
            suggest = "use_vpc_reference"
        elif key == "virtualNetworkReference":
            suggest = "virtual_network_reference"
        elif key == "vpcReference":
            suggest = "vpc_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 subnet_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList']] = None,
                 use_vpc_reference: Optional[bool] = None,
                 virtual_network_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference'] = None,
                 vpc_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference'] = None):
        """
        :param str name: The name for the Recovery Plan.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_lists is not None:
            pulumi.set(__self__, "subnet_lists", subnet_lists)
        if use_vpc_reference is not None:
            pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        if virtual_network_reference is not None:
            pulumi.set(__self__, "virtual_network_reference", virtual_network_reference)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList']]:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> Optional[bool]:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReference")
    def virtual_network_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference']:
        return pulumi.get(self, "virtual_network_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference']:
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "externalConnectivityState":
            suggest = "external_connectivity_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_ip: str,
                 prefix_length: int,
                 external_connectivity_state: Optional[str] = None):
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if external_connectivity_state is not None:
            pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> Optional[str]:
        return pulumi.get(self, "external_connectivity_state")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfigLists":
            suggest = "ip_config_lists"
        elif key == "vmReference":
            suggest = "vm_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList'],
                 vm_reference: 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetLists":
            suggest = "subnet_lists"
        elif key == "useVpcReference":
            suggest = "use_vpc_reference"
        elif key == "virtualNetworkReference":
            suggest = "virtual_network_reference"
        elif key == "vpcReference":
            suggest = "vpc_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 subnet_lists: Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList']] = None,
                 use_vpc_reference: Optional[bool] = None,
                 virtual_network_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference'] = None,
                 vpc_reference: Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference'] = None):
        """
        :param str name: The name for the Recovery Plan.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_lists is not None:
            pulumi.set(__self__, "subnet_lists", subnet_lists)
        if use_vpc_reference is not None:
            pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        if virtual_network_reference is not None:
            pulumi.set(__self__, "virtual_network_reference", virtual_network_reference)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Optional[Sequence['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList']]:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> Optional[bool]:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReference")
    def virtual_network_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference']:
        return pulumi.get(self, "virtual_network_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional['outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference']:
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "externalConnectivityState":
            suggest = "external_connectivity_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_ip: str,
                 prefix_length: int,
                 external_connectivity_state: Optional[str] = None):
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if external_connectivity_state is not None:
            pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> Optional[str]:
        return pulumi.get(self, "external_connectivity_state")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanProjectReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: The name for the Recovery Plan.
        :param str uuid: (Required) the UUID.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RecoveryPlanStageList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stageWork":
            suggest = "stage_work"
        elif key == "delayTimeSecs":
            suggest = "delay_time_secs"
        elif key == "stageUuid":
            suggest = "stage_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stage_work: 'outputs.RecoveryPlanStageListStageWork',
                 delay_time_secs: Optional[int] = None,
                 stage_uuid: Optional[str] = None):
        pulumi.set(__self__, "stage_work", stage_work)
        if delay_time_secs is not None:
            pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        if stage_uuid is not None:
            pulumi.set(__self__, "stage_uuid", stage_uuid)

    @property
    @pulumi.getter(name="stageWork")
    def stage_work(self) -> 'outputs.RecoveryPlanStageListStageWork':
        return pulumi.get(self, "stage_work")

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> Optional[int]:
        return pulumi.get(self, "delay_time_secs")

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> Optional[str]:
        return pulumi.get(self, "stage_uuid")


@pulumi.output_type
class RecoveryPlanStageListStageWork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoverEntities":
            suggest = "recover_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recover_entities: Optional['outputs.RecoveryPlanStageListStageWorkRecoverEntities'] = None):
        if recover_entities is not None:
            pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Optional['outputs.RecoveryPlanStageListStageWorkRecoverEntities']:
        return pulumi.get(self, "recover_entities")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityInfoLists":
            suggest = "entity_info_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWorkRecoverEntities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_info_lists: Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList']] = None):
        if entity_info_lists is not None:
            pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList']]:
        return pulumi.get(self, "entity_info_lists")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyEntityReferenceKind":
            suggest = "any_entity_reference_kind"
        elif key == "anyEntityReferenceName":
            suggest = "any_entity_reference_name"
        elif key == "anyEntityReferenceUuid":
            suggest = "any_entity_reference_uuid"
        elif key == "scriptLists":
            suggest = "script_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_entity_reference_kind: Optional[str] = None,
                 any_entity_reference_name: Optional[str] = None,
                 any_entity_reference_uuid: Optional[str] = None,
                 categories: Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory']] = None,
                 script_lists: Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList']] = None):
        if any_entity_reference_kind is not None:
            pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        if any_entity_reference_name is not None:
            pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        if any_entity_reference_uuid is not None:
            pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if script_lists is not None:
            pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> Optional[str]:
        return pulumi.get(self, "any_entity_reference_kind")

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> Optional[str]:
        return pulumi.get(self, "any_entity_reference_name")

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> Optional[str]:
        return pulumi.get(self, "any_entity_reference_uuid")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Optional[Sequence['outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList']]:
        return pulumi.get(self, "script_lists")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name for the Recovery Plan.
        :param str value: value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the Recovery Plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableScriptExec":
            suggest = "enable_script_exec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_script_exec: bool,
                 timeout: Optional[str] = None):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> bool:
        return pulumi.get(self, "enable_script_exec")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class RoleCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Optional) Name of the role.
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RoleOwnerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the role.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RolePermissionReferenceList(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the role.
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RoleProjectReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Optional) Name of the role.
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ServiceGroupServiceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpTypeCodeLists":
            suggest = "icmp_type_code_lists"
        elif key == "tcpPortRangeLists":
            suggest = "tcp_port_range_lists"
        elif key == "udpPortRangeLists":
            suggest = "udp_port_range_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupServiceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupServiceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupServiceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_type_code_lists: Optional[Sequence['outputs.ServiceGroupServiceListIcmpTypeCodeList']] = None,
                 protocol: Optional[str] = None,
                 tcp_port_range_lists: Optional[Sequence['outputs.ServiceGroupServiceListTcpPortRangeList']] = None,
                 udp_port_range_lists: Optional[Sequence['outputs.ServiceGroupServiceListUdpPortRangeList']] = None):
        """
        :param Sequence['ServiceGroupServiceListIcmpTypeCodeListArgs'] icmp_type_code_lists: - (Optional) ICMP type code list
        :param str protocol: - (Optional) The UserPrincipalName of the user from the directory service.
        :param Sequence['ServiceGroupServiceListTcpPortRangeListArgs'] tcp_port_range_lists: - (Optional) TCP Port range list
        :param Sequence['ServiceGroupServiceListUdpPortRangeListArgs'] udp_port_range_lists: - (Optional) UDP port range list
        """
        if icmp_type_code_lists is not None:
            pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tcp_port_range_lists is not None:
            pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        if udp_port_range_lists is not None:
            pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Optional[Sequence['outputs.ServiceGroupServiceListIcmpTypeCodeList']]:
        """
        - (Optional) ICMP type code list
        """
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Optional[Sequence['outputs.ServiceGroupServiceListTcpPortRangeList']]:
        """
        - (Optional) TCP Port range list
        """
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Optional[Sequence['outputs.ServiceGroupServiceListUdpPortRangeList']]:
        """
        - (Optional) UDP port range list
        """
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class ServiceGroupServiceListIcmpTypeCodeList(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str code: - (Optional) Code as text
        :param str type: - (Optional) Type as text
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        - (Optional) Code as text
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        - (Optional) Type as text
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceGroupServiceListTcpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupServiceListTcpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupServiceListTcpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupServiceListTcpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        """
        :param int end_port: End Port (Int)
        :param int start_port: - (Optional) Start Port (Int)
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        """
        End Port (Int)
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        """
        - (Optional) Start Port (Int)
        """
        return pulumi.get(self, "start_port")


@pulumi.output_type
class ServiceGroupServiceListUdpPortRangeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupServiceListUdpPortRangeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupServiceListUdpPortRangeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupServiceListUdpPortRangeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 start_port: Optional[int] = None):
        """
        :param int end_port: End Port (Int)
        :param int start_port: - (Optional) Start Port (Int)
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        """
        End Port (Int)
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        """
        - (Optional) Start Port (Int)
        """
        return pulumi.get(self, "start_port")


@pulumi.output_type
class StaticRoutesDefaultRouteNexthop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSubnetReferenceUuid":
            suggest = "external_subnet_reference_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRoutesDefaultRouteNexthop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRoutesDefaultRouteNexthop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRoutesDefaultRouteNexthop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_subnet_reference_uuid: Optional[str] = None):
        """
        :param str external_subnet_reference_uuid: Reference to a subnet.
        """
        if external_subnet_reference_uuid is not None:
            pulumi.set(__self__, "external_subnet_reference_uuid", external_subnet_reference_uuid)

    @property
    @pulumi.getter(name="externalSubnetReferenceUuid")
    def external_subnet_reference_uuid(self) -> Optional[str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference_uuid")


@pulumi.output_type
class StaticRoutesStaticRoutesList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSubnetReferenceUuid":
            suggest = "external_subnet_reference_uuid"
        elif key == "vpnConnectionReferenceUuid":
            suggest = "vpn_connection_reference_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRoutesStaticRoutesList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRoutesStaticRoutesList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRoutesStaticRoutesList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 external_subnet_reference_uuid: Optional[str] = None,
                 vpn_connection_reference_uuid: Optional[str] = None):
        """
        :param str destination: Destination ip with prefix.
        :param str external_subnet_reference_uuid: Reference to a subnet. Supported with 2022.x .
        :param str vpn_connection_reference_uuid: Reference to a vpn connection.
        """
        pulumi.set(__self__, "destination", destination)
        if external_subnet_reference_uuid is not None:
            pulumi.set(__self__, "external_subnet_reference_uuid", external_subnet_reference_uuid)
        if vpn_connection_reference_uuid is not None:
            pulumi.set(__self__, "vpn_connection_reference_uuid", vpn_connection_reference_uuid)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Destination ip with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="externalSubnetReferenceUuid")
    def external_subnet_reference_uuid(self) -> Optional[str]:
        """
        Reference to a subnet. Supported with 2022.x .
        """
        return pulumi.get(self, "external_subnet_reference_uuid")

    @property
    @pulumi.getter(name="vpnConnectionReferenceUuid")
    def vpn_connection_reference_uuid(self) -> Optional[str]:
        """
        Reference to a vpn connection.
        """
        return pulumi.get(self, "vpn_connection_reference_uuid")


@pulumi.output_type
class SubnetCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Optional) Subnet name (Readonly).
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Optional) Subnet name (Readonly).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserAccessControlPolicyReferenceList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class UserCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserDirectoryServiceUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directoryServiceReference":
            suggest = "directory_service_reference"
        elif key == "defaultUserPrincipalName":
            suggest = "default_user_principal_name"
        elif key == "userPrincipalName":
            suggest = "user_principal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserDirectoryServiceUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserDirectoryServiceUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserDirectoryServiceUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 directory_service_reference: 'outputs.UserDirectoryServiceUserDirectoryServiceReference',
                 default_user_principal_name: Optional[str] = None,
                 user_principal_name: Optional[str] = None):
        """
        :param 'UserDirectoryServiceUserDirectoryServiceReferenceArgs' directory_service_reference: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param str user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "directory_service_reference", directory_service_reference)
        if default_user_principal_name is not None:
            pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="directoryServiceReference")
    def directory_service_reference(self) -> 'outputs.UserDirectoryServiceUserDirectoryServiceReference':
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_reference")

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> Optional[str]:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[str]:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class UserDirectoryServiceUserDirectoryServiceReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserIdentityProviderUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityProviderReference":
            suggest = "identity_provider_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityProviderUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityProviderUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityProviderUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_provider_reference: 'outputs.UserIdentityProviderUserIdentityProviderReference',
                 username: Optional[str] = None):
        """
        :param 'UserIdentityProviderUserIdentityProviderReferenceArgs' identity_provider_reference: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param str username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_reference", identity_provider_reference)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReference")
    def identity_provider_reference(self) -> 'outputs.UserIdentityProviderUserIdentityProviderReference':
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_reference")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class UserIdentityProviderUserIdentityProviderReference(dict):
    def __init__(__self__, *,
                 uuid: str,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str uuid: - the UUID(Required).
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "uuid", uuid)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserProjectReferenceList(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineCategory(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: - (Required) The name for the vm.
        :param str value: - value of the key.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the vm.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualMachineDiskList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceReference":
            suggest = "data_source_reference"
        elif key == "deviceProperties":
            suggest = "device_properties"
        elif key == "diskSizeBytes":
            suggest = "disk_size_bytes"
        elif key == "diskSizeMib":
            suggest = "disk_size_mib"
        elif key == "storageConfig":
            suggest = "storage_config"
        elif key == "volumeGroupReference":
            suggest = "volume_group_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineDiskList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineDiskList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineDiskList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_reference: Optional[Mapping[str, str]] = None,
                 device_properties: Optional['outputs.VirtualMachineDiskListDeviceProperties'] = None,
                 disk_size_bytes: Optional[int] = None,
                 disk_size_mib: Optional[int] = None,
                 storage_config: Optional['outputs.VirtualMachineDiskListStorageConfig'] = None,
                 uuid: Optional[str] = None,
                 volume_group_reference: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] data_source_reference: Reference to a data source.
        :param 'VirtualMachineDiskListDevicePropertiesArgs' device_properties: Properties to a device.
        :param int disk_size_bytes: Size of the disk in Bytes.
        :param int disk_size_mib: Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        :param str uuid: - (Optional) The device ID which is used to uniquely identify this particular disk.
        :param Mapping[str, str] volume_group_reference: Reference to a volume group.
               
               The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        """
        if data_source_reference is not None:
            pulumi.set(__self__, "data_source_reference", data_source_reference)
        if device_properties is not None:
            pulumi.set(__self__, "device_properties", device_properties)
        if disk_size_bytes is not None:
            pulumi.set(__self__, "disk_size_bytes", disk_size_bytes)
        if disk_size_mib is not None:
            pulumi.set(__self__, "disk_size_mib", disk_size_mib)
        if storage_config is not None:
            pulumi.set(__self__, "storage_config", storage_config)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if volume_group_reference is not None:
            pulumi.set(__self__, "volume_group_reference", volume_group_reference)

    @property
    @pulumi.getter(name="dataSourceReference")
    def data_source_reference(self) -> Optional[Mapping[str, str]]:
        """
        Reference to a data source.
        """
        return pulumi.get(self, "data_source_reference")

    @property
    @pulumi.getter(name="deviceProperties")
    def device_properties(self) -> Optional['outputs.VirtualMachineDiskListDeviceProperties']:
        """
        Properties to a device.
        """
        return pulumi.get(self, "device_properties")

    @property
    @pulumi.getter(name="diskSizeBytes")
    def disk_size_bytes(self) -> Optional[int]:
        """
        Size of the disk in Bytes.
        """
        return pulumi.get(self, "disk_size_bytes")

    @property
    @pulumi.getter(name="diskSizeMib")
    def disk_size_mib(self) -> Optional[int]:
        """
        Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        """
        return pulumi.get(self, "disk_size_mib")

    @property
    @pulumi.getter(name="storageConfig")
    def storage_config(self) -> Optional['outputs.VirtualMachineDiskListStorageConfig']:
        return pulumi.get(self, "storage_config")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="volumeGroupReference")
    def volume_group_reference(self) -> Optional[Mapping[str, str]]:
        """
        Reference to a volume group.

        The disk_size (the disk size_mib and the disk_size_bytes attributes) is only honored by creating an empty disk. When you are creating from an image, the size is ignored and the disk becomes the size of the image from which it was cloned. In VM creation, you can't set either disk size_mib or disk_size_bytes when you set data_source_reference but, you can update the disk_size after creation (second apply).
        """
        return pulumi.get(self, "volume_group_reference")


@pulumi.output_type
class VirtualMachineDiskListDeviceProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceType":
            suggest = "device_type"
        elif key == "diskAddress":
            suggest = "disk_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineDiskListDeviceProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineDiskListDeviceProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineDiskListDeviceProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_type: Optional[str] = None,
                 disk_address: Optional[Mapping[str, str]] = None):
        """
        :param str device_type: - A Disk type (default: DISK).
        :param Mapping[str, str] disk_address: - Address of disk to boot from.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if disk_address is not None:
            pulumi.set(__self__, "disk_address", disk_address)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        """
        - A Disk type (default: DISK).
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="diskAddress")
    def disk_address(self) -> Optional[Mapping[str, str]]:
        """
        - Address of disk to boot from.
        """
        return pulumi.get(self, "disk_address")


@pulumi.output_type
class VirtualMachineDiskListStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "flashMode":
            suggest = "flash_mode"
        elif key == "storageContainerReferences":
            suggest = "storage_container_references"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineDiskListStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineDiskListStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineDiskListStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flash_mode: Optional[str] = None,
                 storage_container_references: Optional[Sequence['outputs.VirtualMachineDiskListStorageConfigStorageContainerReference']] = None):
        """
        :param str flash_mode: - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        :param Sequence['VirtualMachineDiskListStorageConfigStorageContainerReferenceArgs'] storage_container_references: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
               * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
               * `storage_container_reference.#.kind`: - kind of the container reference
               * `storage_container_reference.#.name`: - name of the container reference
               * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        if flash_mode is not None:
            pulumi.set(__self__, "flash_mode", flash_mode)
        if storage_container_references is not None:
            pulumi.set(__self__, "storage_container_references", storage_container_references)

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> Optional[str]:
        """
        - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        """
        return pulumi.get(self, "flash_mode")

    @property
    @pulumi.getter(name="storageContainerReferences")
    def storage_container_references(self) -> Optional[Sequence['outputs.VirtualMachineDiskListStorageConfigStorageContainerReference']]:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified. Requires Prism Central / AOS 5.17+.
        * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
        * `storage_container_reference.#.kind`: - kind of the container reference
        * `storage_container_reference.#.name`: - name of the container reference
        * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        return pulumi.get(self, "storage_container_references")


@pulumi.output_type
class VirtualMachineDiskListStorageConfigStorageContainerReference(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - (Required) The name for the vm.
        :param str uuid: - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) The name for the vm.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineGpuList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceId":
            suggest = "device_id"
        elif key == "frameBufferSizeMib":
            suggest = "frame_buffer_size_mib"
        elif key == "guestDriverVersion":
            suggest = "guest_driver_version"
        elif key == "numVirtualDisplayHeads":
            suggest = "num_virtual_display_heads"
        elif key == "pciAddress":
            suggest = "pci_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineGpuList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineGpuList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineGpuList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_id: Optional[int] = None,
                 fraction: Optional[int] = None,
                 frame_buffer_size_mib: Optional[int] = None,
                 guest_driver_version: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 num_virtual_display_heads: Optional[int] = None,
                 pci_address: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vendor: Optional[str] = None):
        """
        :param int device_id: - (Computed) The device ID of the GPU.
        :param int fraction: Fraction of the physical GPU assigned.
        :param int frame_buffer_size_mib: - (ReadOnly) GPU frame buffer size in MiB.
        :param str guest_driver_version: - (ReadOnly) Last determined guest driver version.
        :param str mode: - (Optional) The mode of this GPU.
        :param str name: - (ReadOnly) Name of the GPU resource.
        :param int num_virtual_display_heads: - (ReadOnly) Number of supported virtual display heads.
        :param str pci_address: GPU {segment:bus:device:function} (sbdf) address if assigned.
        :param str uuid: - (ReadOnly) UUID of the GPU.
        :param str vendor: - (Optional) The vendor of the GPU.
        """
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if fraction is not None:
            pulumi.set(__self__, "fraction", fraction)
        if frame_buffer_size_mib is not None:
            pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        if guest_driver_version is not None:
            pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_virtual_display_heads is not None:
            pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        if pci_address is not None:
            pulumi.set(__self__, "pci_address", pci_address)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[int]:
        """
        - (Computed) The device ID of the GPU.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> Optional[int]:
        """
        Fraction of the physical GPU assigned.
        """
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> Optional[int]:
        """
        - (ReadOnly) GPU frame buffer size in MiB.
        """
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> Optional[str]:
        """
        - (ReadOnly) Last determined guest driver version.
        """
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        - (Optional) The mode of this GPU.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (ReadOnly) Name of the GPU resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> Optional[int]:
        """
        - (ReadOnly) Number of supported virtual display heads.
        """
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> Optional[str]:
        """
        GPU {segment:bus:device:function} (sbdf) address if assigned.
        """
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - (ReadOnly) UUID of the GPU.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        """
        - (Optional) The vendor of the GPU.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class VirtualMachineNicList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipEndpointLists":
            suggest = "ip_endpoint_lists"
        elif key == "isConnected":
            suggest = "is_connected"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "networkFunctionNicType":
            suggest = "network_function_nic_type"
        elif key == "nicType":
            suggest = "nic_type"
        elif key == "numQueues":
            suggest = "num_queues"
        elif key == "subnetName":
            suggest = "subnet_name"
        elif key == "subnetUuid":
            suggest = "subnet_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineNicList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineNicList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineNicList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_endpoint_lists: Optional[Sequence['outputs.VirtualMachineNicListIpEndpointList']] = None,
                 is_connected: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 model: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 network_function_nic_type: Optional[str] = None,
                 nic_type: Optional[str] = None,
                 num_queues: Optional[int] = None,
                 subnet_name: Optional[str] = None,
                 subnet_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param Sequence['VirtualMachineNicListIpEndpointListArgs'] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param str is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param str mac_address: - The MAC address for the adapter.
        :param str model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param Mapping[str, str] network_function_chain_reference: - The reference to a network_function_chain.
        :param str network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param str nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param int num_queues: - The number of tx/rx queue pairs for this NIC.
        :param str subnet_name: - The name of the subnet reference to.
        :param str subnet_uuid: - The reference to a subnet.
        :param str uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        if ip_endpoint_lists is not None:
            pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_function_nic_type is not None:
            pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        if nic_type is not None:
            pulumi.set(__self__, "nic_type", nic_type)
        if num_queues is not None:
            pulumi.set(__self__, "num_queues", num_queues)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_uuid is not None:
            pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Optional[Sequence['outputs.VirtualMachineNicListIpEndpointList']]:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[str]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> Optional[str]:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> Optional[str]:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> Optional[int]:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[str]:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> Optional[str]:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineNicListIpEndpointList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str ip: - Address string.
        :param str type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualMachineNicListStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "floatingIp":
            suggest = "floating_ip"
        elif key == "ipEndpointLists":
            suggest = "ip_endpoint_lists"
        elif key == "isConnected":
            suggest = "is_connected"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "networkFunctionChainReference":
            suggest = "network_function_chain_reference"
        elif key == "networkFunctionNicType":
            suggest = "network_function_nic_type"
        elif key == "nicType":
            suggest = "nic_type"
        elif key == "numQueues":
            suggest = "num_queues"
        elif key == "subnetName":
            suggest = "subnet_name"
        elif key == "subnetUuid":
            suggest = "subnet_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineNicListStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineNicListStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineNicListStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 floating_ip: Optional[str] = None,
                 ip_endpoint_lists: Optional[Sequence['outputs.VirtualMachineNicListStatusIpEndpointList']] = None,
                 is_connected: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 model: Optional[str] = None,
                 network_function_chain_reference: Optional[Mapping[str, str]] = None,
                 network_function_nic_type: Optional[str] = None,
                 nic_type: Optional[str] = None,
                 num_queues: Optional[int] = None,
                 subnet_name: Optional[str] = None,
                 subnet_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str floating_ip: -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        :param Sequence['VirtualMachineNicListStatusIpEndpointListArgs'] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param str is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param str mac_address: - The MAC address for the adapter.
        :param str model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param Mapping[str, str] network_function_chain_reference: - The reference to a network_function_chain.
        :param str network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param str nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param int num_queues: - The number of tx/rx queue pairs for this NIC.
        :param str subnet_name: - The name of the subnet reference to.
        :param str subnet_uuid: - The reference to a subnet.
        :param str uuid: - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if ip_endpoint_lists is not None:
            pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_function_nic_type is not None:
            pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        if nic_type is not None:
            pulumi.set(__self__, "nic_type", nic_type)
        if num_queues is not None:
            pulumi.set(__self__, "num_queues", num_queues)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_uuid is not None:
            pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[str]:
        """
        -  The Floating IP associated with the vnic. (Only in `nic_list_status`)
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Optional[Sequence['outputs.VirtualMachineNicListStatusIpEndpointList']]:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[str]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[Mapping[str, str]]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> Optional[str]:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> Optional[str]:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> Optional[int]:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[str]:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> Optional[str]:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        - (Optional) The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class VirtualMachineNicListStatusIpEndpointList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str ip: - Address string.
        :param str type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualMachineSerialPortList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isConnected":
            suggest = "is_connected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineSerialPortList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineSerialPortList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineSerialPortList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: Optional[int] = None,
                 is_connected: Optional[bool] = None):
        """
        :param int index: - Index of the serial port (int).
        :param bool is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if is_connected is not None:
            pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        - Index of the serial port (int).
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> Optional[bool]:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")


@pulumi.output_type
class VpcCommonDomainNameServerIpList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        """
        :param str ip: ip address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class VpcExternalSubnetListStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSubnetReference":
            suggest = "external_subnet_reference"
        elif key == "activeGatewayNode":
            suggest = "active_gateway_node"
        elif key == "externalIpLists":
            suggest = "external_ip_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcExternalSubnetListStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcExternalSubnetListStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcExternalSubnetListStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 active_gateway_node: Optional['outputs.VpcExternalSubnetListStatusActiveGatewayNode'] = None,
                 external_ip_lists: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        if active_gateway_node is not None:
            pulumi.set(__self__, "active_gateway_node", active_gateway_node)
        if external_ip_lists is not None:
            pulumi.set(__self__, "external_ip_lists", external_ip_lists)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="activeGatewayNode")
    def active_gateway_node(self) -> Optional['outputs.VpcExternalSubnetListStatusActiveGatewayNode']:
        return pulumi.get(self, "active_gateway_node")

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ip_lists")


@pulumi.output_type
class VpcExternalSubnetListStatusActiveGatewayNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostReference":
            suggest = "host_reference"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcExternalSubnetListStatusActiveGatewayNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcExternalSubnetListStatusActiveGatewayNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcExternalSubnetListStatusActiveGatewayNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_reference: Mapping[str, str],
                 ip_address: Optional[str] = None):
        pulumi.set(__self__, "host_reference", host_reference)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "host_reference")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class VpcExternallyRoutablePrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcExternallyRoutablePrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcExternallyRoutablePrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcExternallyRoutablePrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address.
        :param int prefix_length: prefix length.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length.
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetAccessControlPoliciesEntityResult(dict):
    def __init__(__self__, *,
                 access_control_policy_id: str,
                 api_version: str,
                 categories: Sequence['outputs.GetAccessControlPoliciesEntityCategoryResult'],
                 context_filter_lists: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 role_references: Sequence['outputs.GetAccessControlPoliciesEntityRoleReferenceResult'],
                 state: str,
                 user_group_reference_lists: Sequence['outputs.GetAccessControlPoliciesEntityUserGroupReferenceListResult'],
                 user_reference_lists: Sequence['outputs.GetAccessControlPoliciesEntityUserReferenceListResult']):
        """
        :param str api_version: The version of the API.
        :param Sequence['GetAccessControlPoliciesEntityCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str description: - The description of the Access Control Policy.
        :param Mapping[str, str] metadata: - The Access Control Policy kind metadata.
        :param str name: - the name(Optional).
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param Sequence['GetAccessControlPoliciesEntityRoleReferenceArgs'] role_references: - The reference to a role.
        :param str state: - The state of the Access Control Policy.
        :param Sequence['GetAccessControlPoliciesEntityUserGroupReferenceListArgs'] user_group_reference_lists: - The User group(s) being assigned a given role.
        :param Sequence['GetAccessControlPoliciesEntityUserReferenceListArgs'] user_reference_lists: - The User(s) being assigned a given role.
        """
        pulumi.set(__self__, "access_control_policy_id", access_control_policy_id)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "context_filter_lists", context_filter_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "role_references", role_references)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "user_group_reference_lists", user_group_reference_lists)
        pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="accessControlPolicyId")
    def access_control_policy_id(self) -> str:
        return pulumi.get(self, "access_control_policy_id")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPoliciesEntityCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="contextFilterLists")
    def context_filter_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListResult']:
        return pulumi.get(self, "context_filter_lists")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - The description of the Access Control Policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The Access Control Policy kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="roleReferences")
    def role_references(self) -> Sequence['outputs.GetAccessControlPoliciesEntityRoleReferenceResult']:
        """
        - The reference to a role.
        """
        return pulumi.get(self, "role_references")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the Access Control Policy.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userGroupReferenceLists")
    def user_group_reference_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityUserGroupReferenceListResult']:
        """
        - The User group(s) being assigned a given role.
        """
        return pulumi.get(self, "user_group_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityUserReferenceListResult']:
        """
        - The User(s) being assigned a given role.
        """
        return pulumi.get(self, "user_reference_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListResult(dict):
    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult'],
                 scope_filter_expression_lists: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult']):
        """
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: A list of Entity filter expressions.
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - The device ID which is used to uniquely identify this particular disk.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult']:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult']:
        """
        - The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side_entity_type: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side_entity_type: -  The LHS of the filter expression - the entity type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> str:
        """
        -  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side: -  The LHS of the filter expression - the scope type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        -  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPoliciesEntityRoleReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPoliciesEntityUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPoliciesEntityUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPoliciesMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetAccessControlPolicyCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListResult(dict):
    def __init__(__self__, *,
                 entity_filter_expression_lists: Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult'],
                 scope_filter_expression_lists: Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult']):
        """
        :param Sequence['GetAccessControlPolicyContextFilterListEntityFilterExpressionListArgs'] entity_filter_expression_lists: A list of Entity filter expressions.
        :param Sequence['GetAccessControlPolicyContextFilterListScopeFilterExpressionListArgs'] scope_filter_expression_lists: - The device ID which is used to uniquely identify this particular disk.
        """
        pulumi.set(__self__, "entity_filter_expression_lists", entity_filter_expression_lists)
        pulumi.set(__self__, "scope_filter_expression_lists", scope_filter_expression_lists)

    @property
    @pulumi.getter(name="entityFilterExpressionLists")
    def entity_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult']:
        """
        A list of Entity filter expressions.
        """
        return pulumi.get(self, "entity_filter_expression_lists")

    @property
    @pulumi.getter(name="scopeFilterExpressionLists")
    def scope_filter_expression_lists(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult']:
        """
        - The device ID which is used to uniquely identify this particular disk.
        """
        return pulumi.get(self, "scope_filter_expression_lists")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListEntityFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side_entity_type: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side_entity_type: -  The LHS of the filter expression - the entity type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side_entity_type", left_hand_side_entity_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSideEntityType")
    def left_hand_side_entity_type(self) -> str:
        """
        -  The LHS of the filter expression - the entity type.
        """
        return pulumi.get(self, "left_hand_side_entity_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListScopeFilterExpressionListResult(dict):
    def __init__(__self__, *,
                 left_hand_side: str,
                 operator: str,
                 right_hand_sides: Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult']):
        """
        :param str left_hand_side: -  The LHS of the filter expression - the scope type.
        :param str operator: - The operator in the filter expression.
        :param Sequence['GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideArgs'] right_hand_sides: - The right hand side (RHS) of an scope expression.
        """
        pulumi.set(__self__, "left_hand_side", left_hand_side)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "right_hand_sides", right_hand_sides)

    @property
    @pulumi.getter(name="leftHandSide")
    def left_hand_side(self) -> str:
        """
        -  The LHS of the filter expression - the scope type.
        """
        return pulumi.get(self, "left_hand_side")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        - The operator in the filter expression.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rightHandSides")
    def right_hand_sides(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult']:
        """
        - The right hand side (RHS) of an scope expression.
        """
        return pulumi.get(self, "right_hand_sides")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult'],
                 collection: str,
                 uuid_lists: Sequence[str]):
        """
        :param Sequence['GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryArgs'] categories: - The category values represented as a dictionary of key > list of values.
        :param str collection: -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        :param Sequence[str] uuid_lists: - The explicit list of UUIDs for the given kind.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "uuid_lists", uuid_lists)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult']:
        """
        - The category values represented as a dictionary of key > list of values.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def collection(self) -> str:
        """
        -  A representative term for supported groupings of entities. ALL = All the entities of a given kind.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="uuidLists")
    def uuid_lists(self) -> Sequence[str]:
        """
        - The explicit list of UUIDs for the given kind.
        """
        return pulumi.get(self, "uuid_lists")


@pulumi.output_type
class GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        :param Sequence[str] values: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        - value of the key.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessControlPolicyRoleReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPolicyUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAccessControlPolicyUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAddressGroupIpAddressBlockListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: - (ReadOnly) IP of the address block
        :param int prefix_length: - (ReadOnly) Prefix length of address block in int
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - (ReadOnly) IP of the address block
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        - (ReadOnly) Prefix length of address block in int
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetAddressGroupsEntityResult(dict):
    def __init__(__self__, *,
                 address_groups: Sequence['outputs.GetAddressGroupsEntityAddressGroupResult'],
                 associated_policies_lists: Sequence['outputs.GetAddressGroupsEntityAssociatedPoliciesListResult']):
        """
        :param Sequence['GetAddressGroupsEntityAddressGroupArgs'] address_groups: Information about address_group
        :param Sequence['GetAddressGroupsEntityAssociatedPoliciesListArgs'] associated_policies_lists: List of associated policies to address group
        """
        pulumi.set(__self__, "address_groups", address_groups)
        pulumi.set(__self__, "associated_policies_lists", associated_policies_lists)

    @property
    @pulumi.getter(name="addressGroups")
    def address_groups(self) -> Sequence['outputs.GetAddressGroupsEntityAddressGroupResult']:
        """
        Information about address_group
        """
        return pulumi.get(self, "address_groups")

    @property
    @pulumi.getter(name="associatedPoliciesLists")
    def associated_policies_lists(self) -> Sequence['outputs.GetAddressGroupsEntityAssociatedPoliciesListResult']:
        """
        List of associated policies to address group
        """
        return pulumi.get(self, "associated_policies_lists")


@pulumi.output_type
class GetAddressGroupsEntityAddressGroupResult(dict):
    def __init__(__self__, *,
                 address_group_string: str,
                 ip_address_block_lists: Sequence['outputs.GetAddressGroupsEntityAddressGroupIpAddressBlockListResult'],
                 name: str,
                 description: Optional[str] = None):
        """
        :param str address_group_string: - (ReadOnly) Address Group string
        :param Sequence['GetAddressGroupsEntityAddressGroupIpAddressBlockListArgs'] ip_address_block_lists: - (ReadOnly) list of IP address blocks with their prefix length
        :param str name: - (ReadOnly) Name of associated policy
        :param str description: - (ReadOnly) Description of the address group
        """
        pulumi.set(__self__, "address_group_string", address_group_string)
        pulumi.set(__self__, "ip_address_block_lists", ip_address_block_lists)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="addressGroupString")
    def address_group_string(self) -> str:
        """
        - (ReadOnly) Address Group string
        """
        return pulumi.get(self, "address_group_string")

    @property
    @pulumi.getter(name="ipAddressBlockLists")
    def ip_address_block_lists(self) -> Sequence['outputs.GetAddressGroupsEntityAddressGroupIpAddressBlockListResult']:
        """
        - (ReadOnly) list of IP address blocks with their prefix length
        """
        return pulumi.get(self, "ip_address_block_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (ReadOnly) Name of associated policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        - (ReadOnly) Description of the address group
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetAddressGroupsEntityAddressGroupIpAddressBlockListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: - (ReadOnly) IP of the address block
        :param int prefix_length: - (ReadOnly) Prefix length of address block in int
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - (ReadOnly) IP of the address block
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        - (ReadOnly) Prefix length of address block in int
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetAddressGroupsEntityAssociatedPoliciesListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str name: - (ReadOnly) Name of associated policy
        :param str uuid: - (ReadOnly) UUID of associated policy
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (ReadOnly) Name of associated policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (ReadOnly) UUID of associated policy
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetAddressGroupsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str filter: (Optional) Filter in FIQL Syntax
        :param int length: (Optional) Integer
        :param int offset: (Optional) Integer
        :param str sort_attribute: (Optional) attribute to sort
        :param str sort_order: (Optional) order of sorting
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        (Optional) Filter in FIQL Syntax
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        (Optional) Integer
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        (Optional) Integer
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        """
        (Optional) attribute to sort
        """
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        """
        (Optional) order of sorting
        """
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetAssertHelperCheckResult(dict):
    def __init__(__self__, *,
                 condition: bool,
                 error_message: str):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter
    def condition(self) -> bool:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")


@pulumi.output_type
class GetClusterAuthorizedPublicKeyListResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str name: Represents the name of cluster
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Represents the name of cluster
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterCaCertificateListResult(dict):
    def __init__(__self__, *,
                 ca_name: str,
                 certificate: str):
        pulumi.set(__self__, "ca_name", ca_name)
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter(name="caName")
    def ca_name(self) -> str:
        return pulumi.get(self, "ca_name")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")


@pulumi.output_type
class GetClusterCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClusterHttpProxyListResult(dict):
    def __init__(__self__, *,
                 address: Mapping[str, str],
                 credentials: Mapping[str, str],
                 proxy_type_lists: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "proxy_type_lists", proxy_type_lists)

    @property
    @pulumi.getter
    def address(self) -> Mapping[str, str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def credentials(self) -> Mapping[str, str]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="proxyTypeLists")
    def proxy_type_lists(self) -> Sequence[str]:
        return pulumi.get(self, "proxy_type_lists")


@pulumi.output_type
class GetClusterHttpProxyWhitelistResult(dict):
    def __init__(__self__, *,
                 target: str,
                 target_type: str):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetClusterManagementServerListResult(dict):
    def __init__(__self__, *,
                 drs_enabled: bool,
                 ip: str,
                 status_lists: Sequence[str],
                 type: str):
        pulumi.set(__self__, "drs_enabled", drs_enabled)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status_lists", status_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="drsEnabled")
    def drs_enabled(self) -> bool:
        return pulumi.get(self, "drs_enabled")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Sequence[str]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClusterNodeResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 type: str,
                 version: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetClustersEntityResult(dict):
    def __init__(__self__, *,
                 analysis_vm_efficiency_map: Mapping[str, str],
                 api_version: str,
                 authorized_public_key_lists: Sequence['outputs.GetClustersEntityAuthorizedPublicKeyListResult'],
                 build: Mapping[str, str],
                 ca_certificate_lists: Sequence['outputs.GetClustersEntityCaCertificateListResult'],
                 categories: Sequence['outputs.GetClustersEntityCategoryResult'],
                 certification_signing_info: Mapping[str, str],
                 client_auth: Mapping[str, str],
                 cluster_arch: str,
                 domain_server_credentials: Mapping[str, str],
                 domain_server_name: str,
                 domain_server_nameserver: str,
                 enabled_feature_lists: Sequence[str],
                 encryption_status: str,
                 external_data_services_ip: str,
                 external_ip: str,
                 external_subnet: str,
                 gpu_driver_version: str,
                 http_proxy_lists: Sequence['outputs.GetClustersEntityHttpProxyListResult'],
                 http_proxy_whitelists: Sequence['outputs.GetClustersEntityHttpProxyWhitelistResult'],
                 internal_subnet: str,
                 is_available: bool,
                 management_server_lists: Sequence['outputs.GetClustersEntityManagementServerListResult'],
                 masquerading_ip: str,
                 masquerading_port: int,
                 metadata: Mapping[str, str],
                 name: str,
                 name_server_ip_lists: Sequence[str],
                 nfs_subnet_whitelists: Sequence[str],
                 nodes: Sequence['outputs.GetClustersEntityNodeResult'],
                 ntp_server_ip_lists: Sequence[str],
                 operation_mode: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 service_lists: Sequence[str],
                 smtp_server_address: Mapping[str, str],
                 smtp_server_credentials: Mapping[str, str],
                 smtp_server_email_address: str,
                 smtp_server_proxy_type_lists: Sequence[str],
                 smtp_server_type: str,
                 software_map_ncc: Mapping[str, Any],
                 software_map_nos: Mapping[str, Any],
                 ssl_key_expire_datetime: str,
                 ssl_key_name: str,
                 ssl_key_signing_info: Mapping[str, str],
                 ssl_key_type: str,
                 state: str,
                 supported_information_verbosity: str,
                 timezone: str):
        """
        :param Mapping[str, str] analysis_vm_efficiency_map: - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
        :param str api_version: The API version.
        :param Mapping[str, str] build: - Cluster build details.
        :param Sequence['GetClustersEntityCaCertificateListArgs'] ca_certificate_lists: - Zone name used in value of TZ environment variable.
        :param Sequence['GetClustersEntityCategoryArgs'] categories: - Categories for the image.
        :param Mapping[str, str] certification_signing_info: - Customer information used in Certificate Signing Request for creating digital certificates.
        :param Mapping[str, str] client_auth: - Client authentication config.
        :param str cluster_arch: - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
        :param Mapping[str, str] domain_server_credentials: - Cluster domain credentials.
        :param str domain_server_name: - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
        :param str domain_server_nameserver: -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
        :param Sequence[str] enabled_feature_lists: - Array of enabled features.
        :param str encryption_status: - Cluster encryption status.
        :param str external_data_services_ip: - The cluster IP address that provides external entities access to various cluster data services.
        :param str external_ip: - The local IP of cluster visible externally.
        :param str external_subnet: - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
        :param str gpu_driver_version: - GPU driver version.
        :param Sequence['GetClustersEntityHttpProxyListArgs'] http_proxy_lists: - List of proxies to connect to the service centers.
        :param Sequence['GetClustersEntityHttpProxyWhitelistArgs'] http_proxy_whitelists: - HTTP proxy whitelist.
        :param str internal_subnet: - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
        :param bool is_available: - Indicates if cluster is available to contact. (Readonly)
        :param Sequence['GetClustersEntityManagementServerListArgs'] management_server_lists: - List of cluster management servers. (Readonly)
        :param str masquerading_ip: - The cluster NAT'd or proxy IP which maps to the cluster local IP.
        :param int masquerading_port: - Port used together with masquerading_ip to connect to the cluster.
        :param Mapping[str, str] metadata: - The image kind metadata.
        :param str name: - the key name.
        :param Sequence[str] name_server_ip_lists: - The list of IP addresses of the name servers.
        :param Sequence[str] nfs_subnet_whitelists: - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
        :param Sequence[str] ntp_server_ip_lists: - The list of IP addresses or FQDNs of the NTP servers.
        :param str operation_mode: - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param Sequence[str] service_lists: - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
        :param Mapping[str, str] smtp_server_address: - SMTP Server Address.
        :param Mapping[str, str] smtp_server_credentials: - SMTP Server Credentials.
        :param str smtp_server_email_address: - SMTP Server Email Address.
        :param Sequence[str] smtp_server_proxy_type_lists: - SMTP Server Proxy Type List
        :param str smtp_server_type: - SMTP Server type.
        :param Mapping[str, Any] software_map_ncc: - Map of software on the cluster with software type as the key.
        :param Mapping[str, Any] software_map_nos: - Map of software on the cluster with software type as the key.
        :param str ssl_key_expire_datetime: - UTC date and time in RFC-3339 format when the key expires
        :param Mapping[str, str] ssl_key_signing_info: - Customer information used in Certificate Signing Request for creating digital certificates.
        :param str ssl_key_type: - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
        :param str state: - The state of the cluster entity.
        :param str supported_information_verbosity: - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
        :param str timezone: - Zone name used in value of TZ environment variable.
        """
        pulumi.set(__self__, "analysis_vm_efficiency_map", analysis_vm_efficiency_map)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "authorized_public_key_lists", authorized_public_key_lists)
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "ca_certificate_lists", ca_certificate_lists)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "certification_signing_info", certification_signing_info)
        pulumi.set(__self__, "client_auth", client_auth)
        pulumi.set(__self__, "cluster_arch", cluster_arch)
        pulumi.set(__self__, "domain_server_credentials", domain_server_credentials)
        pulumi.set(__self__, "domain_server_name", domain_server_name)
        pulumi.set(__self__, "domain_server_nameserver", domain_server_nameserver)
        pulumi.set(__self__, "enabled_feature_lists", enabled_feature_lists)
        pulumi.set(__self__, "encryption_status", encryption_status)
        pulumi.set(__self__, "external_data_services_ip", external_data_services_ip)
        pulumi.set(__self__, "external_ip", external_ip)
        pulumi.set(__self__, "external_subnet", external_subnet)
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)
        pulumi.set(__self__, "http_proxy_lists", http_proxy_lists)
        pulumi.set(__self__, "http_proxy_whitelists", http_proxy_whitelists)
        pulumi.set(__self__, "internal_subnet", internal_subnet)
        pulumi.set(__self__, "is_available", is_available)
        pulumi.set(__self__, "management_server_lists", management_server_lists)
        pulumi.set(__self__, "masquerading_ip", masquerading_ip)
        pulumi.set(__self__, "masquerading_port", masquerading_port)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_server_ip_lists", name_server_ip_lists)
        pulumi.set(__self__, "nfs_subnet_whitelists", nfs_subnet_whitelists)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "ntp_server_ip_lists", ntp_server_ip_lists)
        pulumi.set(__self__, "operation_mode", operation_mode)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "service_lists", service_lists)
        pulumi.set(__self__, "smtp_server_address", smtp_server_address)
        pulumi.set(__self__, "smtp_server_credentials", smtp_server_credentials)
        pulumi.set(__self__, "smtp_server_email_address", smtp_server_email_address)
        pulumi.set(__self__, "smtp_server_proxy_type_lists", smtp_server_proxy_type_lists)
        pulumi.set(__self__, "smtp_server_type", smtp_server_type)
        pulumi.set(__self__, "software_map_ncc", software_map_ncc)
        pulumi.set(__self__, "software_map_nos", software_map_nos)
        pulumi.set(__self__, "ssl_key_expire_datetime", ssl_key_expire_datetime)
        pulumi.set(__self__, "ssl_key_name", ssl_key_name)
        pulumi.set(__self__, "ssl_key_signing_info", ssl_key_signing_info)
        pulumi.set(__self__, "ssl_key_type", ssl_key_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "supported_information_verbosity", supported_information_verbosity)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="analysisVmEfficiencyMap")
    def analysis_vm_efficiency_map(self) -> Mapping[str, str]:
        """
        - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
        """
        return pulumi.get(self, "analysis_vm_efficiency_map")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The API version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="authorizedPublicKeyLists")
    def authorized_public_key_lists(self) -> Sequence['outputs.GetClustersEntityAuthorizedPublicKeyListResult']:
        return pulumi.get(self, "authorized_public_key_lists")

    @property
    @pulumi.getter
    def build(self) -> Mapping[str, str]:
        """
        - Cluster build details.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter(name="caCertificateLists")
    def ca_certificate_lists(self) -> Sequence['outputs.GetClustersEntityCaCertificateListResult']:
        """
        - Zone name used in value of TZ environment variable.
        """
        return pulumi.get(self, "ca_certificate_lists")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetClustersEntityCategoryResult']:
        """
        - Categories for the image.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="certificationSigningInfo")
    def certification_signing_info(self) -> Mapping[str, str]:
        """
        - Customer information used in Certificate Signing Request for creating digital certificates.
        """
        return pulumi.get(self, "certification_signing_info")

    @property
    @pulumi.getter(name="clientAuth")
    def client_auth(self) -> Mapping[str, str]:
        """
        - Client authentication config.
        """
        return pulumi.get(self, "client_auth")

    @property
    @pulumi.getter(name="clusterArch")
    def cluster_arch(self) -> str:
        """
        - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
        """
        return pulumi.get(self, "cluster_arch")

    @property
    @pulumi.getter(name="domainServerCredentials")
    def domain_server_credentials(self) -> Mapping[str, str]:
        """
        - Cluster domain credentials.
        """
        return pulumi.get(self, "domain_server_credentials")

    @property
    @pulumi.getter(name="domainServerName")
    def domain_server_name(self) -> str:
        """
        - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
        """
        return pulumi.get(self, "domain_server_name")

    @property
    @pulumi.getter(name="domainServerNameserver")
    def domain_server_nameserver(self) -> str:
        """
        -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
        """
        return pulumi.get(self, "domain_server_nameserver")

    @property
    @pulumi.getter(name="enabledFeatureLists")
    def enabled_feature_lists(self) -> Sequence[str]:
        """
        - Array of enabled features.
        """
        return pulumi.get(self, "enabled_feature_lists")

    @property
    @pulumi.getter(name="encryptionStatus")
    def encryption_status(self) -> str:
        """
        - Cluster encryption status.
        """
        return pulumi.get(self, "encryption_status")

    @property
    @pulumi.getter(name="externalDataServicesIp")
    def external_data_services_ip(self) -> str:
        """
        - The cluster IP address that provides external entities access to various cluster data services.
        """
        return pulumi.get(self, "external_data_services_ip")

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> str:
        """
        - The local IP of cluster visible externally.
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="externalSubnet")
    def external_subnet(self) -> str:
        """
        - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
        """
        return pulumi.get(self, "external_subnet")

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> str:
        """
        - GPU driver version.
        """
        return pulumi.get(self, "gpu_driver_version")

    @property
    @pulumi.getter(name="httpProxyLists")
    def http_proxy_lists(self) -> Sequence['outputs.GetClustersEntityHttpProxyListResult']:
        """
        - List of proxies to connect to the service centers.
        """
        return pulumi.get(self, "http_proxy_lists")

    @property
    @pulumi.getter(name="httpProxyWhitelists")
    def http_proxy_whitelists(self) -> Sequence['outputs.GetClustersEntityHttpProxyWhitelistResult']:
        """
        - HTTP proxy whitelist.
        """
        return pulumi.get(self, "http_proxy_whitelists")

    @property
    @pulumi.getter(name="internalSubnet")
    def internal_subnet(self) -> str:
        """
        - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
        """
        return pulumi.get(self, "internal_subnet")

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> bool:
        """
        - Indicates if cluster is available to contact. (Readonly)
        """
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter(name="managementServerLists")
    def management_server_lists(self) -> Sequence['outputs.GetClustersEntityManagementServerListResult']:
        """
        - List of cluster management servers. (Readonly)
        """
        return pulumi.get(self, "management_server_lists")

    @property
    @pulumi.getter(name="masqueradingIp")
    def masquerading_ip(self) -> str:
        """
        - The cluster NAT'd or proxy IP which maps to the cluster local IP.
        """
        return pulumi.get(self, "masquerading_ip")

    @property
    @pulumi.getter(name="masqueradingPort")
    def masquerading_port(self) -> int:
        """
        - Port used together with masquerading_ip to connect to the cluster.
        """
        return pulumi.get(self, "masquerading_port")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The image kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameServerIpLists")
    def name_server_ip_lists(self) -> Sequence[str]:
        """
        - The list of IP addresses of the name servers.
        """
        return pulumi.get(self, "name_server_ip_lists")

    @property
    @pulumi.getter(name="nfsSubnetWhitelists")
    def nfs_subnet_whitelists(self) -> Sequence[str]:
        """
        - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
        """
        return pulumi.get(self, "nfs_subnet_whitelists")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersEntityNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="ntpServerIpLists")
    def ntp_server_ip_lists(self) -> Sequence[str]:
        """
        - The list of IP addresses or FQDNs of the NTP servers.
        """
        return pulumi.get(self, "ntp_server_ip_lists")

    @property
    @pulumi.getter(name="operationMode")
    def operation_mode(self) -> str:
        """
        - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
        """
        return pulumi.get(self, "operation_mode")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence[str]:
        """
        - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
        """
        return pulumi.get(self, "service_lists")

    @property
    @pulumi.getter(name="smtpServerAddress")
    def smtp_server_address(self) -> Mapping[str, str]:
        """
        - SMTP Server Address.
        """
        return pulumi.get(self, "smtp_server_address")

    @property
    @pulumi.getter(name="smtpServerCredentials")
    def smtp_server_credentials(self) -> Mapping[str, str]:
        """
        - SMTP Server Credentials.
        """
        return pulumi.get(self, "smtp_server_credentials")

    @property
    @pulumi.getter(name="smtpServerEmailAddress")
    def smtp_server_email_address(self) -> str:
        """
        - SMTP Server Email Address.
        """
        return pulumi.get(self, "smtp_server_email_address")

    @property
    @pulumi.getter(name="smtpServerProxyTypeLists")
    def smtp_server_proxy_type_lists(self) -> Sequence[str]:
        """
        - SMTP Server Proxy Type List
        """
        return pulumi.get(self, "smtp_server_proxy_type_lists")

    @property
    @pulumi.getter(name="smtpServerType")
    def smtp_server_type(self) -> str:
        """
        - SMTP Server type.
        """
        return pulumi.get(self, "smtp_server_type")

    @property
    @pulumi.getter(name="softwareMapNcc")
    def software_map_ncc(self) -> Mapping[str, Any]:
        """
        - Map of software on the cluster with software type as the key.
        """
        return pulumi.get(self, "software_map_ncc")

    @property
    @pulumi.getter(name="softwareMapNos")
    def software_map_nos(self) -> Mapping[str, Any]:
        """
        - Map of software on the cluster with software type as the key.
        """
        return pulumi.get(self, "software_map_nos")

    @property
    @pulumi.getter(name="sslKeyExpireDatetime")
    def ssl_key_expire_datetime(self) -> str:
        """
        - UTC date and time in RFC-3339 format when the key expires
        """
        return pulumi.get(self, "ssl_key_expire_datetime")

    @property
    @pulumi.getter(name="sslKeyName")
    def ssl_key_name(self) -> str:
        return pulumi.get(self, "ssl_key_name")

    @property
    @pulumi.getter(name="sslKeySigningInfo")
    def ssl_key_signing_info(self) -> Mapping[str, str]:
        """
        - Customer information used in Certificate Signing Request for creating digital certificates.
        """
        return pulumi.get(self, "ssl_key_signing_info")

    @property
    @pulumi.getter(name="sslKeyType")
    def ssl_key_type(self) -> str:
        """
        - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
        """
        return pulumi.get(self, "ssl_key_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the cluster entity.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedInformationVerbosity")
    def supported_information_verbosity(self) -> str:
        """
        - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
        """
        return pulumi.get(self, "supported_information_verbosity")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        - Zone name used in value of TZ environment variable.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetClustersEntityAuthorizedPublicKeyListResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str name: - the key name.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClustersEntityCaCertificateListResult(dict):
    def __init__(__self__, *,
                 ca_name: str,
                 certificate: str):
        pulumi.set(__self__, "ca_name", ca_name)
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter(name="caName")
    def ca_name(self) -> str:
        return pulumi.get(self, "ca_name")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")


@pulumi.output_type
class GetClustersEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClustersEntityHttpProxyListResult(dict):
    def __init__(__self__, *,
                 address: Mapping[str, str],
                 credentials: Mapping[str, str],
                 proxy_type_lists: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "proxy_type_lists", proxy_type_lists)

    @property
    @pulumi.getter
    def address(self) -> Mapping[str, str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def credentials(self) -> Mapping[str, str]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="proxyTypeLists")
    def proxy_type_lists(self) -> Sequence[str]:
        return pulumi.get(self, "proxy_type_lists")


@pulumi.output_type
class GetClustersEntityHttpProxyWhitelistResult(dict):
    def __init__(__self__, *,
                 target: str,
                 target_type: str):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetClustersEntityManagementServerListResult(dict):
    def __init__(__self__, *,
                 drs_enabled: bool,
                 ip: str,
                 status_lists: Sequence[str],
                 type: str):
        pulumi.set(__self__, "drs_enabled", drs_enabled)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "status_lists", status_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="drsEnabled")
    def drs_enabled(self) -> bool:
        return pulumi.get(self, "drs_enabled")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Sequence[str]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersEntityNodeResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 type: str,
                 version: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFloatingIpSpecResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetFloatingIpSpecResourceResult']):
        """
        :param Sequence['GetFloatingIpSpecResourceArgs'] resources: Floating IP allocation status.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpSpecResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetFloatingIpSpecResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetFloatingIpStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetFloatingIpStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetFloatingIpStatusExecutionContextArgs'] execution_contexts: Execution Context of Floating IP.
        :param str name: - the name.
        :param Sequence['GetFloatingIpStatusResourceArgs'] resources: Floating IP allocation status.
        :param str state: The state of the floating_ip.
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetFloatingIpStatusExecutionContextResult']:
        """
        Execution Context of Floating IP.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpStatusResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the floating_ip.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetFloatingIpStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetFloatingIpStatusResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 floating_ip: str,
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param str floating_ip: Private IP with which the floating IP is associated.
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> str:
        """
        Private IP with which the floating IP is associated.
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpsEntityResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, str],
                 specs: Sequence['outputs.GetFloatingIpsEntitySpecResult'],
                 statuses: Sequence['outputs.GetFloatingIpsEntityStatusResult']):
        """
        :param Mapping[str, str] metadata: - The floating_ip kind metadata.
        :param Sequence['GetFloatingIpsEntitySpecArgs'] specs: Floating IP spec
        :param Sequence['GetFloatingIpsEntityStatusArgs'] statuses: Floating IP output status
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The floating_ip kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetFloatingIpsEntitySpecResult']:
        """
        Floating IP spec
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetFloatingIpsEntityStatusResult']:
        """
        Floating IP output status
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetFloatingIpsEntitySpecResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetFloatingIpsEntitySpecResourceResult']):
        """
        :param Sequence['GetFloatingIpsEntitySpecResourceArgs'] resources: Floating IP allocation status.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpsEntitySpecResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetFloatingIpsEntitySpecResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpsEntityStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetFloatingIpsEntityStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetFloatingIpsEntityStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetFloatingIpsEntityStatusExecutionContextArgs'] execution_contexts: Execution Context of Floating IP.
        :param str name: - the name.
        :param Sequence['GetFloatingIpsEntityStatusResourceArgs'] resources: Floating IP allocation status.
        :param str state: The state of the floating_ip.
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetFloatingIpsEntityStatusExecutionContextResult']:
        """
        Execution Context of Floating IP.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFloatingIpsEntityStatusResourceResult']:
        """
        Floating IP allocation status.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the floating_ip.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetFloatingIpsEntityStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetFloatingIpsEntityStatusResourceResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str],
                 floating_ip: str,
                 vm_nic_reference: Mapping[str, str],
                 vpc_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param str floating_ip: Private IP with which the floating IP is associated.
        :param Mapping[str, str] vm_nic_reference: The reference to a vm_nic
        :param Mapping[str, str] vpc_reference: The reference to a vpc
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "vm_nic_reference", vm_nic_reference)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> str:
        """
        Private IP with which the floating IP is associated.
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="vmNicReference")
    def vm_nic_reference(self) -> Mapping[str, str]:
        """
        The reference to a vm_nic
        """
        return pulumi.get(self, "vm_nic_reference")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpc
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetFloatingIpsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationCentralClusterDetailsClusterStatusResult(dict):
    def __init__(__self__, *,
                 aggregate_percent_complete: float,
                 cluster_creation_started: bool,
                 cluster_progress_details: Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult'],
                 current_foundation_ip: str,
                 foundation_session_id: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 node_progress_details: Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult']):
        pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> float:
        return pulumi.get(self, "aggregate_percent_complete")

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> bool:
        return pulumi.get(self, "cluster_creation_started")

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult']:
        return pulumi.get(self, "cluster_progress_details")

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> str:
        return pulumi.get(self, "current_foundation_ip")

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> str:
        return pulumi.get(self, "foundation_session_id")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult']:
        return pulumi.get(self, "node_progress_details")


@pulumi.output_type
class GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailResult(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailResult(dict):
    def __init__(__self__, *,
                 imaged_node_uuid: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralClusterDetailsCommonNetworkSettingsResult(dict):
    def __init__(__self__, *,
                 cvm_dns_servers: Sequence[str],
                 cvm_ntp_servers: Sequence[str],
                 hypervisor_dns_servers: Sequence[str],
                 hypervisor_ntp_servers: Sequence[str]):
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "hypervisor_dns_servers")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "hypervisor_ntp_servers")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigResult(dict):
    def __init__(__self__, *,
                 blocks: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult'],
                 clusters: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult'],
                 cvm_gateway: str,
                 cvm_netmask: str,
                 dns_servers: str,
                 hyperv_product_key: str,
                 hyperv_sku: str,
                 hypervisor_gateway: str,
                 hypervisor_iso_url: Mapping[str, str],
                 hypervisor_isos: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult'],
                 hypervisor_netmask: str,
                 ipmi_gateway: str,
                 ipmi_netmask: str,
                 nos_package_urls: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult']):
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "clusters", clusters)
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult']:
        return pulumi.get(self, "blocks")

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult']:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> str:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> str:
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> str:
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Mapping[str, str]:
        return pulumi.get(self, "hypervisor_iso_url")

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult']:
        return pulumi.get(self, "hypervisor_isos")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult']:
        return pulumi.get(self, "nos_package_urls")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigBlockResult(dict):
    def __init__(__self__, *,
                 block_id: str,
                 nodes: Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult']):
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> str:
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult']:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigBlockNodeResult(dict):
    def __init__(__self__, *,
                 cvm_ip: str,
                 cvm_vlan_id: int,
                 fc_imaged_node_uuid: str,
                 hardware_attributes_override: Mapping[str, str],
                 hypervisor: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 image_now: bool,
                 ipmi_ip: str,
                 ipv6_address: str,
                 node_position: str,
                 node_serial: str):
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "image_now", image_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> int:
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> str:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Mapping[str, str]:
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> bool:
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigClusterResult(dict):
    def __init__(__self__, *,
                 cluster_external_ip: str,
                 cluster_init_now: bool,
                 cluster_init_successful: bool,
                 cluster_members: Sequence[str],
                 cluster_name: str,
                 cvm_dns_servers: str,
                 cvm_ntp_servers: str,
                 redundancy_factor: int,
                 timezone: str):
        pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> str:
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> bool:
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> bool:
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> str:
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> str:
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIsoResult(dict):
    def __init__(__self__, *,
                 hypervisor_type: str,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrlResult(dict):
    def __init__(__self__, *,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralImagedClustersListFiltersResult(dict):
    def __init__(__self__, *,
                 archived: Optional[bool] = None):
        if archived is not None:
            pulumi.set(__self__, "archived", archived)

    @property
    @pulumi.getter
    def archived(self) -> Optional[bool]:
        return pulumi.get(self, "archived")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterResult(dict):
    def __init__(__self__, *,
                 archived: bool,
                 cluster_external_ip: str,
                 cluster_name: str,
                 cluster_size: int,
                 cluster_status: 'outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult',
                 common_network_settings: 'outputs.GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult',
                 created_timestamp: str,
                 current_time: str,
                 destroyed: bool,
                 foundation_init_configs: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult'],
                 foundation_init_node_uuid: str,
                 imaged_cluster_uuid: str,
                 imaged_node_uuid_lists: Sequence[str],
                 storage_node_count: int,
                 workflow_type: str,
                 redundancy_factor: Optional[int] = None):
        pulumi.set(__self__, "archived", archived)
        pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_size", cluster_size)
        pulumi.set(__self__, "cluster_status", cluster_status)
        pulumi.set(__self__, "common_network_settings", common_network_settings)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "destroyed", destroyed)
        pulumi.set(__self__, "foundation_init_configs", foundation_init_configs)
        pulumi.set(__self__, "foundation_init_node_uuid", foundation_init_node_uuid)
        pulumi.set(__self__, "imaged_cluster_uuid", imaged_cluster_uuid)
        pulumi.set(__self__, "imaged_node_uuid_lists", imaged_node_uuid_lists)
        pulumi.set(__self__, "storage_node_count", storage_node_count)
        pulumi.set(__self__, "workflow_type", workflow_type)
        if redundancy_factor is not None:
            pulumi.set(__self__, "redundancy_factor", redundancy_factor)

    @property
    @pulumi.getter
    def archived(self) -> bool:
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> str:
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> int:
        return pulumi.get(self, "cluster_size")

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> 'outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult':
        return pulumi.get(self, "cluster_status")

    @property
    @pulumi.getter(name="commonNetworkSettings")
    def common_network_settings(self) -> 'outputs.GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult':
        return pulumi.get(self, "common_network_settings")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter
    def destroyed(self) -> bool:
        return pulumi.get(self, "destroyed")

    @property
    @pulumi.getter(name="foundationInitConfigs")
    def foundation_init_configs(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult']:
        return pulumi.get(self, "foundation_init_configs")

    @property
    @pulumi.getter(name="foundationInitNodeUuid")
    def foundation_init_node_uuid(self) -> str:
        return pulumi.get(self, "foundation_init_node_uuid")

    @property
    @pulumi.getter(name="imagedClusterUuid")
    def imaged_cluster_uuid(self) -> str:
        return pulumi.get(self, "imaged_cluster_uuid")

    @property
    @pulumi.getter(name="imagedNodeUuidLists")
    def imaged_node_uuid_lists(self) -> Sequence[str]:
        return pulumi.get(self, "imaged_node_uuid_lists")

    @property
    @pulumi.getter(name="storageNodeCount")
    def storage_node_count(self) -> int:
        return pulumi.get(self, "storage_node_count")

    @property
    @pulumi.getter(name="workflowType")
    def workflow_type(self) -> str:
        return pulumi.get(self, "workflow_type")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> Optional[int]:
        return pulumi.get(self, "redundancy_factor")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterClusterStatusResult(dict):
    def __init__(__self__, *,
                 aggregate_percent_complete: float,
                 cluster_creation_started: bool,
                 cluster_progress_details: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult'],
                 current_foundation_ip: str,
                 foundation_session_id: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 node_progress_details: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult']):
        pulumi.set(__self__, "aggregate_percent_complete", aggregate_percent_complete)
        pulumi.set(__self__, "cluster_creation_started", cluster_creation_started)
        pulumi.set(__self__, "cluster_progress_details", cluster_progress_details)
        pulumi.set(__self__, "current_foundation_ip", current_foundation_ip)
        pulumi.set(__self__, "foundation_session_id", foundation_session_id)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "node_progress_details", node_progress_details)

    @property
    @pulumi.getter(name="aggregatePercentComplete")
    def aggregate_percent_complete(self) -> float:
        return pulumi.get(self, "aggregate_percent_complete")

    @property
    @pulumi.getter(name="clusterCreationStarted")
    def cluster_creation_started(self) -> bool:
        return pulumi.get(self, "cluster_creation_started")

    @property
    @pulumi.getter(name="clusterProgressDetails")
    def cluster_progress_details(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult']:
        return pulumi.get(self, "cluster_progress_details")

    @property
    @pulumi.getter(name="currentFoundationIp")
    def current_foundation_ip(self) -> str:
        return pulumi.get(self, "current_foundation_ip")

    @property
    @pulumi.getter(name="foundationSessionId")
    def foundation_session_id(self) -> str:
        return pulumi.get(self, "foundation_session_id")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="nodeProgressDetails")
    def node_progress_details(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult']:
        return pulumi.get(self, "node_progress_details")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetailResult(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetailResult(dict):
    def __init__(__self__, *,
                 imaged_node_uuid: str,
                 imaging_stopped: bool,
                 intent_picked_up: bool,
                 message_lists: Sequence[str],
                 percent_complete: float,
                 status: str):
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "imaging_stopped", imaging_stopped)
        pulumi.set(__self__, "intent_picked_up", intent_picked_up)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="imagingStopped")
    def imaging_stopped(self) -> bool:
        return pulumi.get(self, "imaging_stopped")

    @property
    @pulumi.getter(name="intentPickedUp")
    def intent_picked_up(self) -> bool:
        return pulumi.get(self, "intent_picked_up")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence[str]:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSettingsResult(dict):
    def __init__(__self__, *,
                 cvm_dns_servers: Sequence[str],
                 cvm_ntp_servers: Sequence[str],
                 hypervisor_dns_servers: Sequence[str],
                 hypervisor_ntp_servers: Sequence[str]):
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "hypervisor_dns_servers", hypervisor_dns_servers)
        pulumi.set(__self__, "hypervisor_ntp_servers", hypervisor_ntp_servers)

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="hypervisorDnsServers")
    def hypervisor_dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "hypervisor_dns_servers")

    @property
    @pulumi.getter(name="hypervisorNtpServers")
    def hypervisor_ntp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "hypervisor_ntp_servers")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigResult(dict):
    def __init__(__self__, *,
                 blocks: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult'],
                 clusters: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult'],
                 cvm_gateway: str,
                 cvm_netmask: str,
                 dns_servers: str,
                 hyperv_product_key: str,
                 hyperv_sku: str,
                 hypervisor_gateway: str,
                 hypervisor_iso_url: Mapping[str, str],
                 hypervisor_isos: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult'],
                 hypervisor_netmask: str,
                 ipmi_gateway: str,
                 ipmi_netmask: str,
                 nos_package_urls: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult']):
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "clusters", clusters)
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "hyperv_product_key", hyperv_product_key)
        pulumi.set(__self__, "hyperv_sku", hyperv_sku)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_iso_url", hypervisor_iso_url)
        pulumi.set(__self__, "hypervisor_isos", hypervisor_isos)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "nos_package_urls", nos_package_urls)

    @property
    @pulumi.getter
    def blocks(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult']:
        return pulumi.get(self, "blocks")

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult']:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> str:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="hypervProductKey")
    def hyperv_product_key(self) -> str:
        return pulumi.get(self, "hyperv_product_key")

    @property
    @pulumi.getter(name="hypervSku")
    def hyperv_sku(self) -> str:
        return pulumi.get(self, "hyperv_sku")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorIsoUrl")
    def hypervisor_iso_url(self) -> Mapping[str, str]:
        return pulumi.get(self, "hypervisor_iso_url")

    @property
    @pulumi.getter(name="hypervisorIsos")
    def hypervisor_isos(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult']:
        return pulumi.get(self, "hypervisor_isos")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="nosPackageUrls")
    def nos_package_urls(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult']:
        return pulumi.get(self, "nos_package_urls")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockResult(dict):
    def __init__(__self__, *,
                 block_id: str,
                 nodes: Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult']):
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> str:
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult']:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNodeResult(dict):
    def __init__(__self__, *,
                 cvm_ip: str,
                 cvm_vlan_id: int,
                 fc_imaged_node_uuid: str,
                 hardware_attributes_override: Mapping[str, str],
                 hypervisor: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 image_now: bool,
                 ipmi_ip: str,
                 ipv6_address: str,
                 node_position: str,
                 node_serial: str):
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "fc_imaged_node_uuid", fc_imaged_node_uuid)
        pulumi.set(__self__, "hardware_attributes_override", hardware_attributes_override)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "image_now", image_now)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> int:
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="fcImagedNodeUuid")
    def fc_imaged_node_uuid(self) -> str:
        return pulumi.get(self, "fc_imaged_node_uuid")

    @property
    @pulumi.getter(name="hardwareAttributesOverride")
    def hardware_attributes_override(self) -> Mapping[str, str]:
        return pulumi.get(self, "hardware_attributes_override")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="imageNow")
    def image_now(self) -> bool:
        return pulumi.get(self, "image_now")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigClusterResult(dict):
    def __init__(__self__, *,
                 cluster_external_ip: str,
                 cluster_init_now: bool,
                 cluster_init_successful: bool,
                 cluster_members: Sequence[str],
                 cluster_name: str,
                 cvm_dns_servers: str,
                 cvm_ntp_servers: str,
                 redundancy_factor: int,
                 timezone: str):
        pulumi.set(__self__, "cluster_external_ip", cluster_external_ip)
        pulumi.set(__self__, "cluster_init_now", cluster_init_now)
        pulumi.set(__self__, "cluster_init_successful", cluster_init_successful)
        pulumi.set(__self__, "cluster_members", cluster_members)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cvm_dns_servers", cvm_dns_servers)
        pulumi.set(__self__, "cvm_ntp_servers", cvm_ntp_servers)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="clusterExternalIp")
    def cluster_external_ip(self) -> str:
        return pulumi.get(self, "cluster_external_ip")

    @property
    @pulumi.getter(name="clusterInitNow")
    def cluster_init_now(self) -> bool:
        return pulumi.get(self, "cluster_init_now")

    @property
    @pulumi.getter(name="clusterInitSuccessful")
    def cluster_init_successful(self) -> bool:
        return pulumi.get(self, "cluster_init_successful")

    @property
    @pulumi.getter(name="clusterMembers")
    def cluster_members(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_members")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cvmDnsServers")
    def cvm_dns_servers(self) -> str:
        return pulumi.get(self, "cvm_dns_servers")

    @property
    @pulumi.getter(name="cvmNtpServers")
    def cvm_ntp_servers(self) -> str:
        return pulumi.get(self, "cvm_ntp_servers")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIsoResult(dict):
    def __init__(__self__, *,
                 hypervisor_type: str,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrlResult(dict):
    def __init__(__self__, *,
                 sha256sum: str,
                 url: str):
        pulumi.set(__self__, "sha256sum", sha256sum)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha256sum(self) -> str:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFoundationCentralImagedClustersListMetadataResult(dict):
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationCentralImagedNodesListFiltersResult(dict):
    def __init__(__self__, *,
                 node_state: Optional[str] = None):
        if node_state is not None:
            pulumi.set(__self__, "node_state", node_state)

    @property
    @pulumi.getter(name="nodeState")
    def node_state(self) -> Optional[str]:
        return pulumi.get(self, "node_state")


@pulumi.output_type
class GetFoundationCentralImagedNodesListImagedNodeResult(dict):
    def __init__(__self__, *,
                 aos_version: str,
                 api_key_uuid: str,
                 available: bool,
                 block_serial: str,
                 created_timestamp: str,
                 current_time: str,
                 cvm_gateway: str,
                 cvm_ip: str,
                 cvm_ipv6: str,
                 cvm_netmask: str,
                 cvm_up: bool,
                 cvm_uuid: str,
                 cvm_vlan_id: int,
                 foundation_version: str,
                 hardware_attributes: Mapping[str, Any],
                 hypervisor_gateway: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 hypervisor_netmask: str,
                 hypervisor_type: str,
                 hypervisor_version: str,
                 imaged_cluster_uuid: str,
                 imaged_node_uuid: str,
                 ipmi_gateway: str,
                 ipmi_ip: str,
                 ipmi_netmask: str,
                 ipv6_interface: str,
                 latest_hb_ts_lists: Sequence[str],
                 model: str,
                 node_position: str,
                 node_serial: str,
                 node_state: str,
                 node_type: str,
                 object_version: int,
                 supported_features: Sequence[str]):
        pulumi.set(__self__, "aos_version", aos_version)
        pulumi.set(__self__, "api_key_uuid", api_key_uuid)
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "block_serial", block_serial)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_ipv6", cvm_ipv6)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "cvm_up", cvm_up)
        pulumi.set(__self__, "cvm_uuid", cvm_uuid)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "foundation_version", foundation_version)
        pulumi.set(__self__, "hardware_attributes", hardware_attributes)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        pulumi.set(__self__, "hypervisor_version", hypervisor_version)
        pulumi.set(__self__, "imaged_cluster_uuid", imaged_cluster_uuid)
        pulumi.set(__self__, "imaged_node_uuid", imaged_node_uuid)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "ipv6_interface", ipv6_interface)
        pulumi.set(__self__, "latest_hb_ts_lists", latest_hb_ts_lists)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)
        pulumi.set(__self__, "node_state", node_state)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "supported_features", supported_features)

    @property
    @pulumi.getter(name="aosVersion")
    def aos_version(self) -> str:
        return pulumi.get(self, "aos_version")

    @property
    @pulumi.getter(name="apiKeyUuid")
    def api_key_uuid(self) -> str:
        return pulumi.get(self, "api_key_uuid")

    @property
    @pulumi.getter
    def available(self) -> bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter(name="blockSerial")
    def block_serial(self) -> str:
        return pulumi.get(self, "block_serial")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmIpv6")
    def cvm_ipv6(self) -> str:
        return pulumi.get(self, "cvm_ipv6")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="cvmUp")
    def cvm_up(self) -> bool:
        return pulumi.get(self, "cvm_up")

    @property
    @pulumi.getter(name="cvmUuid")
    def cvm_uuid(self) -> str:
        return pulumi.get(self, "cvm_uuid")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> int:
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter(name="foundationVersion")
    def foundation_version(self) -> str:
        return pulumi.get(self, "foundation_version")

    @property
    @pulumi.getter(name="hardwareAttributes")
    def hardware_attributes(self) -> Mapping[str, Any]:
        return pulumi.get(self, "hardware_attributes")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> str:
        return pulumi.get(self, "hypervisor_type")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> str:
        return pulumi.get(self, "hypervisor_version")

    @property
    @pulumi.getter(name="imagedClusterUuid")
    def imaged_cluster_uuid(self) -> str:
        return pulumi.get(self, "imaged_cluster_uuid")

    @property
    @pulumi.getter(name="imagedNodeUuid")
    def imaged_node_uuid(self) -> str:
        return pulumi.get(self, "imaged_node_uuid")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="ipv6Interface")
    def ipv6_interface(self) -> str:
        return pulumi.get(self, "ipv6_interface")

    @property
    @pulumi.getter(name="latestHbTsLists")
    def latest_hb_ts_lists(self) -> Sequence[str]:
        return pulumi.get(self, "latest_hb_ts_lists")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        return pulumi.get(self, "node_serial")

    @property
    @pulumi.getter(name="nodeState")
    def node_state(self) -> str:
        return pulumi.get(self, "node_state")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="supportedFeatures")
    def supported_features(self) -> Sequence[str]:
        return pulumi.get(self, "supported_features")


@pulumi.output_type
class GetFoundationCentralImagedNodesListMetadataResult(dict):
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationCentralListApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 api_key: str,
                 created_timestamp: str,
                 current_time: str,
                 key_uuid: str):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "key_uuid", key_uuid)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter(name="keyUuid")
    def key_uuid(self) -> str:
        return pulumi.get(self, "key_uuid")


@pulumi.output_type
class GetFoundationCentralListApiKeysMetadataResult(dict):
    def __init__(__self__, *,
                 length: int,
                 offset: int,
                 total_matches: int):
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetFoundationDiscoverNodesEntityResult(dict):
    def __init__(__self__, *,
                 block_id: str,
                 chassis_n: int,
                 model: str,
                 nodes: Sequence['outputs.GetFoundationDiscoverNodesEntityNodeResult']):
        """
        :param str block_id: Chassis serial number.
        :param int chassis_n: ID number of the block.
        :param str model: Model name of the node.
        :param Sequence['GetFoundationDiscoverNodesEntityNodeArgs'] nodes: Node level properties.
        """
        pulumi.set(__self__, "block_id", block_id)
        pulumi.set(__self__, "chassis_n", chassis_n)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="blockId")
    def block_id(self) -> str:
        """
        Chassis serial number.
        """
        return pulumi.get(self, "block_id")

    @property
    @pulumi.getter(name="chassisN")
    def chassis_n(self) -> int:
        """
        ID number of the block.
        """
        return pulumi.get(self, "chassis_n")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model name of the node.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetFoundationDiscoverNodesEntityNodeResult']:
        """
        Node level properties.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetFoundationDiscoverNodesEntityNodeResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 configured: bool,
                 current_cvm_vlan_tag: str,
                 current_network_interface: str,
                 foundation_version: str,
                 hypervisor: str,
                 hypervisor_version: str,
                 ipv6_address: str,
                 model: str,
                 node_position: str,
                 node_serial: str,
                 node_uuid: str,
                 nos_version: str,
                 svm_ip: str):
        """
        :param str cluster_id: ID of the cluster the node is part of.
        :param bool configured: Whether the node is configured.
        :param str current_cvm_vlan_tag: vlan tag of cvm.
        :param str current_network_interface: Current network interface of the node.
        :param str foundation_version: Version of foundation.
        :param str hypervisor: Type of hypervisor installed on the node.
        :param str hypervisor_version: Version of hypervisor installed.
        :param str ipv6_address: IPV6 address of the node.
        :param str model: Model name of the node.
        :param str node_position: Position of the node in the block.
        :param str node_serial: Node serial of the node.
        :param str node_uuid: UUID of the node.
        :param str nos_version: Version of NOS installed on the node.
        :param str svm_ip: IP address of CVM.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "configured", configured)
        pulumi.set(__self__, "current_cvm_vlan_tag", current_cvm_vlan_tag)
        pulumi.set(__self__, "current_network_interface", current_network_interface)
        pulumi.set(__self__, "foundation_version", foundation_version)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "hypervisor_version", hypervisor_version)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "node_position", node_position)
        pulumi.set(__self__, "node_serial", node_serial)
        pulumi.set(__self__, "node_uuid", node_uuid)
        pulumi.set(__self__, "nos_version", nos_version)
        pulumi.set(__self__, "svm_ip", svm_ip)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        ID of the cluster the node is part of.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def configured(self) -> bool:
        """
        Whether the node is configured.
        """
        return pulumi.get(self, "configured")

    @property
    @pulumi.getter(name="currentCvmVlanTag")
    def current_cvm_vlan_tag(self) -> str:
        """
        vlan tag of cvm.
        """
        return pulumi.get(self, "current_cvm_vlan_tag")

    @property
    @pulumi.getter(name="currentNetworkInterface")
    def current_network_interface(self) -> str:
        """
        Current network interface of the node.
        """
        return pulumi.get(self, "current_network_interface")

    @property
    @pulumi.getter(name="foundationVersion")
    def foundation_version(self) -> str:
        """
        Version of foundation.
        """
        return pulumi.get(self, "foundation_version")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        """
        Type of hypervisor installed on the node.
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> str:
        """
        Version of hypervisor installed.
        """
        return pulumi.get(self, "hypervisor_version")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        """
        IPV6 address of the node.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model name of the node.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="nodePosition")
    def node_position(self) -> str:
        """
        Position of the node in the block.
        """
        return pulumi.get(self, "node_position")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        """
        Node serial of the node.
        """
        return pulumi.get(self, "node_serial")

    @property
    @pulumi.getter(name="nodeUuid")
    def node_uuid(self) -> str:
        """
        UUID of the node.
        """
        return pulumi.get(self, "node_uuid")

    @property
    @pulumi.getter(name="nosVersion")
    def nos_version(self) -> str:
        """
        Version of NOS installed on the node.
        """
        return pulumi.get(self, "nos_version")

    @property
    @pulumi.getter(name="svmIp")
    def svm_ip(self) -> str:
        """
        IP address of CVM.
        """
        return pulumi.get(self, "svm_ip")


@pulumi.output_type
class GetFoundationHypervisorIsosEsxResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosHypervResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosKvmResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosLinuxResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationHypervisorIsosXenResult(dict):
    def __init__(__self__, *,
                 filename: str,
                 supported: bool):
        """
        :param str filename: Name of installer.
        :param bool supported: Whether front-end should treat hyp as supported.
        """
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Name of installer.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether front-end should treat hyp as supported.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetFoundationNodeNetworkDetailsNodeResult(dict):
    def __init__(__self__, *,
                 cvm_gateway: str,
                 cvm_ip: str,
                 cvm_netmask: str,
                 cvm_vlan_id: str,
                 error: str,
                 hypervisor_gateway: str,
                 hypervisor_hostname: str,
                 hypervisor_ip: str,
                 hypervisor_netmask: str,
                 ipmi_gateway: str,
                 ipmi_ip: str,
                 ipmi_netmask: str,
                 ipv6_address: str,
                 node_serial: str):
        """
        :param str cvm_gateway: Gateway of CVM.
        :param str cvm_ip: CVM IP address.
        :param str cvm_netmask: Netmask of CVM.
        :param str cvm_vlan_id: CVM vlan tag.
        :param str error: Only exists when failed to fetch node_info, with the reason of failure. all other fields will be empty.
        :param str hypervisor_gateway: Gateway of the hypervisor.
        :param str hypervisor_hostname: Hypervisor hostname.
        :param str hypervisor_ip: Hypervisor IP address.
        :param str hypervisor_netmask: Netmask of the hypervisor.
        :param str ipmi_gateway: IPMI gateway.
        :param str ipmi_ip: IPMI IP address.
        :param str ipmi_netmask: IPMI netmask.
        :param str ipv6_address: IPV6 address of the CVM.
        :param str node_serial: Node serial.
        """
        pulumi.set(__self__, "cvm_gateway", cvm_gateway)
        pulumi.set(__self__, "cvm_ip", cvm_ip)
        pulumi.set(__self__, "cvm_netmask", cvm_netmask)
        pulumi.set(__self__, "cvm_vlan_id", cvm_vlan_id)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "hypervisor_gateway", hypervisor_gateway)
        pulumi.set(__self__, "hypervisor_hostname", hypervisor_hostname)
        pulumi.set(__self__, "hypervisor_ip", hypervisor_ip)
        pulumi.set(__self__, "hypervisor_netmask", hypervisor_netmask)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_ip", ipmi_ip)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "node_serial", node_serial)

    @property
    @pulumi.getter(name="cvmGateway")
    def cvm_gateway(self) -> str:
        """
        Gateway of CVM.
        """
        return pulumi.get(self, "cvm_gateway")

    @property
    @pulumi.getter(name="cvmIp")
    def cvm_ip(self) -> str:
        """
        CVM IP address.
        """
        return pulumi.get(self, "cvm_ip")

    @property
    @pulumi.getter(name="cvmNetmask")
    def cvm_netmask(self) -> str:
        """
        Netmask of CVM.
        """
        return pulumi.get(self, "cvm_netmask")

    @property
    @pulumi.getter(name="cvmVlanId")
    def cvm_vlan_id(self) -> str:
        """
        CVM vlan tag.
        """
        return pulumi.get(self, "cvm_vlan_id")

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        Only exists when failed to fetch node_info, with the reason of failure. all other fields will be empty.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="hypervisorGateway")
    def hypervisor_gateway(self) -> str:
        """
        Gateway of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_gateway")

    @property
    @pulumi.getter(name="hypervisorHostname")
    def hypervisor_hostname(self) -> str:
        """
        Hypervisor hostname.
        """
        return pulumi.get(self, "hypervisor_hostname")

    @property
    @pulumi.getter(name="hypervisorIp")
    def hypervisor_ip(self) -> str:
        """
        Hypervisor IP address.
        """
        return pulumi.get(self, "hypervisor_ip")

    @property
    @pulumi.getter(name="hypervisorNetmask")
    def hypervisor_netmask(self) -> str:
        """
        Netmask of the hypervisor.
        """
        return pulumi.get(self, "hypervisor_netmask")

    @property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> str:
        """
        IPMI gateway.
        """
        return pulumi.get(self, "ipmi_gateway")

    @property
    @pulumi.getter(name="ipmiIp")
    def ipmi_ip(self) -> str:
        """
        IPMI IP address.
        """
        return pulumi.get(self, "ipmi_ip")

    @property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> str:
        """
        IPMI netmask.
        """
        return pulumi.get(self, "ipmi_netmask")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        """
        IPV6 address of the CVM.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="nodeSerial")
    def node_serial(self) -> str:
        """
        Node serial.
        """
        return pulumi.get(self, "node_serial")


@pulumi.output_type
class GetHostCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostGpuListResult(dict):
    def __init__(__self__, *,
                 assignable: bool,
                 consumer_reference: Mapping[str, str],
                 device_id: int,
                 fraction: int,
                 frame_buffer_size_mib: int,
                 guest_driver_version: str,
                 index: int,
                 license_lists: Sequence[str],
                 max_resolution: str,
                 mode: str,
                 name: str,
                 num_vgpus_allocated: int,
                 num_virtual_display_heads: int,
                 numa_node: int,
                 pci_address: str,
                 status: str,
                 uuid: str,
                 vendor: str):
        """
        :param str name: - the key name.
        :param str uuid: - image uuid.
        """
        pulumi.set(__self__, "assignable", assignable)
        pulumi.set(__self__, "consumer_reference", consumer_reference)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "fraction", fraction)
        pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "license_lists", license_lists)
        pulumi.set(__self__, "max_resolution", max_resolution)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_vgpus_allocated", num_vgpus_allocated)
        pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        pulumi.set(__self__, "numa_node", numa_node)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def assignable(self) -> bool:
        return pulumi.get(self, "assignable")

    @property
    @pulumi.getter(name="consumerReference")
    def consumer_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "consumer_reference")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> int:
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> int:
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> str:
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="licenseLists")
    def license_lists(self) -> Sequence[str]:
        return pulumi.get(self, "license_lists")

    @property
    @pulumi.getter(name="maxResolution")
    def max_resolution(self) -> str:
        return pulumi.get(self, "max_resolution")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVgpusAllocated")
    def num_vgpus_allocated(self) -> int:
        return pulumi.get(self, "num_vgpus_allocated")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> int:
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="numaNode")
    def numa_node(self) -> int:
        return pulumi.get(self, "numa_node")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> str:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - image uuid.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostHostDisksReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the key name.
        :param str uuid: - image uuid.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - image uuid.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetHostsEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 block: Mapping[str, str],
                 categories: Sequence['outputs.GetHostsEntityCategoryResult'],
                 cluster_reference: Mapping[str, str],
                 controller_vm: Mapping[str, str],
                 cpu_capacity_hz: int,
                 cpu_model: str,
                 failover_cluster: Mapping[str, str],
                 gpu_driver_version: str,
                 gpu_lists: Sequence['outputs.GetHostsEntityGpuListResult'],
                 host_disks_reference_lists: Sequence['outputs.GetHostsEntityHostDisksReferenceListResult'],
                 host_nics_id_lists: Sequence[str],
                 host_type: str,
                 hypervisor: Mapping[str, str],
                 ipmi: Mapping[str, str],
                 memory_capacity_mib: int,
                 metadata: Mapping[str, str],
                 monitoring_state: str,
                 name: str,
                 num_cpu_cores: int,
                 num_cpu_sockets: int,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 rackable_unit_reference: Mapping[str, str],
                 serial_number: str,
                 windows_domain: Mapping[str, str]):
        """
        :param str api_version: The API version.
        :param Mapping[str, str] block: - Host block config info.
        :param Sequence['GetHostsEntityCategoryArgs'] categories: - Categories for the image.
        :param Mapping[str, str] cluster_reference: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
        :param Mapping[str, str] controller_vm: - Host controller vm information.
        :param int cpu_capacity_hz: - Host CPU capacity.
        :param str cpu_model: - Host CPU model.
        :param Mapping[str, str] failover_cluster: - Hyper-V failover cluster.
        :param str gpu_driver_version: - Host GPU driver version.
        :param Sequence['GetHostsEntityGpuListArgs'] gpu_lists: - List of GPUs on the host.
        :param Sequence['GetHostsEntityHostDisksReferenceListArgs'] host_disks_reference_lists: - The reference to a disk.
        :param Sequence[str] host_nics_id_lists: - Host NICs.
        :param str host_type: - Host type.
        :param Mapping[str, str] hypervisor: - Host Hypervisor information.
        :param Mapping[str, str] ipmi: - Host IPMI info.
        :param int memory_capacity_mib: - Host memory capacity in MiB.
        :param str monitoring_state: - Host monitoring status.
        :param str name: - the name.
        :param int num_cpu_cores: - Number of CPU cores on Host.
        :param int num_cpu_sockets: - Number of CPU sockets.
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param Mapping[str, str] rackable_unit_reference: - The reference to a rackable_unit.
        :param str serial_number: - Node serial number.
        :param Mapping[str, str] windows_domain: - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "cluster_reference", cluster_reference)
        pulumi.set(__self__, "controller_vm", controller_vm)
        pulumi.set(__self__, "cpu_capacity_hz", cpu_capacity_hz)
        pulumi.set(__self__, "cpu_model", cpu_model)
        pulumi.set(__self__, "failover_cluster", failover_cluster)
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)
        pulumi.set(__self__, "gpu_lists", gpu_lists)
        pulumi.set(__self__, "host_disks_reference_lists", host_disks_reference_lists)
        pulumi.set(__self__, "host_nics_id_lists", host_nics_id_lists)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "ipmi", ipmi)
        pulumi.set(__self__, "memory_capacity_mib", memory_capacity_mib)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "monitoring_state", monitoring_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_cpu_cores", num_cpu_cores)
        pulumi.set(__self__, "num_cpu_sockets", num_cpu_sockets)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "rackable_unit_reference", rackable_unit_reference)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The API version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def block(self) -> Mapping[str, str]:
        """
        - Host block config info.
        """
        return pulumi.get(self, "block")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetHostsEntityCategoryResult']:
        """
        - Categories for the image.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Mapping[str, str]:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
        """
        return pulumi.get(self, "cluster_reference")

    @property
    @pulumi.getter(name="controllerVm")
    def controller_vm(self) -> Mapping[str, str]:
        """
        - Host controller vm information.
        """
        return pulumi.get(self, "controller_vm")

    @property
    @pulumi.getter(name="cpuCapacityHz")
    def cpu_capacity_hz(self) -> int:
        """
        - Host CPU capacity.
        """
        return pulumi.get(self, "cpu_capacity_hz")

    @property
    @pulumi.getter(name="cpuModel")
    def cpu_model(self) -> str:
        """
        - Host CPU model.
        """
        return pulumi.get(self, "cpu_model")

    @property
    @pulumi.getter(name="failoverCluster")
    def failover_cluster(self) -> Mapping[str, str]:
        """
        - Hyper-V failover cluster.
        """
        return pulumi.get(self, "failover_cluster")

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> str:
        """
        - Host GPU driver version.
        """
        return pulumi.get(self, "gpu_driver_version")

    @property
    @pulumi.getter(name="gpuLists")
    def gpu_lists(self) -> Sequence['outputs.GetHostsEntityGpuListResult']:
        """
        - List of GPUs on the host.
        """
        return pulumi.get(self, "gpu_lists")

    @property
    @pulumi.getter(name="hostDisksReferenceLists")
    def host_disks_reference_lists(self) -> Sequence['outputs.GetHostsEntityHostDisksReferenceListResult']:
        """
        - The reference to a disk.
        """
        return pulumi.get(self, "host_disks_reference_lists")

    @property
    @pulumi.getter(name="hostNicsIdLists")
    def host_nics_id_lists(self) -> Sequence[str]:
        """
        - Host NICs.
        """
        return pulumi.get(self, "host_nics_id_lists")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        """
        - Host type.
        """
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def hypervisor(self) -> Mapping[str, str]:
        """
        - Host Hypervisor information.
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter
    def ipmi(self) -> Mapping[str, str]:
        """
        - Host IPMI info.
        """
        return pulumi.get(self, "ipmi")

    @property
    @pulumi.getter(name="memoryCapacityMib")
    def memory_capacity_mib(self) -> int:
        """
        - Host memory capacity in MiB.
        """
        return pulumi.get(self, "memory_capacity_mib")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> str:
        """
        - Host monitoring status.
        """
        return pulumi.get(self, "monitoring_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numCpuCores")
    def num_cpu_cores(self) -> int:
        """
        - Number of CPU cores on Host.
        """
        return pulumi.get(self, "num_cpu_cores")

    @property
    @pulumi.getter(name="numCpuSockets")
    def num_cpu_sockets(self) -> int:
        """
        - Number of CPU sockets.
        """
        return pulumi.get(self, "num_cpu_sockets")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="rackableUnitReference")
    def rackable_unit_reference(self) -> Mapping[str, str]:
        """
        - The reference to a rackable_unit.
        """
        return pulumi.get(self, "rackable_unit_reference")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        - Node serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Mapping[str, str]:
        """
        - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.
        """
        return pulumi.get(self, "windows_domain")


@pulumi.output_type
class GetHostsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostsEntityGpuListResult(dict):
    def __init__(__self__, *,
                 assignable: bool,
                 consumer_reference: Mapping[str, str],
                 device_id: int,
                 fraction: int,
                 frame_buffer_size_mib: int,
                 guest_driver_version: str,
                 index: int,
                 license_lists: Sequence[str],
                 max_resolution: str,
                 mode: str,
                 name: str,
                 num_vgpus_allocated: int,
                 num_virtual_display_heads: int,
                 numa_node: int,
                 pci_address: str,
                 status: str,
                 uuid: str,
                 vendor: str):
        """
        :param str name: - the name.
        :param str uuid: - the uuid.
        """
        pulumi.set(__self__, "assignable", assignable)
        pulumi.set(__self__, "consumer_reference", consumer_reference)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "fraction", fraction)
        pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "license_lists", license_lists)
        pulumi.set(__self__, "max_resolution", max_resolution)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_vgpus_allocated", num_vgpus_allocated)
        pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        pulumi.set(__self__, "numa_node", numa_node)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def assignable(self) -> bool:
        return pulumi.get(self, "assignable")

    @property
    @pulumi.getter(name="consumerReference")
    def consumer_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "consumer_reference")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> int:
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> int:
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> str:
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="licenseLists")
    def license_lists(self) -> Sequence[str]:
        return pulumi.get(self, "license_lists")

    @property
    @pulumi.getter(name="maxResolution")
    def max_resolution(self) -> str:
        return pulumi.get(self, "max_resolution")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVgpusAllocated")
    def num_vgpus_allocated(self) -> int:
        return pulumi.get(self, "num_vgpus_allocated")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> int:
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="numaNode")
    def numa_node(self) -> int:
        return pulumi.get(self, "numa_node")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> str:
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the uuid.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostsEntityHostDisksReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the uuid.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the uuid.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetImageCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageClusterReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetImageCurrentClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetKarbonClusterEtcdNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClusterEtcdNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClusterEtcdNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClusterEtcdNodePoolAhvConfigArgs'] ahv_configs: - VM configuration in AHV.
               * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClusterEtcdNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClusterEtcdNodePoolAhvConfigResult']:
        """
        - VM configuration in AHV.
        * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClusterEtcdNodePoolNodeResult']:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClusterEtcdNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClusterEtcdNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClusterMasterNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClusterMasterNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClusterMasterNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClusterMasterNodePoolAhvConfigArgs'] ahv_configs: - VM configuration in AHV.
               * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClusterMasterNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClusterMasterNodePoolAhvConfigResult']:
        """
        - VM configuration in AHV.
        * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClusterMasterNodePoolNodeResult']:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClusterMasterNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClusterMasterNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClusterWorkerNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClusterWorkerNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClusterWorkerNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClusterWorkerNodePoolAhvConfigArgs'] ahv_configs: - VM configuration in AHV.
               * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClusterWorkerNodePoolNodeArgs'] nodes: - List of the deployed nodes in the node pool.
               * `nodes.hostname`: - Hostname of the deployed node.
               * `nodes.ipv4_address`: - IP of the deployed node.
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClusterWorkerNodePoolAhvConfigResult']:
        """
        - VM configuration in AHV.
        * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClusterWorkerNodePoolNodeResult']:
        """
        - List of the deployed nodes in the node pool.
        * `nodes.hostname`: - Hostname of the deployed node.
        * `nodes.ipv4_address`: - IP of the deployed node.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClusterWorkerNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClusterWorkerNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClustersClusterResult(dict):
    def __init__(__self__, *,
                 deployment_type: str,
                 etcd_node_pools: Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolResult'],
                 kubeapi_server_ipv4_address: str,
                 master_node_pools: Sequence['outputs.GetKarbonClustersClusterMasterNodePoolResult'],
                 name: str,
                 status: str,
                 uuid: str,
                 version: str,
                 worker_node_pools: Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolResult']):
        """
        :param Sequence['GetKarbonClustersClusterEtcdNodePoolArgs'] etcd_node_pools: - Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
        :param Sequence['GetKarbonClustersClusterMasterNodePoolArgs'] master_node_pools: - .
        :param str name: - Unique name of the node pool.
        :param str version: - K8s version of the cluster.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "etcd_node_pools", etcd_node_pools)
        pulumi.set(__self__, "kubeapi_server_ipv4_address", kubeapi_server_ipv4_address)
        pulumi.set(__self__, "master_node_pools", master_node_pools)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "worker_node_pools", worker_node_pools)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="etcdNodePools")
    def etcd_node_pools(self) -> Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolResult']:
        """
        - Configuration of the node pools that the nodes in the etcd cluster belong to. The etcd nodes require a minimum of 8,192 MiB memory and 409,60 MiB disk space.
        """
        return pulumi.get(self, "etcd_node_pools")

    @property
    @pulumi.getter(name="kubeapiServerIpv4Address")
    def kubeapi_server_ipv4_address(self) -> str:
        return pulumi.get(self, "kubeapi_server_ipv4_address")

    @property
    @pulumi.getter(name="masterNodePools")
    def master_node_pools(self) -> Sequence['outputs.GetKarbonClustersClusterMasterNodePoolResult']:
        """
        - .
        """
        return pulumi.get(self, "master_node_pools")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        - K8s version of the cluster.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workerNodePools")
    def worker_node_pools(self) -> Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolResult']:
        return pulumi.get(self, "worker_node_pools")


@pulumi.output_type
class GetKarbonClustersClusterEtcdNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClustersClusterEtcdNodePoolAhvConfigArgs'] ahv_configs: - .
               * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClustersClusterEtcdNodePoolNodeArgs'] nodes: * `nodes.hostname`
               * `nodes.ipv4_address`
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolAhvConfigResult']:
        """
        - .
        * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClustersClusterEtcdNodePoolNodeResult']:
        """
        * `nodes.hostname`
        * `nodes.ipv4_address`
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClustersClusterEtcdNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClustersClusterEtcdNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClustersClusterMasterNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClustersClusterMasterNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClustersClusterMasterNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClustersClusterMasterNodePoolAhvConfigArgs'] ahv_configs: - .
               * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClustersClusterMasterNodePoolNodeArgs'] nodes: * `nodes.hostname`
               * `nodes.ipv4_address`
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClustersClusterMasterNodePoolAhvConfigResult']:
        """
        - .
        * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClustersClusterMasterNodePoolNodeResult']:
        """
        * `nodes.hostname`
        * `nodes.ipv4_address`
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClustersClusterMasterNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClustersClusterMasterNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonClustersClusterWorkerNodePoolResult(dict):
    def __init__(__self__, *,
                 ahv_configs: Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolAhvConfigResult'],
                 name: str,
                 node_os_version: str,
                 nodes: Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolNodeResult'],
                 num_instances: int):
        """
        :param Sequence['GetKarbonClustersClusterWorkerNodePoolAhvConfigArgs'] ahv_configs: - .
               * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
               * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
               * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
               * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
               * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        :param str name: - Unique name of the node pool.
        :param str node_os_version: - The version of the node OS image.
        :param Sequence['GetKarbonClustersClusterWorkerNodePoolNodeArgs'] nodes: * `nodes.hostname`
               * `nodes.ipv4_address`
        :param int num_instances: - Number of nodes in the node pool.
        """
        pulumi.set(__self__, "ahv_configs", ahv_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_os_version", node_os_version)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "num_instances", num_instances)

    @property
    @pulumi.getter(name="ahvConfigs")
    def ahv_configs(self) -> Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolAhvConfigResult']:
        """
        - .
        * `ahv_config.cpu`: - The number of VCPUs allocated for each VM on the PE cluster.
        * `ahv_config.disk_mib`: - Size of local storage for each VM on the PE cluster in MiB.
        * `ahv_config.memory_mib`: - Memory allocated for each VM on the PE cluster in MiB.
        * `ahv_config.network_uuid`: - The UUID of the network for the VMs deployed with this resource configuration.
        * `ahv_config.prism_element_cluster_uuid`: - The unique universal identifier (UUID) of the Prism Element cluster used to deploy VMs for this node pool.
        """
        return pulumi.get(self, "ahv_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Unique name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeOsVersion")
    def node_os_version(self) -> str:
        """
        - The version of the node OS image.
        """
        return pulumi.get(self, "node_os_version")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetKarbonClustersClusterWorkerNodePoolNodeResult']:
        """
        * `nodes.hostname`
        * `nodes.ipv4_address`
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> int:
        """
        - Number of nodes in the node pool.
        """
        return pulumi.get(self, "num_instances")


@pulumi.output_type
class GetKarbonClustersClusterWorkerNodePoolAhvConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_mib: int,
                 memory_mib: int,
                 network_uuid: str,
                 prism_element_cluster_uuid: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "disk_mib", disk_mib)
        pulumi.set(__self__, "memory_mib", memory_mib)
        pulumi.set(__self__, "network_uuid", network_uuid)
        pulumi.set(__self__, "prism_element_cluster_uuid", prism_element_cluster_uuid)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskMib")
    def disk_mib(self) -> int:
        return pulumi.get(self, "disk_mib")

    @property
    @pulumi.getter(name="memoryMib")
    def memory_mib(self) -> int:
        return pulumi.get(self, "memory_mib")

    @property
    @pulumi.getter(name="networkUuid")
    def network_uuid(self) -> str:
        return pulumi.get(self, "network_uuid")

    @property
    @pulumi.getter(name="prismElementClusterUuid")
    def prism_element_cluster_uuid(self) -> str:
        return pulumi.get(self, "prism_element_cluster_uuid")


@pulumi.output_type
class GetKarbonClustersClusterWorkerNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 ipv4_address: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class GetKarbonPrivateRegistriesPrivateRegistryResult(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 name: str,
                 uuid: str):
        """
        :param str endpoint: - Endpoint of the private in format `url:port`.
        :param str name: - Name of the private registry.
        :param str uuid: - UUID of the private registry.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        - Endpoint of the private in format `url:port`.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - Name of the private registry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - UUID of the private registry.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAdRuleTargetGroupFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListResult(dict):
    def __init__(__self__, *,
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleAppRuleTargetGroupFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListResult(dict):
    def __init__(__self__, *,
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListResult(dict):
    def __init__(__self__, *,
                 address_group_inclusion_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult'],
                 expiration_time: str,
                 filter_kind_lists: Sequence[str],
                 filter_params: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult'],
                 filter_type: str,
                 icmp_type_code_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult'],
                 ip_subnet: str,
                 ip_subnet_prefix_length: str,
                 network_function_chain_reference: Mapping[str, str],
                 peer_specification_type: str,
                 protocol: str,
                 service_group_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult'],
                 tcp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult']):
        pulumi.set(__self__, "address_group_inclusion_lists", address_group_inclusion_lists)
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "filter_kind_lists", filter_kind_lists)
        pulumi.set(__self__, "filter_params", filter_params)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        pulumi.set(__self__, "ip_subnet_prefix_length", ip_subnet_prefix_length)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "peer_specification_type", peer_specification_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_group_lists", service_group_lists)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="addressGroupInclusionLists")
    def address_group_inclusion_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult']:
        return pulumi.get(self, "address_group_inclusion_lists")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="filterKindLists")
    def filter_kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "filter_kind_lists")

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult']:
        return pulumi.get(self, "filter_params")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> str:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipSubnetPrefixLength")
    def ip_subnet_prefix_length(self) -> str:
        return pulumi.get(self, "ip_subnet_prefix_length")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="peerSpecificationType")
    def peer_specification_type(self) -> str:
        return pulumi.get(self, "peer_specification_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceGroupLists")
    def service_group_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult']:
        return pulumi.get(self, "service_group_lists")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPbrSpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetPbrSpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetPbrSpecResourceArgs'] resources: PBR resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrSpecResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetPbrSpecResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrSpecResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrSpecResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrSpecResourceProtocolParameterResult'],
                 protocol_type: str,
                 sources: Sequence['outputs.GetPbrSpecResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrSpecResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrSpecResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrSpecResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrSpecResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrSpecResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrSpecResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrSpecResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrSpecResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrSpecResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrSpecResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrSpecResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrSpecResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrSpecResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrSpecResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetPbrStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetPbrStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetPbrStatusExecutionContextArgs'] execution_contexts: Execution Context of PBR.
        :param str name: - the name.
        :param Sequence['GetPbrStatusResourceArgs'] resources: PBR resources status
        :param str state: The state of the PBR
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetPbrStatusExecutionContextResult']:
        """
        Execution Context of PBR.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrStatusResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the PBR
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPbrStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetPbrStatusResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrStatusResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrStatusResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrStatusResourceProtocolParameterResult'],
                 protocol_type: str,
                 routing_policy_counters: Sequence['outputs.GetPbrStatusResourceRoutingPolicyCounterResult'],
                 sources: Sequence['outputs.GetPbrStatusResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrStatusResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrStatusResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrStatusResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrStatusResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "routing_policy_counters", routing_policy_counters)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrStatusResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrStatusResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="routingPolicyCounters")
    def routing_policy_counters(self) -> Sequence['outputs.GetPbrStatusResourceRoutingPolicyCounterResult']:
        return pulumi.get(self, "routing_policy_counters")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrStatusResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrStatusResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrStatusResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrStatusResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrStatusResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrStatusResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrStatusResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrStatusResourceRoutingPolicyCounterResult(dict):
    def __init__(__self__, *,
                 byte_count: int,
                 packet_count: int):
        pulumi.set(__self__, "byte_count", byte_count)
        pulumi.set(__self__, "packet_count", packet_count)

    @property
    @pulumi.getter(name="byteCount")
    def byte_count(self) -> int:
        return pulumi.get(self, "byte_count")

    @property
    @pulumi.getter(name="packetCount")
    def packet_count(self) -> int:
        return pulumi.get(self, "packet_count")


@pulumi.output_type
class GetPbrStatusResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntityResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, str],
                 specs: Sequence['outputs.GetPbrsEntitySpecResult'],
                 statuses: Sequence['outputs.GetPbrsEntityStatusResult']):
        """
        :param Mapping[str, str] metadata: - The routing policies kind metadata.
        :param Sequence['GetPbrsEntitySpecArgs'] specs: PBR spec
        :param Sequence['GetPbrsEntityStatusArgs'] statuses: PBR output status
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The routing policies kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetPbrsEntitySpecResult']:
        """
        PBR spec
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetPbrsEntityStatusResult']:
        """
        PBR output status
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetPbrsEntitySpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetPbrsEntitySpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetPbrsEntitySpecResourceArgs'] resources: PBR resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrsEntitySpecResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetPbrsEntitySpecResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrsEntitySpecResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrsEntitySpecResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterResult'],
                 protocol_type: str,
                 sources: Sequence['outputs.GetPbrsEntitySpecResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrsEntitySpecResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrsEntitySpecResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrsEntitySpecResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrsEntitySpecResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrsEntitySpecResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrsEntitySpecResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrsEntitySpecResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrsEntitySpecResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrsEntitySpecResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntitySpecResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntityStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetPbrsEntityStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetPbrsEntityStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetPbrsEntityStatusExecutionContextArgs'] execution_contexts: Execution Context of PBR.
        :param str name: - the name.
        :param Sequence['GetPbrsEntityStatusResourceArgs'] resources: PBR resources status
        :param str state: The state of the PBR
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetPbrsEntityStatusExecutionContextResult']:
        """
        Execution Context of PBR.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetPbrsEntityStatusResourceResult']:
        """
        PBR resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the PBR
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPbrsEntityStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetPbrsEntityStatusResourceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPbrsEntityStatusResourceActionResult'],
                 destinations: Sequence['outputs.GetPbrsEntityStatusResourceDestinationResult'],
                 is_bidirectional: bool,
                 priority: int,
                 protocol_parameters: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterResult'],
                 protocol_type: str,
                 routing_policy_counters: Sequence['outputs.GetPbrsEntityStatusResourceRoutingPolicyCounterResult'],
                 sources: Sequence['outputs.GetPbrsEntityStatusResourceSourceResult'],
                 vpc_reference: Mapping[str, str]):
        """
        :param Sequence['GetPbrsEntityStatusResourceActionArgs'] actions: Routing policy action
        :param Sequence['GetPbrsEntityStatusResourceDestinationArgs'] destinations: destination address of an IP.
        :param bool is_bidirectional: Policy in reverse direction.
        :param int priority: priority of routing policy
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterArgs'] protocol_parameters: Routing policy IP protocol parameters
        :param str protocol_type: Protocol type of routing policy
        :param Sequence['GetPbrsEntityStatusResourceSourceArgs'] sources: source address of an IP.
        :param Mapping[str, str] vpc_reference: Reference to VPC
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "is_bidirectional", is_bidirectional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol_parameters", protocol_parameters)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "routing_policy_counters", routing_policy_counters)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "vpc_reference", vpc_reference)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPbrsEntityStatusResourceActionResult']:
        """
        Routing policy action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPbrsEntityStatusResourceDestinationResult']:
        """
        destination address of an IP.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isBidirectional")
    def is_bidirectional(self) -> bool:
        """
        Policy in reverse direction.
        """
        return pulumi.get(self, "is_bidirectional")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority of routing policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolParameters")
    def protocol_parameters(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterResult']:
        """
        Routing policy IP protocol parameters
        """
        return pulumi.get(self, "protocol_parameters")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        Protocol type of routing policy
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="routingPolicyCounters")
    def routing_policy_counters(self) -> Sequence['outputs.GetPbrsEntityStatusResourceRoutingPolicyCounterResult']:
        return pulumi.get(self, "routing_policy_counters")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetPbrsEntityStatusResourceSourceResult']:
        """
        source address of an IP.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        """
        Reference to VPC
        """
        return pulumi.get(self, "vpc_reference")


@pulumi.output_type
class GetPbrsEntityStatusResourceActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 service_ip_lists: Sequence[str]):
        """
        :param str action: Routing policy action
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "service_ip_lists", service_ip_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Routing policy action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="serviceIpLists")
    def service_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "service_ip_lists")


@pulumi.output_type
class GetPbrsEntityStatusResourceDestinationResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterResult(dict):
    def __init__(__self__, *,
                 icmps: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterIcmpResult'],
                 protocol_number: int,
                 tcps: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpResult'],
                 udps: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpResult']):
        """
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterIcmpArgs'] icmps: ICMP parameters in routing policy.
        :param int protocol_number: Protocol number in routing policy
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterTcpArgs'] tcps: TCP parameters in routing policy
        :param Sequence['GetPbrsEntityStatusResourceProtocolParameterUdpArgs'] udps: UDP parameters in routing policy
        """
        pulumi.set(__self__, "icmps", icmps)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "tcps", tcps)
        pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter
    def icmps(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterIcmpResult']:
        """
        ICMP parameters in routing policy.
        """
        return pulumi.get(self, "icmps")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        Protocol number in routing policy
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def tcps(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpResult']:
        """
        TCP parameters in routing policy
        """
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpResult']:
        """
        UDP parameters in routing policy
        """
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterIcmpResult(dict):
    def __init__(__self__, *,
                 icmp_code: int,
                 icmp_type: int):
        pulumi.set(__self__, "icmp_code", icmp_code)
        pulumi.set(__self__, "icmp_type", icmp_type)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterTcpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterUdpResult(dict):
    def __init__(__self__, *,
                 destination_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult'],
                 source_port_range_lists: Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult']):
        pulumi.set(__self__, "destination_port_range_lists", destination_port_range_lists)
        pulumi.set(__self__, "source_port_range_lists", source_port_range_lists)

    @property
    @pulumi.getter(name="destinationPortRangeLists")
    def destination_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult']:
        return pulumi.get(self, "destination_port_range_lists")

    @property
    @pulumi.getter(name="sourcePortRangeLists")
    def source_port_range_lists(self) -> Sequence['outputs.GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult']:
        return pulumi.get(self, "source_port_range_lists")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetPbrsEntityStatusResourceRoutingPolicyCounterResult(dict):
    def __init__(__self__, *,
                 byte_count: int,
                 packet_count: int):
        pulumi.set(__self__, "byte_count", byte_count)
        pulumi.set(__self__, "packet_count", packet_count)

    @property
    @pulumi.getter(name="byteCount")
    def byte_count(self) -> int:
        return pulumi.get(self, "byte_count")

    @property
    @pulumi.getter(name="packetCount")
    def packet_count(self) -> int:
        return pulumi.get(self, "packet_count")


@pulumi.output_type
class GetPbrsEntityStatusResourceSourceResult(dict):
    def __init__(__self__, *,
                 address_type: str,
                 prefix_length: Optional[int] = None,
                 subnet_ip: Optional[str] = None):
        """
        :param int prefix_length: prefix length of provided subnet.
        :param str subnet_ip: IP subnet provided as an address.
        """
        pulumi.set(__self__, "address_type", address_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if subnet_ip is not None:
            pulumi.set(__self__, "subnet_ip", subnet_ip)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        prefix length of provided subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> Optional[str]:
        """
        IP subnet provided as an address.
        """
        return pulumi.get(self, "subnet_ip")


@pulumi.output_type
class GetPbrsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


@pulumi.output_type
class GetPermissionCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPermissionFieldResult(dict):
    def __init__(__self__, *,
                 field_mode: str,
                 field_name_lists: Sequence[str]):
        """
        :param str field_mode: Allow or disallow the fields mentioned.
        :param Sequence[str] field_name_lists: The list of fields.
        """
        pulumi.set(__self__, "field_mode", field_mode)
        pulumi.set(__self__, "field_name_lists", field_name_lists)

    @property
    @pulumi.getter(name="fieldMode")
    def field_mode(self) -> str:
        """
        Allow or disallow the fields mentioned.
        """
        return pulumi.get(self, "field_mode")

    @property
    @pulumi.getter(name="fieldNameLists")
    def field_name_lists(self) -> Sequence[str]:
        """
        The list of fields.
        """
        return pulumi.get(self, "field_name_lists")


@pulumi.output_type
class GetPermissionsEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 categories: Sequence['outputs.GetPermissionsEntityCategoryResult'],
                 description: str,
                 fields: Sequence['outputs.GetPermissionsEntityFieldResult'],
                 kind: str,
                 metadata: Mapping[str, str],
                 name: str,
                 operation: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 state: str):
        """
        :param str api_version: version of the API
        :param Sequence['GetPermissionsEntityCategoryArgs'] categories: The categories for this resource.
        :param str description: A description for the permission.
        :param Sequence['GetPermissionsEntityFieldArgs'] fields: . The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.
        :param str kind: (Required) The kind name (Default value: `project`).
        :param Mapping[str, str] metadata: The permission kind metadata.
        :param str name: the name.
        :param str operation: The operation that is being performed on a given kind.
        :param Mapping[str, str] owner_reference: The reference to a user.
        :param Mapping[str, str] project_reference: The reference to a project.
        :param str state: The state of the permission.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetPermissionsEntityCategoryResult']:
        """
        The categories for this resource.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for the permission.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetPermissionsEntityFieldResult']:
        """
        . The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [“xyz”] then the list of allowed fields is ALL fields minus xyz. Seee Field for more info.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The permission kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation that is being performed on a given kind.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the permission.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPermissionsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPermissionsEntityFieldResult(dict):
    def __init__(__self__, *,
                 field_mode: str,
                 field_name_lists: Sequence[str]):
        """
        :param str field_mode: Allow or disallow the fields mentioned.
        :param Sequence[str] field_name_lists: The list of fields.
        """
        pulumi.set(__self__, "field_mode", field_mode)
        pulumi.set(__self__, "field_name_lists", field_name_lists)

    @property
    @pulumi.getter(name="fieldMode")
    def field_mode(self) -> str:
        """
        Allow or disallow the fields mentioned.
        """
        return pulumi.get(self, "field_mode")

    @property
    @pulumi.getter(name="fieldNameLists")
    def field_name_lists(self) -> Sequence[str]:
        """
        The list of fields.
        """
        return pulumi.get(self, "field_name_lists")


@pulumi.output_type
class GetPermissionsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetProjectAccountReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectEnvironmentReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectExternalNetworkListResult(dict):
    def __init__(__self__, *,
                 name: str,
                 uuid: str):
        """
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectExternalUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectResourceDomainResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetProjectResourceDomainResourceResult']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetProjectResourceDomainResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetProjectResourceDomainResourceResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 resource_type: str,
                 units: str,
                 value: int):
        """
        :param int value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectSubnetReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityResult(dict):
    def __init__(__self__, *,
                 account_reference_lists: Sequence['outputs.GetProjectsEntityAccountReferenceListResult'],
                 api_version: str,
                 categories: Sequence['outputs.GetProjectsEntityCategoryResult'],
                 default_subnet_reference: Mapping[str, str],
                 description: str,
                 environment_reference_lists: Sequence['outputs.GetProjectsEntityEnvironmentReferenceListResult'],
                 external_network_lists: Sequence['outputs.GetProjectsEntityExternalNetworkListResult'],
                 external_user_group_reference_lists: Sequence['outputs.GetProjectsEntityExternalUserGroupReferenceListResult'],
                 is_default: bool,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 project_reference: Mapping[str, str],
                 resource_domains: Sequence['outputs.GetProjectsEntityResourceDomainResult'],
                 state: str,
                 subnet_reference_lists: Sequence['outputs.GetProjectsEntitySubnetReferenceListResult'],
                 user_reference_lists: Sequence['outputs.GetProjectsEntityUserReferenceListResult']):
        """
        :param Sequence['GetProjectsEntityAccountReferenceListArgs'] account_reference_lists: List of accounts associated with the project.
               * `account_reference_list.#.kind` - The kind name. Default value is `account`
               * `account_reference_list.#.uuid` - The UUID of an account.
               * `account_reference_list.#.name` - The name of an account.
        :param str api_version: version of the API
        :param Mapping[str, str] default_subnet_reference: Reference to a subnet.
               * `default_subnet_reference.kind` - The kind name. Default value is `subnet`
               * `default_subnet_reference.uuid` - The UUID of a subnet.
               * `default_subnet_reference.name` - The name of a subnet.
        :param str description: A description for project.
        :param Sequence['GetProjectsEntityEnvironmentReferenceListArgs'] environment_reference_lists: List of environments associated with the project.
               * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
               * `environment_reference_list.#.uuid` - The UUID of an environment.
               * `environment_reference_list.#.name` - The name of an environment.
        :param Sequence['GetProjectsEntityExternalNetworkListArgs'] external_network_lists: List of external networks associated with the project.
               * `external_network_list.#.uuid` - The UUID of a network.
               * `external_network_list.#.name` - The name of a network.
        :param Sequence['GetProjectsEntityExternalUserGroupReferenceListArgs'] external_user_group_reference_lists: List of directory service user groups. These groups are not managed by Nutanix.
               * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
               * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
               * `external_user_group_reference_list.#.name` - The name of a user_group
        :param str name: (Optional) the name.
        :param Sequence['GetProjectsEntityResourceDomainArgs'] resource_domains: The status for a resource domain (limits and values)
               * `resource_domain.resources` Array of the utilization/limit for resource types
               * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
               * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
               * `resource_domain.resources.#.units` - The units of the resource type
               * `resource_domain.resources.#.value` - The amount of resource consumed
        :param Sequence['GetProjectsEntitySubnetReferenceListArgs'] subnet_reference_lists: List of subnets for the project.
               * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
               * `subnet_reference_list.#.uuid` - The UUID of a subnet
               * `subnet_reference_list.#.name` - The name of a subnet.
        :param Sequence['GetProjectsEntityUserReferenceListArgs'] user_reference_lists: List of users in the project.
               * `user_reference_list.#.kind` - The kind name. Default value is `user`
               * `user_reference_list.#.uuid` - The UUID of a user
               * `user_reference_list.#.name` - The name of a user.
        """
        pulumi.set(__self__, "account_reference_lists", account_reference_lists)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "default_subnet_reference", default_subnet_reference)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environment_reference_lists", environment_reference_lists)
        pulumi.set(__self__, "external_network_lists", external_network_lists)
        pulumi.set(__self__, "external_user_group_reference_lists", external_user_group_reference_lists)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "resource_domains", resource_domains)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_reference_lists", subnet_reference_lists)
        pulumi.set(__self__, "user_reference_lists", user_reference_lists)

    @property
    @pulumi.getter(name="accountReferenceLists")
    def account_reference_lists(self) -> Sequence['outputs.GetProjectsEntityAccountReferenceListResult']:
        """
        List of accounts associated with the project.
        * `account_reference_list.#.kind` - The kind name. Default value is `account`
        * `account_reference_list.#.uuid` - The UUID of an account.
        * `account_reference_list.#.name` - The name of an account.
        """
        return pulumi.get(self, "account_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProjectsEntityCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="defaultSubnetReference")
    def default_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        * `default_subnet_reference.kind` - The kind name. Default value is `subnet`
        * `default_subnet_reference.uuid` - The UUID of a subnet.
        * `default_subnet_reference.name` - The name of a subnet.
        """
        return pulumi.get(self, "default_subnet_reference")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentReferenceLists")
    def environment_reference_lists(self) -> Sequence['outputs.GetProjectsEntityEnvironmentReferenceListResult']:
        """
        List of environments associated with the project.
        * `environment_reference_list.#.kind` - The kind name. Default value is `environment`
        * `environment_reference_list.#.uuid` - The UUID of an environment.
        * `environment_reference_list.#.name` - The name of an environment.
        """
        return pulumi.get(self, "environment_reference_lists")

    @property
    @pulumi.getter(name="externalNetworkLists")
    def external_network_lists(self) -> Sequence['outputs.GetProjectsEntityExternalNetworkListResult']:
        """
        List of external networks associated with the project.
        * `external_network_list.#.uuid` - The UUID of a network.
        * `external_network_list.#.name` - The name of a network.
        """
        return pulumi.get(self, "external_network_lists")

    @property
    @pulumi.getter(name="externalUserGroupReferenceLists")
    def external_user_group_reference_lists(self) -> Sequence['outputs.GetProjectsEntityExternalUserGroupReferenceListResult']:
        """
        List of directory service user groups. These groups are not managed by Nutanix.
        * `external_user_group_reference_list.#.kind` - The kind name. Default value is `user_group`
        * `external_user_group_reference_list.#.uuid` - The UUID of a user_group
        * `external_user_group_reference_list.#.name` - The name of a user_group
        """
        return pulumi.get(self, "external_user_group_reference_lists")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="resourceDomains")
    def resource_domains(self) -> Sequence['outputs.GetProjectsEntityResourceDomainResult']:
        """
        The status for a resource domain (limits and values)
        * `resource_domain.resources` Array of the utilization/limit for resource types
        * `resource_domain.resources.#.limit` The resource consumption limit (unspecified is unlimited)
        * `resource_domain.resources.#.resource_type` The type of resource (for example storage, CPUs)
        * `resource_domain.resources.#.units` - The units of the resource type
        * `resource_domain.resources.#.value` - The amount of resource consumed
        """
        return pulumi.get(self, "resource_domains")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetReferenceLists")
    def subnet_reference_lists(self) -> Sequence['outputs.GetProjectsEntitySubnetReferenceListResult']:
        """
        List of subnets for the project.
        * `subnet_reference_list.#.kind` - The kind name. Default value is `subnet`
        * `subnet_reference_list.#.uuid` - The UUID of a subnet
        * `subnet_reference_list.#.name` - The name of a subnet.
        """
        return pulumi.get(self, "subnet_reference_lists")

    @property
    @pulumi.getter(name="userReferenceLists")
    def user_reference_lists(self) -> Sequence['outputs.GetProjectsEntityUserReferenceListResult']:
        """
        List of users in the project.
        * `user_reference_list.#.kind` - The kind name. Default value is `user`
        * `user_reference_list.#.uuid` - The UUID of a user
        * `user_reference_list.#.name` - The name of a user.
        """
        return pulumi.get(self, "user_reference_lists")


@pulumi.output_type
class GetProjectsEntityAccountReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectsEntityEnvironmentReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityExternalNetworkListResult(dict):
    def __init__(__self__, *,
                 name: str,
                 uuid: str):
        """
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityExternalUserGroupReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityResourceDomainResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetProjectsEntityResourceDomainResourceResult']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetProjectsEntityResourceDomainResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetProjectsEntityResourceDomainResourceResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 resource_type: str,
                 units: str,
                 value: int):
        """
        :param int value: value of the key.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectsEntitySubnetReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProjectsEntityUserReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListResult(dict):
    def __init__(__self__, *,
                 destination_availability_zone_index: int,
                 snapshot_schedule_lists: Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult'],
                 source_availability_zone_index: int):
        pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> int:
        return pulumi.get(self, "destination_availability_zone_index")

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult']:
        return pulumi.get(self, "snapshot_schedule_lists")

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> int:
        return pulumi.get(self, "source_availability_zone_index")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListResult(dict):
    def __init__(__self__, *,
                 auto_suspend_timeout_secs: int,
                 local_snapshot_retention_policies: Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult'],
                 recovery_point_objective_secs: int,
                 remote_snapshot_retention_policies: Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult'],
                 snapshot_type: str):
        pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        pulumi.set(__self__, "local_snapshot_retention_policies", local_snapshot_retention_policies)
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        pulumi.set(__self__, "remote_snapshot_retention_policies", remote_snapshot_retention_policies)
        pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> int:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicies")
    def local_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "local_snapshot_retention_policies")

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> int:
        return pulumi.get(self, "recovery_point_objective_secs")

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicies")
    def remote_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "remote_snapshot_retention_policies")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> str:
        return pulumi.get(self, "snapshot_type")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRuleCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProtectionRuleCategoryFilterResult(dict):
    def __init__(__self__, *,
                 kind_lists: Sequence[str],
                 params: Sequence['outputs.GetProtectionRuleCategoryFilterParamResult'],
                 type: str):
        pulumi.set(__self__, "kind_lists", kind_lists)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "kind_lists")

    @property
    @pulumi.getter
    def params(self) -> Sequence['outputs.GetProtectionRuleCategoryFilterParamResult']:
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProtectionRuleCategoryFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProtectionRuleOrderedAvailabilityZoneListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_uuid: str):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> str:
        return pulumi.get(self, "cluster_uuid")


@pulumi.output_type
class GetProtectionRuleOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRuleProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRulesEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 availability_zone_connectivity_lists: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListResult'],
                 categories: Sequence['outputs.GetProtectionRulesEntityCategoryResult'],
                 category_filters: Sequence['outputs.GetProtectionRulesEntityCategoryFilterResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 ordered_availability_zone_lists: Sequence['outputs.GetProtectionRulesEntityOrderedAvailabilityZoneListResult'],
                 owner_references: Sequence['outputs.GetProtectionRulesEntityOwnerReferenceResult'],
                 project_references: Sequence['outputs.GetProtectionRulesEntityProjectReferenceResult'],
                 start_time: str,
                 state: str):
        """
        :param str api_version: version of the API
        :param Sequence['GetProtectionRulesEntityAvailabilityZoneConnectivityListArgs'] availability_zone_connectivity_lists: (Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.
               * `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.
               * `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.
               * `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
               * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        :param Sequence['GetProtectionRulesEntityCategoryFilterArgs'] category_filters: (Optional/Computed)
               * `category_filter.0.type` - (Optional/Computed) The type of the filter being used.
               * `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.
               * `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.
        :param str description: A description for protection rule.
        :param str name: (Optional) the name.
        :param Sequence['GetProtectionRulesEntityOrderedAvailabilityZoneListArgs'] ordered_availability_zone_lists: (Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.
               * `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.
               * `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "availability_zone_connectivity_lists", availability_zone_connectivity_lists)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "category_filters", category_filters)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ordered_availability_zone_lists", ordered_availability_zone_lists)
        pulumi.set(__self__, "owner_references", owner_references)
        pulumi.set(__self__, "project_references", project_references)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="availabilityZoneConnectivityLists")
    def availability_zone_connectivity_lists(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListResult']:
        """
        (Required) This encodes the datapipes between various availability zones and\\nthe backup policy of the pipes.
        * `availability_zone_connectivity_list.destination_availability_zone_index` - (Optional/Computed) Index of the availability zone.
        * `availability_zone_connectivity_list.source_availability_zone_index` - (Optional/Computed) Index of the availability zone.
        * `availability_zone_connectivity_list.snapshot_schedule_list` - (Optional/Computed) Snapshot schedules for the pair of the availability zones.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.recovery_point_objective_secs` - (Required) "A recovery point objective (RPO) is the maximum acceptable amount of data loss.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.num_snapshots` - (Optional/Computed) Number of snapshots need to be retained.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_multiple` - (Optional/Computed) Multiplier to 'snapshot_interval_type'.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.local_snapshot_retention_policy.0.rollup_retention_policy_snapshot_interval_type` - (Optional/Computed)
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.auto_suspend_timeout_secs` - (Optional/Computed) Auto suspend timeout in case of connection failure between the sites.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.snapshot_type` - (Optional/Computed) Crash consistent or Application Consistent snapshot.
        * `availability_zone_connectivity_list.snapshot_schedule_list.#.remote_snapshot_retention_policy` - (Optional/Computed) This describes the snapshot retention policy for this availability zone.
        """
        return pulumi.get(self, "availability_zone_connectivity_lists")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetProtectionRulesEntityCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="categoryFilters")
    def category_filters(self) -> Sequence['outputs.GetProtectionRulesEntityCategoryFilterResult']:
        """
        (Optional/Computed)
        * `category_filter.0.type` - (Optional/Computed) The type of the filter being used.
        * `category_filter.0.kind_list` - (Optional/Computed) List of kinds associated with this filter.
        * `category_filter.0.params` - (Optional/Computed) A list of category key and list of values.
        """
        return pulumi.get(self, "category_filters")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for protection rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orderedAvailabilityZoneLists")
    def ordered_availability_zone_lists(self) -> Sequence['outputs.GetProtectionRulesEntityOrderedAvailabilityZoneListResult']:
        """
        (Required) A list of availability zones, each of which, receives a replica\\nof the data for the entities protected by this protection rule.
        * `ordered_availability_zone_list.#.cluster_uuid` - (Optional/Computed) UUID of specific cluster to which we will be replicating.
        * `ordered_availability_zone_list.#.availability_zone_url` - (Optional/Computed) The FQDN or IP address of the availability zone.
        """
        return pulumi.get(self, "ordered_availability_zone_lists")

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Sequence['outputs.GetProtectionRulesEntityOwnerReferenceResult']:
        return pulumi.get(self, "owner_references")

    @property
    @pulumi.getter(name="projectReferences")
    def project_references(self) -> Sequence['outputs.GetProtectionRulesEntityProjectReferenceResult']:
        return pulumi.get(self, "project_references")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListResult(dict):
    def __init__(__self__, *,
                 destination_availability_zone_index: int,
                 snapshot_schedule_lists: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult'],
                 source_availability_zone_index: int):
        pulumi.set(__self__, "destination_availability_zone_index", destination_availability_zone_index)
        pulumi.set(__self__, "snapshot_schedule_lists", snapshot_schedule_lists)
        pulumi.set(__self__, "source_availability_zone_index", source_availability_zone_index)

    @property
    @pulumi.getter(name="destinationAvailabilityZoneIndex")
    def destination_availability_zone_index(self) -> int:
        return pulumi.get(self, "destination_availability_zone_index")

    @property
    @pulumi.getter(name="snapshotScheduleLists")
    def snapshot_schedule_lists(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult']:
        return pulumi.get(self, "snapshot_schedule_lists")

    @property
    @pulumi.getter(name="sourceAvailabilityZoneIndex")
    def source_availability_zone_index(self) -> int:
        return pulumi.get(self, "source_availability_zone_index")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListResult(dict):
    def __init__(__self__, *,
                 auto_suspend_timeout_secs: int,
                 local_snapshot_retention_policies: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult'],
                 recovery_point_objective_secs: int,
                 remote_snapshot_retention_policies: Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult'],
                 snapshot_type: str):
        pulumi.set(__self__, "auto_suspend_timeout_secs", auto_suspend_timeout_secs)
        pulumi.set(__self__, "local_snapshot_retention_policies", local_snapshot_retention_policies)
        pulumi.set(__self__, "recovery_point_objective_secs", recovery_point_objective_secs)
        pulumi.set(__self__, "remote_snapshot_retention_policies", remote_snapshot_retention_policies)
        pulumi.set(__self__, "snapshot_type", snapshot_type)

    @property
    @pulumi.getter(name="autoSuspendTimeoutSecs")
    def auto_suspend_timeout_secs(self) -> int:
        return pulumi.get(self, "auto_suspend_timeout_secs")

    @property
    @pulumi.getter(name="localSnapshotRetentionPolicies")
    def local_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "local_snapshot_retention_policies")

    @property
    @pulumi.getter(name="recoveryPointObjectiveSecs")
    def recovery_point_objective_secs(self) -> int:
        return pulumi.get(self, "recovery_point_objective_secs")

    @property
    @pulumi.getter(name="remoteSnapshotRetentionPolicies")
    def remote_snapshot_retention_policies(self) -> Sequence['outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult']:
        return pulumi.get(self, "remote_snapshot_retention_policies")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> str:
        return pulumi.get(self, "snapshot_type")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 num_snapshots: int,
                 rollup_retention_policy_multiple: int,
                 rollup_retention_policy_snapshot_interval_type: str):
        pulumi.set(__self__, "num_snapshots", num_snapshots)
        pulumi.set(__self__, "rollup_retention_policy_multiple", rollup_retention_policy_multiple)
        pulumi.set(__self__, "rollup_retention_policy_snapshot_interval_type", rollup_retention_policy_snapshot_interval_type)

    @property
    @pulumi.getter(name="numSnapshots")
    def num_snapshots(self) -> int:
        return pulumi.get(self, "num_snapshots")

    @property
    @pulumi.getter(name="rollupRetentionPolicyMultiple")
    def rollup_retention_policy_multiple(self) -> int:
        return pulumi.get(self, "rollup_retention_policy_multiple")

    @property
    @pulumi.getter(name="rollupRetentionPolicySnapshotIntervalType")
    def rollup_retention_policy_snapshot_interval_type(self) -> str:
        return pulumi.get(self, "rollup_retention_policy_snapshot_interval_type")


@pulumi.output_type
class GetProtectionRulesEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProtectionRulesEntityCategoryFilterResult(dict):
    def __init__(__self__, *,
                 kind_lists: Sequence[str],
                 params: Sequence['outputs.GetProtectionRulesEntityCategoryFilterParamResult'],
                 type: str):
        pulumi.set(__self__, "kind_lists", kind_lists)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kindLists")
    def kind_lists(self) -> Sequence[str]:
        return pulumi.get(self, "kind_lists")

    @property
    @pulumi.getter
    def params(self) -> Sequence['outputs.GetProtectionRulesEntityCategoryFilterParamResult']:
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProtectionRulesEntityCategoryFilterParamResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProtectionRulesEntityOrderedAvailabilityZoneListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_uuid: str):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> str:
        return pulumi.get(self, "cluster_uuid")


@pulumi.output_type
class GetProtectionRulesEntityOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetProtectionRulesEntityProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlanOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterResult(dict):
    def __init__(__self__, *,
                 floating_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListResult'],
                 network_mapping_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListResult']):
        pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListResult']:
        return pulumi.get(self, "floating_ip_assignment_lists")

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListResult']:
        return pulumi.get(self, "network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 vm_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult']:
        return pulumi.get(self, "vm_ip_assignment_lists")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 recovery_floating_ip_configs: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult'],
                 test_floating_ip_configs: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult'],
                 vm_nic_informations: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult'],
                 vm_references: Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']):
        pulumi.set(__self__, "recovery_floating_ip_configs", recovery_floating_ip_configs)
        pulumi.set(__self__, "test_floating_ip_configs", test_floating_ip_configs)
        pulumi.set(__self__, "vm_nic_informations", vm_nic_informations)
        pulumi.set(__self__, "vm_references", vm_references)

    @property
    @pulumi.getter(name="recoveryFloatingIpConfigs")
    def recovery_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult']:
        return pulumi.get(self, "recovery_floating_ip_configs")

    @property
    @pulumi.getter(name="testFloatingIpConfigs")
    def test_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult']:
        return pulumi.get(self, "test_floating_ip_configs")

    @property
    @pulumi.getter(name="vmNicInformations")
    def vm_nic_informations(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult']:
        return pulumi.get(self, "vm_nic_informations")

    @property
    @pulumi.getter(name="vmReferences")
    def vm_references(self) -> Sequence['outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']:
        return pulumi.get(self, "vm_references")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 uuid: str):
        """
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 are_networks_stretched: bool,
                 availability_zone_network_mapping_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']):
        pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> bool:
        return pulumi.get(self, "are_networks_stretched")

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']:
        return pulumi.get(self, "availability_zone_network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_reference_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult'],
                 recovery_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult'],
                 recovery_networks: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult'],
                 test_ip_assignment_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult'],
                 test_networks: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        pulumi.set(__self__, "recovery_networks", recovery_networks)
        pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        pulumi.set(__self__, "test_networks", test_networks)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult']:
        return pulumi.get(self, "cluster_reference_lists")

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult']:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @property
    @pulumi.getter(name="recoveryNetworks")
    def recovery_networks(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult']:
        return pulumi.get(self, "recovery_networks")

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult']:
        return pulumi.get(self, "test_ip_assignment_lists")

    @property
    @pulumi.getter(name="testNetworks")
    def test_networks(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']:
        return pulumi.get(self, "test_networks")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlanStageListResult(dict):
    def __init__(__self__, *,
                 delay_time_secs: int,
                 stage_uuid: str,
                 stage_works: Sequence['outputs.GetRecoveryPlanStageListStageWorkResult']):
        pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        pulumi.set(__self__, "stage_uuid", stage_uuid)
        pulumi.set(__self__, "stage_works", stage_works)

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> int:
        return pulumi.get(self, "delay_time_secs")

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> str:
        return pulumi.get(self, "stage_uuid")

    @property
    @pulumi.getter(name="stageWorks")
    def stage_works(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkResult']:
        return pulumi.get(self, "stage_works")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkResult(dict):
    def __init__(__self__, *,
                 recover_entities: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityResult']):
        pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityResult']:
        return pulumi.get(self, "recover_entities")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityResult(dict):
    def __init__(__self__, *,
                 entity_info_lists: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult']):
        pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult']:
        return pulumi.get(self, "entity_info_lists")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListResult(dict):
    def __init__(__self__, *,
                 any_entity_reference_kind: str,
                 any_entity_reference_name: str,
                 any_entity_reference_uuid: str,
                 categories: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult'],
                 script_lists: Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult']):
        pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> str:
        return pulumi.get(self, "any_entity_reference_kind")

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> str:
        return pulumi.get(self, "any_entity_reference_name")

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> str:
        return pulumi.get(self, "any_entity_reference_uuid")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Sequence['outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult']:
        return pulumi.get(self, "script_lists")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptListResult(dict):
    def __init__(__self__, *,
                 enable_script_exec: bool,
                 timeout: str):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> bool:
        return pulumi.get(self, "enable_script_exec")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetRecoveryPlansEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 categories: Sequence['outputs.GetRecoveryPlansEntityCategoryResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_references: Sequence['outputs.GetRecoveryPlansEntityOwnerReferenceResult'],
                 parameters: Sequence['outputs.GetRecoveryPlansEntityParameterResult'],
                 project_references: Sequence['outputs.GetRecoveryPlansEntityProjectReferenceResult'],
                 stage_lists: Sequence['outputs.GetRecoveryPlansEntityStageListResult'],
                 state: str):
        """
        :param str api_version: version of the API
        :param str description: A description for recovery plan.
        :param str name: (Optional) the name.
        :param Sequence['GetRecoveryPlansEntityParameterArgs'] parameters: (Required) Parameters for the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
               * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
               * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
               * `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
               * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
        :param Sequence['GetRecoveryPlansEntityStageListArgs'] stage_lists: (Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.
               * `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.
               * `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
               * `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
               * `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
               * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_references", owner_references)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "project_references", project_references)
        pulumi.set(__self__, "stage_lists", stage_lists)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRecoveryPlansEntityCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for recovery plan.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Sequence['outputs.GetRecoveryPlansEntityOwnerReferenceResult']:
        return pulumi.get(self, "owner_references")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterResult']:
        """
        (Required) Parameters for the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list` - (Optional/Computed) Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
        * `parameters.0.floating_ip_assignment_list.#.availability_zone_url` - (Required) URL of the Availability Zone.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list` - (Required) IP assignment for VMs upon recovery in the specified Availability Zone.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.test_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config` - (Optional/Computed) Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.ip` - (Optional/Computed) IP to be assigned to VM, in case of failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.recovery_floating_ip_config.should_allocate_dynamically` - (Optional/Computed) Whether to allocate the floating IPs for the VMs dynamically.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference` - (Required) Reference to a vm.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.kind` - (Required) The kind name.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.uuid` - (Required) The uuid.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information` - (Required) Information about vnic to which floating IP has to be assigned.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.ip` - (Optional/Computed) IP address associated with vnic for which floating IP has to be assigned on failover.
        * `parameters.0.floating_ip_assignment_list.#.vm_ip_assignment_list.#.vm_nic_information.uuid` - (Required) Uuid of the vnic of the VM to which floating IP has to be assigned.
        * `parameters.0.network_mapping_list` - (Required) Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list` - (Required) Mapping of networks across the Availability Zones.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.availability_zone_url` - (Optional/Computed) URL of the Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.use_vpc_reference` - (Optional/Computed) The reference to a VPC.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference` - (Optional/Computed) The reference to a VPC.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.vpc_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_network.0.name` - (Required) Name of the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network` - (Optional/Computed) Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference` - (Optional/Computed) The reference to a virtual_network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.virtual_network_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list` - (Optional/Computed) List of subnets for the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.gateway_ip` - (Required) Gateway IP address for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.external_connectivity_state` - (Optional/Computed) External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.subnet_list.#.prefix_length` - (Required) Prefix length for the subnet.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_network.0.name` - (Required) Name of the network.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.recovery_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list` - (Optional/Computed) Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference` - (Optional/Computed) The reference to a vm.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.vm_reference.name` - (Optional/Computed) The name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list` - (Optional/Computed) List of IP configurations for a VM.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.ip_config_list.#.ip_address` - (Required) IP address.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list` - (Optional/Computed) The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.kind` - (Optional/Computed) The kind name.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.cluster_reference_list.0.uuid` - (Optional/Computed) The uuid.
        * `parameters.0.network_mapping_list.#.availability_zone_network_mapping_list.#.test_ip_assignment_list.0.name` - (Optional/Computed) The name.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="projectReferences")
    def project_references(self) -> Sequence['outputs.GetRecoveryPlansEntityProjectReferenceResult']:
        return pulumi.get(self, "project_references")

    @property
    @pulumi.getter(name="stageLists")
    def stage_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListResult']:
        """
        (Required) Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task.
        * `stage_list.stage_uuid` - (Optional/Computed) UUID of stage.
        * `stage_list.delay_time_secs` - (Optional/Computed) Amount of time in seconds to delay the execution of next stage after execution of current stage.
        * `stage_list.stage_work` - (Required) A stage specifies the work to be performed when the Recovery Plan is executed.
        * `stage_list.stage_work.0.recover_entities` - (Optional/Computed) Information about entities to be recovered.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list` - (Optional/Computed) Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_kind` - (Optional/Computed) Reference to a kind.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_uuid` - (Optional/Computed) Reference to a uuid.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.any_entity_reference_name` - (Optional/Computed) Reference to a name.
        * `stage_list.stage_work.0.recover_entities.0.entity_info_list.#.categories` - (Optional/Computed)  Categories for filtering entities.
        """
        return pulumi.get(self, "stage_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetRecoveryPlansEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlansEntityOwnerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterResult(dict):
    def __init__(__self__, *,
                 floating_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult'],
                 network_mapping_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListResult']):
        pulumi.set(__self__, "floating_ip_assignment_lists", floating_ip_assignment_lists)
        pulumi.set(__self__, "network_mapping_lists", network_mapping_lists)

    @property
    @pulumi.getter(name="floatingIpAssignmentLists")
    def floating_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult']:
        return pulumi.get(self, "floating_ip_assignment_lists")

    @property
    @pulumi.getter(name="networkMappingLists")
    def network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListResult']:
        return pulumi.get(self, "network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 vm_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "vm_ip_assignment_lists", vm_ip_assignment_lists)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="vmIpAssignmentLists")
    def vm_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult']:
        return pulumi.get(self, "vm_ip_assignment_lists")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 recovery_floating_ip_configs: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult'],
                 test_floating_ip_configs: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult'],
                 vm_nic_informations: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult'],
                 vm_references: Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']):
        pulumi.set(__self__, "recovery_floating_ip_configs", recovery_floating_ip_configs)
        pulumi.set(__self__, "test_floating_ip_configs", test_floating_ip_configs)
        pulumi.set(__self__, "vm_nic_informations", vm_nic_informations)
        pulumi.set(__self__, "vm_references", vm_references)

    @property
    @pulumi.getter(name="recoveryFloatingIpConfigs")
    def recovery_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult']:
        return pulumi.get(self, "recovery_floating_ip_configs")

    @property
    @pulumi.getter(name="testFloatingIpConfigs")
    def test_floating_ip_configs(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult']:
        return pulumi.get(self, "test_floating_ip_configs")

    @property
    @pulumi.getter(name="vmNicInformations")
    def vm_nic_informations(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult']:
        return pulumi.get(self, "vm_nic_informations")

    @property
    @pulumi.getter(name="vmReferences")
    def vm_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult']:
        return pulumi.get(self, "vm_references")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfigResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 should_allocate_dynamically: bool):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "should_allocate_dynamically", should_allocate_dynamically)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="shouldAllocateDynamically")
    def should_allocate_dynamically(self) -> bool:
        return pulumi.get(self, "should_allocate_dynamically")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformationResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 uuid: str):
        """
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 are_networks_stretched: bool,
                 availability_zone_network_mapping_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']):
        pulumi.set(__self__, "are_networks_stretched", are_networks_stretched)
        pulumi.set(__self__, "availability_zone_network_mapping_lists", availability_zone_network_mapping_lists)

    @property
    @pulumi.getter(name="areNetworksStretched")
    def are_networks_stretched(self) -> bool:
        return pulumi.get(self, "are_networks_stretched")

    @property
    @pulumi.getter(name="availabilityZoneNetworkMappingLists")
    def availability_zone_network_mapping_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult']:
        return pulumi.get(self, "availability_zone_network_mapping_lists")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListResult(dict):
    def __init__(__self__, *,
                 availability_zone_url: str,
                 cluster_reference_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult'],
                 recovery_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult'],
                 recovery_networks: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult'],
                 test_ip_assignment_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult'],
                 test_networks: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']):
        pulumi.set(__self__, "availability_zone_url", availability_zone_url)
        pulumi.set(__self__, "cluster_reference_lists", cluster_reference_lists)
        pulumi.set(__self__, "recovery_ip_assignment_lists", recovery_ip_assignment_lists)
        pulumi.set(__self__, "recovery_networks", recovery_networks)
        pulumi.set(__self__, "test_ip_assignment_lists", test_ip_assignment_lists)
        pulumi.set(__self__, "test_networks", test_networks)

    @property
    @pulumi.getter(name="availabilityZoneUrl")
    def availability_zone_url(self) -> str:
        return pulumi.get(self, "availability_zone_url")

    @property
    @pulumi.getter(name="clusterReferenceLists")
    def cluster_reference_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult']:
        return pulumi.get(self, "cluster_reference_lists")

    @property
    @pulumi.getter(name="recoveryIpAssignmentLists")
    def recovery_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult']:
        return pulumi.get(self, "recovery_ip_assignment_lists")

    @property
    @pulumi.getter(name="recoveryNetworks")
    def recovery_networks(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult']:
        return pulumi.get(self, "recovery_networks")

    @property
    @pulumi.getter(name="testIpAssignmentLists")
    def test_ip_assignment_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult']:
        return pulumi.get(self, "test_ip_assignment_lists")

    @property
    @pulumi.getter(name="testNetworks")
    def test_networks(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult']:
        return pulumi.get(self, "test_networks")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListResult(dict):
    def __init__(__self__, *,
                 ip_config_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult'],
                 vm_reference: 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult'):
        pulumi.set(__self__, "ip_config_lists", ip_config_lists)
        pulumi.set(__self__, "vm_reference", vm_reference)

    @property
    @pulumi.getter(name="ipConfigLists")
    def ip_config_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult']:
        return pulumi.get(self, "ip_config_lists")

    @property
    @pulumi.getter(name="vmReference")
    def vm_reference(self) -> 'outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult':
        return pulumi.get(self, "vm_reference")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigListResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkResult(dict):
    def __init__(__self__, *,
                 name: str,
                 subnet_lists: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult'],
                 use_vpc_reference: bool,
                 virtual_network_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult'],
                 vpc_references: Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']):
        """
        :param str name: (Optional) the name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_lists", subnet_lists)
        pulumi.set(__self__, "use_vpc_reference", use_vpc_reference)
        pulumi.set(__self__, "virtual_network_references", virtual_network_references)
        pulumi.set(__self__, "vpc_references", vpc_references)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetLists")
    def subnet_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult']:
        return pulumi.get(self, "subnet_lists")

    @property
    @pulumi.getter(name="useVpcReference")
    def use_vpc_reference(self) -> bool:
        return pulumi.get(self, "use_vpc_reference")

    @property
    @pulumi.getter(name="virtualNetworkReferences")
    def virtual_network_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult']:
        return pulumi.get(self, "virtual_network_references")

    @property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence['outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult']:
        return pulumi.get(self, "vpc_references")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetListResult(dict):
    def __init__(__self__, *,
                 external_connectivity_state: str,
                 gateway_ip: str,
                 prefix_length: int):
        pulumi.set(__self__, "external_connectivity_state", external_connectivity_state)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter(name="externalConnectivityState")
    def external_connectivity_state(self) -> str:
        return pulumi.get(self, "external_connectivity_state")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityProjectReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: (Required) The kind name (Default value: `project`).
        :param str name: (Optional) the name.
        :param str uuid: (Required) the UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        (Required) The kind name (Default value: `project`).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        (Required) the UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRecoveryPlansEntityStageListResult(dict):
    def __init__(__self__, *,
                 delay_time_secs: int,
                 stage_uuid: str,
                 stage_works: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkResult']):
        pulumi.set(__self__, "delay_time_secs", delay_time_secs)
        pulumi.set(__self__, "stage_uuid", stage_uuid)
        pulumi.set(__self__, "stage_works", stage_works)

    @property
    @pulumi.getter(name="delayTimeSecs")
    def delay_time_secs(self) -> int:
        return pulumi.get(self, "delay_time_secs")

    @property
    @pulumi.getter(name="stageUuid")
    def stage_uuid(self) -> str:
        return pulumi.get(self, "stage_uuid")

    @property
    @pulumi.getter(name="stageWorks")
    def stage_works(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkResult']:
        return pulumi.get(self, "stage_works")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkResult(dict):
    def __init__(__self__, *,
                 recover_entities: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult']):
        pulumi.set(__self__, "recover_entities", recover_entities)

    @property
    @pulumi.getter(name="recoverEntities")
    def recover_entities(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult']:
        return pulumi.get(self, "recover_entities")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityResult(dict):
    def __init__(__self__, *,
                 entity_info_lists: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult']):
        pulumi.set(__self__, "entity_info_lists", entity_info_lists)

    @property
    @pulumi.getter(name="entityInfoLists")
    def entity_info_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult']:
        return pulumi.get(self, "entity_info_lists")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListResult(dict):
    def __init__(__self__, *,
                 any_entity_reference_kind: str,
                 any_entity_reference_name: str,
                 any_entity_reference_uuid: str,
                 categories: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult'],
                 script_lists: Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult']):
        pulumi.set(__self__, "any_entity_reference_kind", any_entity_reference_kind)
        pulumi.set(__self__, "any_entity_reference_name", any_entity_reference_name)
        pulumi.set(__self__, "any_entity_reference_uuid", any_entity_reference_uuid)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "script_lists", script_lists)

    @property
    @pulumi.getter(name="anyEntityReferenceKind")
    def any_entity_reference_kind(self) -> str:
        return pulumi.get(self, "any_entity_reference_kind")

    @property
    @pulumi.getter(name="anyEntityReferenceName")
    def any_entity_reference_name(self) -> str:
        return pulumi.get(self, "any_entity_reference_name")

    @property
    @pulumi.getter(name="anyEntityReferenceUuid")
    def any_entity_reference_uuid(self) -> str:
        return pulumi.get(self, "any_entity_reference_uuid")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="scriptLists")
    def script_lists(self) -> Sequence['outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult']:
        return pulumi.get(self, "script_lists")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: (Optional) the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional) the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptListResult(dict):
    def __init__(__self__, *,
                 enable_script_exec: bool,
                 timeout: str):
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> bool:
        return pulumi.get(self, "enable_script_exec")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetRoleCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRolePermissionReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRolesEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 categories: Sequence['outputs.GetRolesEntityCategoryResult'],
                 description: str,
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 permission_reference_lists: Sequence['outputs.GetRolesEntityPermissionReferenceListResult'],
                 project_reference: Mapping[str, str],
                 role_id: str,
                 state: str):
        """
        :param str api_version: The version of the API.
        :param Sequence['GetRolesEntityCategoryArgs'] categories: - Categories for the role.
        :param str description: - The description of the role.
        :param Mapping[str, str] metadata: - The role kind metadata.
        :param str name: - the name(Optional).
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Sequence['GetRolesEntityPermissionReferenceListArgs'] permission_reference_lists: - (Required) List of permission references.
        :param Mapping[str, str] project_reference: - The reference to a project.
        :param str state: - The state of the role.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "permission_reference_lists", permission_reference_lists)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetRolesEntityCategoryResult']:
        """
        - Categories for the role.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        - The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The role kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="permissionReferenceLists")
    def permission_reference_lists(self) -> Sequence['outputs.GetRolesEntityPermissionReferenceListResult']:
        """
        - (Required) List of permission references.
        """
        return pulumi.get(self, "permission_reference_lists")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the role.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetRolesEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRolesEntityPermissionReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRolesMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name (Default value: project)(Required).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project)(Required).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetServiceGroupServiceListResult(dict):
    def __init__(__self__, *,
                 icmp_type_code_lists: Sequence['outputs.GetServiceGroupServiceListIcmpTypeCodeListResult'],
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetServiceGroupServiceListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetServiceGroupServiceListUdpPortRangeListResult']):
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetServiceGroupServiceListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupServiceListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupServiceListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetServiceGroupServiceListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceGroupServiceListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupServiceListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupsEntityResult(dict):
    def __init__(__self__, *,
                 associated_policies_lists: Sequence['outputs.GetServiceGroupsEntityAssociatedPoliciesListResult'],
                 service_groups: Sequence['outputs.GetServiceGroupsEntityServiceGroupResult'],
                 uuid: str):
        pulumi.set(__self__, "associated_policies_lists", associated_policies_lists)
        pulumi.set(__self__, "service_groups", service_groups)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="associatedPoliciesLists")
    def associated_policies_lists(self) -> Sequence['outputs.GetServiceGroupsEntityAssociatedPoliciesListResult']:
        return pulumi.get(self, "associated_policies_lists")

    @property
    @pulumi.getter(name="serviceGroups")
    def service_groups(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupResult']:
        return pulumi.get(self, "service_groups")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceGroupsEntityAssociatedPoliciesListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 is_system_defined: bool,
                 name: str,
                 service_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListResult']):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_system_defined", is_system_defined)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_lists", service_lists)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSystemDefined")
    def is_system_defined(self) -> bool:
        return pulumi.get(self, "is_system_defined")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListResult']:
        return pulumi.get(self, "service_lists")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListResult(dict):
    def __init__(__self__, *,
                 icmp_type_code_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult'],
                 protocol: str,
                 tcp_port_range_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult'],
                 udp_port_range_lists: Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult']):
        pulumi.set(__self__, "icmp_type_code_lists", icmp_type_code_lists)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "tcp_port_range_lists", tcp_port_range_lists)
        pulumi.set(__self__, "udp_port_range_lists", udp_port_range_lists)

    @property
    @pulumi.getter(name="icmpTypeCodeLists")
    def icmp_type_code_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult']:
        return pulumi.get(self, "icmp_type_code_lists")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="tcpPortRangeLists")
    def tcp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult']:
        return pulumi.get(self, "tcp_port_range_lists")

    @property
    @pulumi.getter(name="udpPortRangeLists")
    def udp_port_range_lists(self) -> Sequence['outputs.GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult']:
        return pulumi.get(self, "udp_port_range_lists")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeListResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeListResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetServiceGroupsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetStaticRoutesSpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetStaticRoutesSpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetStaticRoutesSpecResourceArgs'] resources: VPC route table resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetStaticRoutesSpecResourceResult']:
        """
        VPC route table resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetStaticRoutesSpecResourceResult(dict):
    def __init__(__self__, *,
                 default_route_nexthops: Sequence['outputs.GetStaticRoutesSpecResourceDefaultRouteNexthopResult'],
                 static_routes_lists: Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListResult']):
        """
        :param Sequence['GetStaticRoutesSpecResourceDefaultRouteNexthopArgs'] default_route_nexthops: default routes (present in spec resource)
        :param Sequence['GetStaticRoutesSpecResourceStaticRoutesListArgs'] static_routes_lists: list of static routes
        """
        pulumi.set(__self__, "default_route_nexthops", default_route_nexthops)
        pulumi.set(__self__, "static_routes_lists", static_routes_lists)

    @property
    @pulumi.getter(name="defaultRouteNexthops")
    def default_route_nexthops(self) -> Sequence['outputs.GetStaticRoutesSpecResourceDefaultRouteNexthopResult']:
        """
        default routes (present in spec resource)
        """
        return pulumi.get(self, "default_route_nexthops")

    @property
    @pulumi.getter(name="staticRoutesLists")
    def static_routes_lists(self) -> Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListResult']:
        """
        list of static routes
        """
        return pulumi.get(self, "static_routes_lists")


@pulumi.output_type
class GetStaticRoutesSpecResourceDefaultRouteNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesSpecResourceStaticRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 nexthops: Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListNexthopResult']):
        """
        :param str destination: destination ip address with prefix.
        :param Sequence['GetStaticRoutesSpecResourceStaticRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthops", nexthops)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesSpecResourceStaticRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")


@pulumi.output_type
class GetStaticRoutesSpecResourceStaticRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetStaticRoutesStatusExecutionContextResult'],
                 resources: Sequence['outputs.GetStaticRoutesStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetStaticRoutesStatusExecutionContextArgs'] execution_contexts: Execution Context of VPC.
        :param Sequence['GetStaticRoutesStatusResourceArgs'] resources: VPC route table resources status
        :param str state: The state of the vpc_route_table.
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetStaticRoutesStatusExecutionContextResult']:
        """
        Execution Context of VPC.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetStaticRoutesStatusResourceResult']:
        """
        VPC route table resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the vpc_route_table.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetStaticRoutesStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetStaticRoutesStatusResourceResult(dict):
    def __init__(__self__, *,
                 default_routes: Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteResult'],
                 dynamic_routes_lists: Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListResult'],
                 local_routes_lists: Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListResult'],
                 static_routes_lists: Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListResult']):
        """
        :param Sequence['GetStaticRoutesStatusResourceDefaultRouteArgs'] default_routes: default route. (present in status resource only )
        :param Sequence['GetStaticRoutesStatusResourceDynamicRoutesListArgs'] dynamic_routes_lists: list of dynamic routes (present in status resource only)
        :param Sequence['GetStaticRoutesStatusResourceLocalRoutesListArgs'] local_routes_lists: list of local routes (present in status resource only )
        :param Sequence['GetStaticRoutesStatusResourceStaticRoutesListArgs'] static_routes_lists: list of static routes
        """
        pulumi.set(__self__, "default_routes", default_routes)
        pulumi.set(__self__, "dynamic_routes_lists", dynamic_routes_lists)
        pulumi.set(__self__, "local_routes_lists", local_routes_lists)
        pulumi.set(__self__, "static_routes_lists", static_routes_lists)

    @property
    @pulumi.getter(name="defaultRoutes")
    def default_routes(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteResult']:
        """
        default route. (present in status resource only )
        """
        return pulumi.get(self, "default_routes")

    @property
    @pulumi.getter(name="dynamicRoutesLists")
    def dynamic_routes_lists(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListResult']:
        """
        list of dynamic routes (present in status resource only)
        """
        return pulumi.get(self, "dynamic_routes_lists")

    @property
    @pulumi.getter(name="localRoutesLists")
    def local_routes_lists(self) -> Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListResult']:
        """
        list of local routes (present in status resource only )
        """
        return pulumi.get(self, "local_routes_lists")

    @property
    @pulumi.getter(name="staticRoutesLists")
    def static_routes_lists(self) -> Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListResult']:
        """
        list of static routes
        """
        return pulumi.get(self, "static_routes_lists")


@pulumi.output_type
class GetStaticRoutesStatusResourceDefaultRouteResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceDefaultRouteNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDefaultRouteNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceDefaultRouteNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResourceDynamicRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceDynamicRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceDynamicRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResourceLocalRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceLocalRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceLocalRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceLocalRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetStaticRoutesStatusResourceStaticRoutesListResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 is_active: bool,
                 nexthops: Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListNexthopResult'],
                 priority: int):
        """
        :param str destination: destination ip address with prefix.
        :param bool is_active: Whether this route is currently active. Present in Status Resources.
        :param Sequence['GetStaticRoutesStatusResourceStaticRoutesListNexthopArgs'] nexthops: Targeted link to use as the nexthop in a route.
        :param int priority: The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "nexthops", nexthops)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        destination ip address with prefix.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether this route is currently active. Present in Status Resources.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def nexthops(self) -> Sequence['outputs.GetStaticRoutesStatusResourceStaticRoutesListNexthopResult']:
        """
        Targeted link to use as the nexthop in a route.
        """
        return pulumi.get(self, "nexthops")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The preference value assigned to this route. A higher value means greater preference. Present in Status Resource.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetStaticRoutesStatusResourceStaticRoutesListNexthopResult(dict):
    def __init__(__self__, *,
                 direct_connect_virtual_interface_reference: Mapping[str, str],
                 external_subnet_reference: Mapping[str, str],
                 local_subnet_reference: Mapping[str, str],
                 nexthop_ip_address: str,
                 vpn_connection_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] direct_connect_virtual_interface_reference: The reference to a direct_connect_virtual_interface
        :param Mapping[str, str] external_subnet_reference: The reference to a subnet
        :param Mapping[str, str] local_subnet_reference: The reference to a subnet
        :param Mapping[str, str] vpn_connection_reference: The reference to a vpn_connection
        """
        pulumi.set(__self__, "direct_connect_virtual_interface_reference", direct_connect_virtual_interface_reference)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)
        pulumi.set(__self__, "local_subnet_reference", local_subnet_reference)
        pulumi.set(__self__, "nexthop_ip_address", nexthop_ip_address)
        pulumi.set(__self__, "vpn_connection_reference", vpn_connection_reference)

    @property
    @pulumi.getter(name="directConnectVirtualInterfaceReference")
    def direct_connect_virtual_interface_reference(self) -> Mapping[str, str]:
        """
        The reference to a direct_connect_virtual_interface
        """
        return pulumi.get(self, "direct_connect_virtual_interface_reference")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "external_subnet_reference")

    @property
    @pulumi.getter(name="localSubnetReference")
    def local_subnet_reference(self) -> Mapping[str, str]:
        """
        The reference to a subnet
        """
        return pulumi.get(self, "local_subnet_reference")

    @property
    @pulumi.getter(name="nexthopIpAddress")
    def nexthop_ip_address(self) -> str:
        return pulumi.get(self, "nexthop_ip_address")

    @property
    @pulumi.getter(name="vpnConnectionReference")
    def vpn_connection_reference(self) -> Mapping[str, str]:
        """
        The reference to a vpn_connection
        """
        return pulumi.get(self, "vpn_connection_reference")


@pulumi.output_type
class GetSubnetAdditionalFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: - the name(Optional).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetMessageListResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, Any],
                 message: str,
                 reason: str):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def details(self) -> Mapping[str, Any]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetSubnetsEntityResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 availability_zone_reference: Mapping[str, str],
                 categories: Sequence['outputs.GetSubnetsEntityCategoryResult'],
                 cluster_name: str,
                 cluster_reference: Mapping[str, str],
                 cluster_uuid: str,
                 default_gateway_ip: str,
                 description: str,
                 dhcp_domain_name_server_lists: Sequence[str],
                 dhcp_domain_search_lists: Sequence[str],
                 dhcp_options: Mapping[str, str],
                 dhcp_server_address: Mapping[str, str],
                 dhcp_server_address_port: int,
                 enable_nat: bool,
                 ip_config_pool_list_ranges: Sequence[str],
                 is_external: bool,
                 message_lists: Sequence['outputs.GetSubnetsEntityMessageListResult'],
                 metadata: Mapping[str, str],
                 name: str,
                 network_function_chain_reference: Mapping[str, str],
                 owner_reference: Mapping[str, str],
                 prefix_length: int,
                 project_reference: Mapping[str, str],
                 state: str,
                 subnet_id: str,
                 subnet_ip: str,
                 subnet_name: str,
                 subnet_type: str,
                 vlan_id: int,
                 vpc_reference: Mapping[str, str],
                 vswitch_name: str):
        """
        :param str api_version: version of the API
        :param Mapping[str, str] availability_zone_reference: The reference to a availability_zone.
        :param Sequence['GetSubnetsEntityCategoryArgs'] categories: The API Version.
        :param str cluster_name: The name of a cluster.
        :param Mapping[str, str] cluster_reference: The reference to a cluster.
        :param str default_gateway_ip: Default gateway IP address.
        :param str description: A description for subnet.
        :param Sequence[str] dhcp_domain_search_lists: DHCP domain search list for a subnet.
        :param Mapping[str, str] dhcp_options: Spec for defining DHCP options.
        :param Mapping[str, str] dhcp_server_address: Host address.
        :param int dhcp_server_address_port: Port Number.
        :param Mapping[str, str] metadata: The subnet kind metadata.
        :param str name: the name.
        :param Mapping[str, str] network_function_chain_reference: The reference to a network_function_chain.
        :param Mapping[str, str] owner_reference: The reference to a user.
        :param int prefix_length: -. IP prefix length of the Subnet.
        :param Mapping[str, str] project_reference: The reference to a project.
        :param str state: The state of the subnet.
        :param str subnet_ip: Subnet IP address.
        :param str subnet_type: The type of the subnet.
        :param int vlan_id: VLAN assigned to the subnet.
        :param str vswitch_name: The name of the vswitch.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "availability_zone_reference", availability_zone_reference)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_reference", cluster_reference)
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)
        pulumi.set(__self__, "default_gateway_ip", default_gateway_ip)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dhcp_domain_name_server_lists", dhcp_domain_name_server_lists)
        pulumi.set(__self__, "dhcp_domain_search_lists", dhcp_domain_search_lists)
        pulumi.set(__self__, "dhcp_options", dhcp_options)
        pulumi.set(__self__, "dhcp_server_address", dhcp_server_address)
        pulumi.set(__self__, "dhcp_server_address_port", dhcp_server_address_port)
        pulumi.set(__self__, "enable_nat", enable_nat)
        pulumi.set(__self__, "ip_config_pool_list_ranges", ip_config_pool_list_ranges)
        pulumi.set(__self__, "is_external", is_external)
        pulumi.set(__self__, "message_lists", message_lists)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "project_reference", project_reference)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_ip", subnet_ip)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "subnet_type", subnet_type)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vpc_reference", vpc_reference)
        pulumi.set(__self__, "vswitch_name", vswitch_name)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        version of the API
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="availabilityZoneReference")
    def availability_zone_reference(self) -> Mapping[str, str]:
        """
        The reference to a availability_zone.
        """
        return pulumi.get(self, "availability_zone_reference")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetSubnetsEntityCategoryResult']:
        """
        The API Version.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of a cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Mapping[str, str]:
        """
        The reference to a cluster.
        """
        return pulumi.get(self, "cluster_reference")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> str:
        return pulumi.get(self, "cluster_uuid")

    @property
    @pulumi.getter(name="defaultGatewayIp")
    def default_gateway_ip(self) -> str:
        """
        Default gateway IP address.
        """
        return pulumi.get(self, "default_gateway_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for subnet.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpDomainNameServerLists")
    def dhcp_domain_name_server_lists(self) -> Sequence[str]:
        return pulumi.get(self, "dhcp_domain_name_server_lists")

    @property
    @pulumi.getter(name="dhcpDomainSearchLists")
    def dhcp_domain_search_lists(self) -> Sequence[str]:
        """
        DHCP domain search list for a subnet.
        """
        return pulumi.get(self, "dhcp_domain_search_lists")

    @property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Mapping[str, str]:
        """
        Spec for defining DHCP options.
        """
        return pulumi.get(self, "dhcp_options")

    @property
    @pulumi.getter(name="dhcpServerAddress")
    def dhcp_server_address(self) -> Mapping[str, str]:
        """
        Host address.
        """
        return pulumi.get(self, "dhcp_server_address")

    @property
    @pulumi.getter(name="dhcpServerAddressPort")
    def dhcp_server_address_port(self) -> int:
        """
        Port Number.
        """
        return pulumi.get(self, "dhcp_server_address_port")

    @property
    @pulumi.getter(name="enableNat")
    def enable_nat(self) -> bool:
        return pulumi.get(self, "enable_nat")

    @property
    @pulumi.getter(name="ipConfigPoolListRanges")
    def ip_config_pool_list_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_config_pool_list_ranges")

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> bool:
        return pulumi.get(self, "is_external")

    @property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence['outputs.GetSubnetsEntityMessageListResult']:
        return pulumi.get(self, "message_lists")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The subnet kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        """
        The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        -. IP prefix length of the Subnet.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        """
        The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the subnet.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> str:
        """
        Subnet IP address.
        """
        return pulumi.get(self, "subnet_ip")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> str:
        """
        The type of the subnet.
        """
        return pulumi.get(self, "subnet_type")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        VLAN assigned to the subnet.
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "vpc_reference")

    @property
    @pulumi.getter(name="vswitchName")
    def vswitch_name(self) -> str:
        """
        The name of the vswitch.
        """
        return pulumi.get(self, "vswitch_name")


@pulumi.output_type
class GetSubnetsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name.
        :param str value: value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetsEntityMessageListResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, Any],
                 message: str,
                 reason: str):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def details(self) -> Mapping[str, Any]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetSubnetsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: The kind name (Default value: project.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind name (Default value: project.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetUserAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - (Optional) The name for the user
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserDirectoryServiceUserResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUserDirectoryServiceUserDirectoryServiceReferenceResult'],
                 user_principal_name: str):
        """
        :param Sequence['GetUserDirectoryServiceUserDirectoryServiceReferenceArgs'] directory_service_references: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param str user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUserDirectoryServiceUserDirectoryServiceReferenceResult']:
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class GetUserDirectoryServiceUserDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserGroupDirectoryServiceUserGroupResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult'],
                 distinguished_name: str):
        """
        :param Sequence['GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceArgs'] directory_service_references: - The reference to a directory service. See #reference for to look the supported attributes.
        :param str distinguished_name: - The Distinguished name for the user group
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult']:
        """
        - The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        """
        - The Distinguished name for the user group
        """
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class GetUserGroupDirectoryServiceUserGroupDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsEntityResult(dict):
    def __init__(__self__, *,
                 access_control_policy_reference_lists: Sequence['outputs.GetUserGroupsEntityAccessControlPolicyReferenceListResult'],
                 api_version: str,
                 categories: Sequence['outputs.GetUserGroupsEntityCategoryResult'],
                 directory_service_user_groups: Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupResult'],
                 display_name: str,
                 metadata: Mapping[str, str],
                 owner_reference: Mapping[str, str],
                 project_reference_lists: Sequence['outputs.GetUserGroupsEntityProjectReferenceListResult'],
                 state: str,
                 user_group_type: str,
                 project_reference: Optional[Mapping[str, str]] = None):
        """
        :param Sequence['GetUserGroupsEntityAccessControlPolicyReferenceListArgs'] access_control_policy_reference_lists: - List of ACP references. See #reference for more details.
        :param str api_version: The version of the API.
        :param Sequence['GetUserGroupsEntityCategoryArgs'] categories: - The Categories for the user group.
        :param Sequence['GetUserGroupsEntityDirectoryServiceUserGroupArgs'] directory_service_user_groups: - A Directory Service User Group.
        :param str display_name: - The display name of the user group.
        :param Mapping[str, str] metadata: - The user group kind metadata.
        :param Mapping[str, str] owner_reference: - The reference to a user.
        :param Sequence['GetUserGroupsEntityProjectReferenceListArgs'] project_reference_lists: - A list of projects the user is part of. See #reference for more details.
        :param str state: - The state of the entity.
        :param str user_group_type: - The type of the user group.
        :param Mapping[str, str] project_reference: - The reference to a project.
        """
        pulumi.set(__self__, "access_control_policy_reference_lists", access_control_policy_reference_lists)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "directory_service_user_groups", directory_service_user_groups)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference_lists", project_reference_lists)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "user_group_type", user_group_type)
        if project_reference is not None:
            pulumi.set(__self__, "project_reference", project_reference)

    @property
    @pulumi.getter(name="accessControlPolicyReferenceLists")
    def access_control_policy_reference_lists(self) -> Sequence['outputs.GetUserGroupsEntityAccessControlPolicyReferenceListResult']:
        """
        - List of ACP references. See #reference for more details.
        """
        return pulumi.get(self, "access_control_policy_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetUserGroupsEntityCategoryResult']:
        """
        - The Categories for the user group.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="directoryServiceUserGroups")
    def directory_service_user_groups(self) -> Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupResult']:
        """
        - A Directory Service User Group.
        """
        return pulumi.get(self, "directory_service_user_groups")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        - The display name of the user group.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The user group kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReferenceLists")
    def project_reference_lists(self) -> Sequence['outputs.GetUserGroupsEntityProjectReferenceListResult']:
        """
        - A list of projects the user is part of. See #reference for more details.
        """
        return pulumi.get(self, "project_reference_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the entity.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userGroupType")
    def user_group_type(self) -> str:
        """
        - The type of the user group.
        """
        return pulumi.get(self, "user_group_type")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[Mapping[str, str]]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")


@pulumi.output_type
class GetUserGroupsEntityAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the key name.
        :param str uuid: - User group UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - User group UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the key name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserGroupsEntityDirectoryServiceUserGroupResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult'],
                 distinguished_name: str):
        """
        :param Sequence['GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceArgs'] directory_service_references: - The reference to a directory service. See #reference for to look the supported attributes.
        :param str distinguished_name: - The Distinguished name for the user group
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "distinguished_name", distinguished_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult']:
        """
        - The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="distinguishedName")
    def distinguished_name(self) -> str:
        """
        - The Distinguished name for the user group
        """
        return pulumi.get(self, "distinguished_name")


@pulumi.output_type
class GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the key name.
        :param str uuid: - User group UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - User group UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsEntityProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the key name.
        :param str uuid: - User group UUID.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - User group UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserGroupsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetUserIdentityProviderUserResult(dict):
    def __init__(__self__, *,
                 identity_provider_references: Sequence['outputs.GetUserIdentityProviderUserIdentityProviderReferenceResult'],
                 username: str):
        """
        :param Sequence['GetUserIdentityProviderUserIdentityProviderReferenceArgs'] identity_provider_references: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param str username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_references", identity_provider_references)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReferences")
    def identity_provider_references(self) -> Sequence['outputs.GetUserIdentityProviderUserIdentityProviderReferenceResult']:
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_references")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUserIdentityProviderUserIdentityProviderReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUserProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - (Optional) The name for the user
        :param str uuid: - (Optional) The UUID for the user.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - (Optional) The name for the user
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - (Optional) The UUID for the user.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityResult(dict):
    def __init__(__self__, *,
                 access_control_policy_reference_lists: Sequence['outputs.GetUsersEntityAccessControlPolicyReferenceListResult'],
                 api_version: str,
                 categories: Sequence['outputs.GetUsersEntityCategoryResult'],
                 directory_service_users: Sequence['outputs.GetUsersEntityDirectoryServiceUserResult'],
                 display_name: str,
                 identity_provider_users: Sequence['outputs.GetUsersEntityIdentityProviderUserResult'],
                 metadata: Mapping[str, str],
                 name: str,
                 owner_reference: Mapping[str, str],
                 project_reference_lists: Sequence['outputs.GetUsersEntityProjectReferenceListResult'],
                 state: str,
                 user_type: str,
                 project_reference: Optional[Mapping[str, str]] = None):
        """
        :param Sequence['GetUsersEntityAccessControlPolicyReferenceListArgs'] access_control_policy_reference_lists: - List of ACP references. See #reference for more details.
        :param str api_version: The version of the API.
        :param Sequence['GetUsersEntityCategoryArgs'] categories: - (Optional) Categories for the user.
        :param Sequence['GetUsersEntityDirectoryServiceUserArgs'] directory_service_users: - (Optional) The directory service user configuration. See below for more information.
        :param str display_name: - The display name of the user (common name) provided by the directory service.
        :param Sequence['GetUsersEntityIdentityProviderUserArgs'] identity_provider_users: - (Optional) (Optional) The identity provider user configuration. See below for more information.
        :param Mapping[str, str] metadata: - The user kind metadata.
        :param str name: - the name(Optional).
        :param Mapping[str, str] owner_reference: - (Optional) The reference to a user.
        :param Sequence['GetUsersEntityProjectReferenceListArgs'] project_reference_lists: - A list of projects the user is part of. See #reference for more details.
        :param str state: - The state of the entity.
        :param str user_type: - The name of the user.
        :param Mapping[str, str] project_reference: - (Optional) The reference to a project.
        """
        pulumi.set(__self__, "access_control_policy_reference_lists", access_control_policy_reference_lists)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "directory_service_users", directory_service_users)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "identity_provider_users", identity_provider_users)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_reference", owner_reference)
        pulumi.set(__self__, "project_reference_lists", project_reference_lists)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "user_type", user_type)
        if project_reference is not None:
            pulumi.set(__self__, "project_reference", project_reference)

    @property
    @pulumi.getter(name="accessControlPolicyReferenceLists")
    def access_control_policy_reference_lists(self) -> Sequence['outputs.GetUsersEntityAccessControlPolicyReferenceListResult']:
        """
        - List of ACP references. See #reference for more details.
        """
        return pulumi.get(self, "access_control_policy_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetUsersEntityCategoryResult']:
        """
        - (Optional) Categories for the user.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="directoryServiceUsers")
    def directory_service_users(self) -> Sequence['outputs.GetUsersEntityDirectoryServiceUserResult']:
        """
        - (Optional) The directory service user configuration. See below for more information.
        """
        return pulumi.get(self, "directory_service_users")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        - The display name of the user (common name) provided by the directory service.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="identityProviderUsers")
    def identity_provider_users(self) -> Sequence['outputs.GetUsersEntityIdentityProviderUserResult']:
        """
        - (Optional) (Optional) The identity provider user configuration. See below for more information.
        """
        return pulumi.get(self, "identity_provider_users")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The user kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        """
        - (Optional) The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReferenceLists")
    def project_reference_lists(self) -> Sequence['outputs.GetUsersEntityProjectReferenceListResult']:
        """
        - A list of projects the user is part of. See #reference for more details.
        """
        return pulumi.get(self, "project_reference_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        - The state of the entity.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        """
        - The name of the user.
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[Mapping[str, str]]:
        """
        - (Optional) The reference to a project.
        """
        return pulumi.get(self, "project_reference")


@pulumi.output_type
class GetUsersEntityAccessControlPolicyReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name(Optional).
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersEntityDirectoryServiceUserResult(dict):
    def __init__(__self__, *,
                 default_user_principal_name: str,
                 directory_service_references: Sequence['outputs.GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult'],
                 user_principal_name: str):
        """
        :param Sequence['GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceArgs'] directory_service_references: - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        :param str user_principal_name: - (Optional) The UserPrincipalName of the user from the directory service.
        """
        pulumi.set(__self__, "default_user_principal_name", default_user_principal_name)
        pulumi.set(__self__, "directory_service_references", directory_service_references)
        pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="defaultUserPrincipalName")
    def default_user_principal_name(self) -> str:
        return pulumi.get(self, "default_user_principal_name")

    @property
    @pulumi.getter(name="directoryServiceReferences")
    def directory_service_references(self) -> Sequence['outputs.GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult']:
        """
        - (Optional) The reference to a directory service. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "directory_service_references")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        - (Optional) The UserPrincipalName of the user from the directory service.
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class GetUsersEntityDirectoryServiceUserDirectoryServiceReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityIdentityProviderUserResult(dict):
    def __init__(__self__, *,
                 identity_provider_references: Sequence['outputs.GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult'],
                 username: str):
        """
        :param Sequence['GetUsersEntityIdentityProviderUserIdentityProviderReferenceArgs'] identity_provider_references: - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        :param str username: - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        pulumi.set(__self__, "identity_provider_references", identity_provider_references)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="identityProviderReferences")
    def identity_provider_references(self) -> Sequence['outputs.GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult']:
        """
        - (Optional) The reference to a identity provider. See #reference for to look the supported attributes.
        """
        return pulumi.get(self, "identity_provider_references")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        - (Optional) The username from identity provider. Name ID for SAML Identity Provider.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUsersEntityIdentityProviderUserIdentityProviderReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersEntityProjectReferenceListResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 uuid: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        :param str name: - the name(Optional).
        :param str uuid: - the UUID(Required).
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - the UUID(Required).
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetUsersMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str):
        """
        :param str kind: - The kind name. (Default depends on the resource you are referencing)
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name. (Default depends on the resource you are referencing)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")


@pulumi.output_type
class GetVirtualMachineCategoryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: - the name.
        :param str value: - value of the key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        - value of the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVirtualMachineDiskListResult(dict):
    def __init__(__self__, *,
                 data_source_reference: Mapping[str, str],
                 device_properties: Sequence['outputs.GetVirtualMachineDiskListDevicePropertyResult'],
                 disk_size_bytes: int,
                 disk_size_mib: int,
                 storage_configs: Sequence['outputs.GetVirtualMachineDiskListStorageConfigResult'],
                 uuid: str,
                 volume_group_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] data_source_reference: Reference to a data source.
        :param Sequence['GetVirtualMachineDiskListDevicePropertyArgs'] device_properties: Properties to a device.
        :param int disk_size_bytes: Size of the disk in Bytes.
        :param int disk_size_mib: Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        :param str uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        :param Mapping[str, str] volume_group_reference: Reference to a volume group.
        """
        pulumi.set(__self__, "data_source_reference", data_source_reference)
        pulumi.set(__self__, "device_properties", device_properties)
        pulumi.set(__self__, "disk_size_bytes", disk_size_bytes)
        pulumi.set(__self__, "disk_size_mib", disk_size_mib)
        pulumi.set(__self__, "storage_configs", storage_configs)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "volume_group_reference", volume_group_reference)

    @property
    @pulumi.getter(name="dataSourceReference")
    def data_source_reference(self) -> Mapping[str, str]:
        """
        Reference to a data source.
        """
        return pulumi.get(self, "data_source_reference")

    @property
    @pulumi.getter(name="deviceProperties")
    def device_properties(self) -> Sequence['outputs.GetVirtualMachineDiskListDevicePropertyResult']:
        """
        Properties to a device.
        """
        return pulumi.get(self, "device_properties")

    @property
    @pulumi.getter(name="diskSizeBytes")
    def disk_size_bytes(self) -> int:
        """
        Size of the disk in Bytes.
        """
        return pulumi.get(self, "disk_size_bytes")

    @property
    @pulumi.getter(name="diskSizeMib")
    def disk_size_mib(self) -> int:
        """
        Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB - when that field is present.
        """
        return pulumi.get(self, "disk_size_mib")

    @property
    @pulumi.getter(name="storageConfigs")
    def storage_configs(self) -> Sequence['outputs.GetVirtualMachineDiskListStorageConfigResult']:
        return pulumi.get(self, "storage_configs")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="volumeGroupReference")
    def volume_group_reference(self) -> Mapping[str, str]:
        """
        Reference to a volume group.
        """
        return pulumi.get(self, "volume_group_reference")


@pulumi.output_type
class GetVirtualMachineDiskListDevicePropertyResult(dict):
    def __init__(__self__, *,
                 device_type: str,
                 disk_address: Mapping[str, str]):
        """
        :param str device_type: - A Disk type (default: DISK).
        :param Mapping[str, str] disk_address: - Address of disk to boot from.
        """
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "disk_address", disk_address)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        - A Disk type (default: DISK).
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="diskAddress")
    def disk_address(self) -> Mapping[str, str]:
        """
        - Address of disk to boot from.
        """
        return pulumi.get(self, "disk_address")


@pulumi.output_type
class GetVirtualMachineDiskListStorageConfigResult(dict):
    def __init__(__self__, *,
                 flash_mode: str,
                 storage_container_references: Sequence['outputs.GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult']):
        """
        :param str flash_mode: - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        :param Sequence['GetVirtualMachineDiskListStorageConfigStorageContainerReferenceArgs'] storage_container_references: - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
               * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
               * `storage_container_reference.#.kind`: - kind of the container reference
               * `storage_container_reference.#.name`: - name of the container reference
               * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        pulumi.set(__self__, "flash_mode", flash_mode)
        pulumi.set(__self__, "storage_container_references", storage_container_references)

    @property
    @pulumi.getter(name="flashMode")
    def flash_mode(self) -> str:
        """
        - State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.
        """
        return pulumi.get(self, "flash_mode")

    @property
    @pulumi.getter(name="storageContainerReferences")
    def storage_container_references(self) -> Sequence['outputs.GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult']:
        """
        - Reference to a kind. Either one of (kind, uuid) or url needs to be specified.
        * `storage_container_reference.#.url`: - GET query on the URL will provide information on the source.
        * `storage_container_reference.#.kind`: - kind of the container reference
        * `storage_container_reference.#.name`: - name of the container reference
        * `storage_container_reference.#.uuid`: - uiid of the container reference
        """
        return pulumi.get(self, "storage_container_references")


@pulumi.output_type
class GetVirtualMachineDiskListStorageConfigStorageContainerReferenceResult(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 url: str,
                 uuid: str):
        """
        :param str kind: - The kind name (Default value: project).
        :param str name: - the name.
        :param str uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetVirtualMachineGpuListResult(dict):
    def __init__(__self__, *,
                 device_id: int,
                 fraction: int,
                 frame_buffer_size_mib: int,
                 guest_driver_version: str,
                 mode: str,
                 name: str,
                 num_virtual_display_heads: int,
                 pci_address: str,
                 uuid: str,
                 vendor: str):
        """
        :param int device_id: - (Computed) The device ID of the GPU.
        :param int fraction: Fraction of the physical GPU assigned.
        :param int frame_buffer_size_mib: - GPU frame buffer size in MiB.
        :param str guest_driver_version: - Last determined guest driver version.
        :param str mode: - The mode of this GPU.
        :param str name: - the name.
        :param int num_virtual_display_heads: - Number of supported virtual display heads.
        :param str pci_address: GPU {segment:bus:device:function} (sbdf) address if assigned.
        :param str uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        :param str vendor: - The vendor of the GPU.
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "fraction", fraction)
        pulumi.set(__self__, "frame_buffer_size_mib", frame_buffer_size_mib)
        pulumi.set(__self__, "guest_driver_version", guest_driver_version)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_virtual_display_heads", num_virtual_display_heads)
        pulumi.set(__self__, "pci_address", pci_address)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        """
        - (Computed) The device ID of the GPU.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def fraction(self) -> int:
        """
        Fraction of the physical GPU assigned.
        """
        return pulumi.get(self, "fraction")

    @property
    @pulumi.getter(name="frameBufferSizeMib")
    def frame_buffer_size_mib(self) -> int:
        """
        - GPU frame buffer size in MiB.
        """
        return pulumi.get(self, "frame_buffer_size_mib")

    @property
    @pulumi.getter(name="guestDriverVersion")
    def guest_driver_version(self) -> str:
        """
        - Last determined guest driver version.
        """
        return pulumi.get(self, "guest_driver_version")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        - The mode of this GPU.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numVirtualDisplayHeads")
    def num_virtual_display_heads(self) -> int:
        """
        - Number of supported virtual display heads.
        """
        return pulumi.get(self, "num_virtual_display_heads")

    @property
    @pulumi.getter(name="pciAddress")
    def pci_address(self) -> str:
        """
        GPU {segment:bus:device:function} (sbdf) address if assigned.
        """
        return pulumi.get(self, "pci_address")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        - The vendor of the GPU.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetVirtualMachineMessageListResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, Any],
                 message: str,
                 reason: str):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def details(self) -> Mapping[str, Any]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetVirtualMachineNicListResult(dict):
    def __init__(__self__, *,
                 floating_ip: str,
                 ip_endpoint_lists: Sequence['outputs.GetVirtualMachineNicListIpEndpointListResult'],
                 is_connected: str,
                 mac_address: str,
                 model: str,
                 network_function_chain_reference: Mapping[str, str],
                 network_function_nic_type: str,
                 nic_type: str,
                 num_queues: int,
                 subnet_name: str,
                 subnet_uuid: str,
                 uuid: str):
        """
        :param str floating_ip: -  The Floating IP associated with the vnic.
        :param Sequence['GetVirtualMachineNicListIpEndpointListArgs'] ip_endpoint_lists: - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        :param str is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        :param str mac_address: - The MAC address for the adapter.
        :param str model: - The model of this NIC. (Options : VIRTIO , E1000).
        :param Mapping[str, str] network_function_chain_reference: - The reference to a network_function_chain.
        :param str network_function_nic_type: - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        :param str nic_type: - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        :param int num_queues: - The number of tx/rx queue pairs for this NIC.
        :param str subnet_name: - The name of the subnet reference to.
        :param str subnet_uuid: - The reference to a subnet.
        :param str uuid: - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "ip_endpoint_lists", ip_endpoint_lists)
        pulumi.set(__self__, "is_connected", is_connected)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        pulumi.set(__self__, "network_function_nic_type", network_function_nic_type)
        pulumi.set(__self__, "nic_type", nic_type)
        pulumi.set(__self__, "num_queues", num_queues)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "subnet_uuid", subnet_uuid)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> str:
        """
        -  The Floating IP associated with the vnic.
        """
        return pulumi.get(self, "floating_ip")

    @property
    @pulumi.getter(name="ipEndpointLists")
    def ip_endpoint_lists(self) -> Sequence['outputs.GetVirtualMachineNicListIpEndpointListResult']:
        """
        - IP endpoints for the adapter. Currently, IPv4 addresses are supported.
        """
        return pulumi.get(self, "ip_endpoint_lists")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> str:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        - The MAC address for the adapter.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        - The model of this NIC. (Options : VIRTIO , E1000).
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, str]:
        """
        - The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @property
    @pulumi.getter(name="networkFunctionNicType")
    def network_function_nic_type(self) -> str:
        """
        - The type of this Network function NIC. Defaults to INGRESS. (Options : INGRESS , EGRESS , TAP).
        """
        return pulumi.get(self, "network_function_nic_type")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> str:
        """
        - The type of this NIC. Defaults to NORMAL_NIC. (Options : NORMAL_NIC , DIRECT_NIC , NETWORK_FUNCTION_NIC).
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter(name="numQueues")
    def num_queues(self) -> int:
        """
        - The number of tx/rx queue pairs for this NIC.
        """
        return pulumi.get(self, "num_queues")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        """
        - The name of the subnet reference to.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="subnetUuid")
    def subnet_uuid(self) -> str:
        """
        - The reference to a subnet.
        """
        return pulumi.get(self, "subnet_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        - The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetVirtualMachineNicListIpEndpointListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 type: str):
        """
        :param str ip: - Address string.
        :param str type: - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        - Address string.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        - Address type. It can only be "ASSIGNED" in the spec. If no type is specified in the spec, the default type is set to "ASSIGNED". (Options : ASSIGNED , LEARNED)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualMachineSerialPortListResult(dict):
    def __init__(__self__, *,
                 index: int,
                 is_connected: bool):
        """
        :param int index: - Index of the serial port (int).
        :param bool is_connected: - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter
    def index(self) -> int:
        """
        - Index of the serial port (int).
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> bool:
        """
        - Indicates whether the serial port connection is connected or not (`true` or `false`).
        """
        return pulumi.get(self, "is_connected")


@pulumi.output_type
class GetVpcSpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetVpcSpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetVpcSpecResourceArgs'] resources: VPC resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcSpecResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetVpcSpecResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcSpecResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcSpecResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcSpecResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcSpecResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcSpecResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcSpecResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcSpecResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcSpecResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcSpecResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcSpecResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcSpecResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcSpecResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetVpcStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetVpcStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetVpcStatusExecutionContextArgs'] execution_contexts: Execution Context of VPC.
        :param str name: - the name.
        :param Sequence['GetVpcStatusResourceArgs'] resources: VPC resources status
        :param str state: The state of the VPC
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetVpcStatusExecutionContextResult']:
        """
        Execution Context of VPC.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcStatusResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the VPC
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpcStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetVpcStatusResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcStatusResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcStatusResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcStatusResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcStatusResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcStatusResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcStatusResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcStatusResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcStatusResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcStatusResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcStatusResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcStatusResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 active_gateway_nodes: Sequence['outputs.GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult'],
                 external_ip_lists: Sequence[str],
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Sequence['GetVpcStatusResourceExternalSubnetListActiveGatewayNodeArgs'] active_gateway_nodes: Active Gateway Node. Only present in VPC Status Resources.
        :param Sequence[str] external_ip_lists: List of external subnets attached to this VPC. Only present in VPC Status Resources .
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "active_gateway_nodes", active_gateway_nodes)
        pulumi.set(__self__, "external_ip_lists", external_ip_lists)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="activeGatewayNodes")
    def active_gateway_nodes(self) -> Sequence['outputs.GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult']:
        """
        Active Gateway Node. Only present in VPC Status Resources.
        """
        return pulumi.get(self, "active_gateway_nodes")

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Sequence[str]:
        """
        List of external subnets attached to this VPC. Only present in VPC Status Resources .
        """
        return pulumi.get(self, "external_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcStatusResourceExternalSubnetListActiveGatewayNodeResult(dict):
    def __init__(__self__, *,
                 host_reference: Mapping[str, str],
                 ip_address: str):
        """
        :param Mapping[str, str] host_reference: Reference to host.
        :param str ip_address: ip address.
        """
        pulumi.set(__self__, "host_reference", host_reference)
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, str]:
        """
        Reference to host.
        """
        return pulumi.get(self, "host_reference")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetVpcStatusResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcsEntityResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, str],
                 specs: Sequence['outputs.GetVpcsEntitySpecResult'],
                 statuses: Sequence['outputs.GetVpcsEntityStatusResult']):
        """
        :param Mapping[str, str] metadata: - The vpc kind metadata.
        :param Sequence['GetVpcsEntitySpecArgs'] specs: VPC input spec
        :param Sequence['GetVpcsEntityStatusArgs'] statuses: VPC output status
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        - The vpc kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetVpcsEntitySpecResult']:
        """
        VPC input spec
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetVpcsEntityStatusResult']:
        """
        VPC output status
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetVpcsEntitySpecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Sequence['outputs.GetVpcsEntitySpecResourceResult']):
        """
        :param str name: - the name.
        :param Sequence['GetVpcsEntitySpecResourceArgs'] resources: VPC resources status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcsEntitySpecResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetVpcsEntitySpecResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcsEntitySpecResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcsEntitySpecResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcsEntitySpecResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcsEntitySpecResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcsEntitySpecResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcsEntitySpecResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcsEntitySpecResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcsEntitySpecResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcsEntityStatusResult(dict):
    def __init__(__self__, *,
                 execution_contexts: Sequence['outputs.GetVpcsEntityStatusExecutionContextResult'],
                 name: str,
                 resources: Sequence['outputs.GetVpcsEntityStatusResourceResult'],
                 state: str):
        """
        :param Sequence['GetVpcsEntityStatusExecutionContextArgs'] execution_contexts: Execution Context of VPC.
        :param str name: - the name.
        :param Sequence['GetVpcsEntityStatusResourceArgs'] resources: VPC resources status
        :param str state: The state of the VPC
        """
        pulumi.set(__self__, "execution_contexts", execution_contexts)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="executionContexts")
    def execution_contexts(self) -> Sequence['outputs.GetVpcsEntityStatusExecutionContextResult']:
        """
        Execution Context of VPC.
        """
        return pulumi.get(self, "execution_contexts")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetVpcsEntityStatusResourceResult']:
        """
        VPC resources status
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the VPC
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpcsEntityStatusExecutionContextResult(dict):
    def __init__(__self__, *,
                 task_uuids: Sequence[str]):
        pulumi.set(__self__, "task_uuids", task_uuids)

    @property
    @pulumi.getter(name="taskUuids")
    def task_uuids(self) -> Sequence[str]:
        return pulumi.get(self, "task_uuids")


@pulumi.output_type
class GetVpcsEntityStatusResourceResult(dict):
    def __init__(__self__, *,
                 common_domain_name_server_ip_lists: Sequence['outputs.GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult'],
                 external_subnet_lists: Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListResult'],
                 externally_routable_prefix_lists: Sequence['outputs.GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult']):
        """
        :param Sequence['GetVpcsEntityStatusResourceCommonDomainNameServerIpListArgs'] common_domain_name_server_ip_lists: List of domain name server IPs.
        :param Sequence['GetVpcsEntityStatusResourceExternalSubnetListArgs'] external_subnet_lists: List of external subnets attached to this VPC.
        :param Sequence['GetVpcsEntityStatusResourceExternallyRoutablePrefixListArgs'] externally_routable_prefix_lists: List of external routable ip and prefix .
        """
        pulumi.set(__self__, "common_domain_name_server_ip_lists", common_domain_name_server_ip_lists)
        pulumi.set(__self__, "external_subnet_lists", external_subnet_lists)
        pulumi.set(__self__, "externally_routable_prefix_lists", externally_routable_prefix_lists)

    @property
    @pulumi.getter(name="commonDomainNameServerIpLists")
    def common_domain_name_server_ip_lists(self) -> Sequence['outputs.GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult']:
        """
        List of domain name server IPs.
        """
        return pulumi.get(self, "common_domain_name_server_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetLists")
    def external_subnet_lists(self) -> Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListResult']:
        """
        List of external subnets attached to this VPC.
        """
        return pulumi.get(self, "external_subnet_lists")

    @property
    @pulumi.getter(name="externallyRoutablePrefixLists")
    def externally_routable_prefix_lists(self) -> Sequence['outputs.GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult']:
        """
        List of external routable ip and prefix .
        """
        return pulumi.get(self, "externally_routable_prefix_lists")


@pulumi.output_type
class GetVpcsEntityStatusResourceCommonDomainNameServerIpListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: ip address of domain name server.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetVpcsEntityStatusResourceExternalSubnetListResult(dict):
    def __init__(__self__, *,
                 active_gateway_nodes: Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult'],
                 external_ip_lists: Sequence[str],
                 external_subnet_reference: Mapping[str, str]):
        """
        :param Sequence['GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeArgs'] active_gateway_nodes: Active Gateway Node. Only present in VPC Status Resources.
        :param Sequence[str] external_ip_lists: List of external subnets attached to this VPC. Only present in VPC Status Resources .
        :param Mapping[str, str] external_subnet_reference: Reference to a subnet.
        """
        pulumi.set(__self__, "active_gateway_nodes", active_gateway_nodes)
        pulumi.set(__self__, "external_ip_lists", external_ip_lists)
        pulumi.set(__self__, "external_subnet_reference", external_subnet_reference)

    @property
    @pulumi.getter(name="activeGatewayNodes")
    def active_gateway_nodes(self) -> Sequence['outputs.GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult']:
        """
        Active Gateway Node. Only present in VPC Status Resources.
        """
        return pulumi.get(self, "active_gateway_nodes")

    @property
    @pulumi.getter(name="externalIpLists")
    def external_ip_lists(self) -> Sequence[str]:
        """
        List of external subnets attached to this VPC. Only present in VPC Status Resources .
        """
        return pulumi.get(self, "external_ip_lists")

    @property
    @pulumi.getter(name="externalSubnetReference")
    def external_subnet_reference(self) -> Mapping[str, str]:
        """
        Reference to a subnet.
        """
        return pulumi.get(self, "external_subnet_reference")


@pulumi.output_type
class GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNodeResult(dict):
    def __init__(__self__, *,
                 host_reference: Mapping[str, str],
                 ip_address: str):
        """
        :param Mapping[str, str] host_reference: Reference to host.
        :param str ip_address: ip address.
        """
        pulumi.set(__self__, "host_reference", host_reference)
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, str]:
        """
        Reference to host.
        """
        return pulumi.get(self, "host_reference")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetVpcsEntityStatusResourceExternallyRoutablePrefixListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 prefix_length: int):
        """
        :param str ip: ip address of domain name server.
        :param int prefix_length: prefix length of routable ip .
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "prefix_length", prefix_length)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address of domain name server.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        prefix length of routable ip .
        """
        return pulumi.get(self, "prefix_length")


@pulumi.output_type
class GetVpcsMetadataResult(dict):
    def __init__(__self__, *,
                 filter: str,
                 kind: str,
                 length: int,
                 offset: int,
                 sort_attribute: str,
                 sort_order: str,
                 total_matches: int):
        """
        :param str kind: - The kind name (Default value: project).
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "sort_attribute", sort_attribute)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "total_matches", total_matches)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        - The kind name (Default value: project).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="sortAttribute")
    def sort_attribute(self) -> str:
        return pulumi.get(self, "sort_attribute")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="totalMatches")
    def total_matches(self) -> int:
        return pulumi.get(self, "total_matches")


