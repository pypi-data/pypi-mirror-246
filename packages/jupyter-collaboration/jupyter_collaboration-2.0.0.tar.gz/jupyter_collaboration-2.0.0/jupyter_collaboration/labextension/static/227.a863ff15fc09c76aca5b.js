"use strict";(self.webpackChunk_jupyter_collaboration_extension=self.webpackChunk_jupyter_collaboration_extension||[]).push([[227,719],{1227:(e,s,t)=>{t.r(s),t.d(s,{ICollaborativeDrive:()=>f,WebSocketAwarenessProvider:()=>c,WebSocketProvider:()=>p,YDrive:()=>g});var o,r,i=t(4901),n=t(2256),a=t(9476),h=t(7099);!function(e){e[e.ROOM=124]="ROOM",e[e.CHAT=125]="CHAT"}(o||(o={})),function(e){e[e.RELOAD=0]="RELOAD",e[e.OVERWRITE=1]="OVERWRITE",e[e.FILE_CHANGED=2]="FILE_CHANGED",e[e.FILE_OVERWRITTEN=3]="FILE_OVERWRITTEN",e[e.DOC_OVERWRITTEN=4]="DOC_OVERWRITTEN"}(r||(r={}));class c extends h.WebsocketProvider{constructor(e){super(e.url,e.roomID,e.awareness.doc,{awareness:e.awareness}),this._isDisposed=!1,this._awareness=e.awareness,this._user=e.user,this._user.ready.then((()=>this._onUserChanged(this._user))).catch((e=>console.error(e))),this._user.userChanged.connect(this._onUserChanged,this),this._messageStream=new i.Stream(this),this.messageHandlers[o.CHAT]=(e,s,t,o,r)=>{const i=n.kf(s),a=JSON.parse(i);this._messageStream.emit(a)}}get isDisposed(){return this._isDisposed}get messageStream(){return this._messageStream}dispose(){this._isDisposed||(this._user.userChanged.disconnect(this._onUserChanged,this),this._isDisposed=!0,this.destroy())}sendMessage(e){const s={type:"text",body:e},t=a.Mf();a.uE(t,o.CHAT),a.uw(t,JSON.stringify(s)),this.ws.send(a._f(t))}_onUserChanged(e){this._awareness.setLocalStateField("user",e.identity)}}var d=t(7749),l=t(125),_=t(7308),u=t(7930);class p{constructor(e){this._onConnectionClosed=e=>{1003===e.code&&(console.error("Document provider closed:",e.reason),(0,_.showErrorMessage)(this._trans.__("Document session error"),e.reason,[_.Dialog.okButton()]),this._sharedModel.dispose())},this._onSync=e=>{var s;e&&(this._ready.resolve(),null===(s=this._yWebsocketProvider)||void 0===s||s.off("sync",this._onSync))},this._dialog=null,this._ready=new u.PromiseDelegate,this._isDisposed=!1,this._path=e.path,this._contentType=e.contentType,this._format=e.format,this._serverUrl=e.url,this._sharedModel=e.model,this._awareness=e.model.awareness,this._yWebsocketProvider=null,this._trans=e.translator;const s=e.user;s.ready.then((()=>{this._onUserChanged(s)})).catch((e=>console.error(e))),s.userChanged.connect(this._onUserChanged,this),this._connect().catch((e=>console.warn(e)))}get isDisposed(){return this._isDisposed}get ready(){return this._ready.promise}dispose(){var e,s,t;this.isDisposed||(this._isDisposed=!0,null===(e=this._yWebsocketProvider)||void 0===e||e.off("connection-close",this._onConnectionClosed),null===(s=this._yWebsocketProvider)||void 0===s||s.off("sync",this._onSync),null===(t=this._yWebsocketProvider)||void 0===t||t.destroy(),i.Signal.clearData(this))}async _connect(){const e=await async function(e,s,t){const o=l.ServerConnection.makeSettings(),r=d.URLExt.join(o.baseUrl,"api/collaboration/session",encodeURIComponent(t)),i={method:"PUT",body:JSON.stringify({format:e,type:s})};let n;try{n=await l.ServerConnection.makeRequest(r,i,o)}catch(e){throw new l.ServerConnection.NetworkError(e)}let a=await n.text();if(a.length>0)try{a=JSON.parse(a)}catch(e){console.log("Not a JSON response body.",n)}if(!n.ok)throw new l.ServerConnection.ResponseError(n,a.message||a);return a}(this._format,this._contentType,this._path);this._yWebsocketProvider=new h.WebsocketProvider(this._serverUrl,`${e.format}:${e.type}:${e.fileId}`,this._sharedModel.ydoc,{disableBc:!0,params:{sessionId:e.sessionId},awareness:this._awareness}),this._yWebsocketProvider.on("sync",this._onSync),this._yWebsocketProvider.on("connection-close",this._onConnectionClosed),this._yWebsocketProvider.messageHandlers[o.ROOM]=(e,s,t,o,r)=>{const i=n.yg(s),a=n.kf(s);this._handleRoomMessage(i,a)}}_onUserChanged(e){this._awareness.setLocalStateField("user",e.identity)}_handleRoomMessage(e,s){switch(e){case r.FILE_CHANGED:this._handleFileChanged(s);break;case r.DOC_OVERWRITTEN:case r.FILE_OVERWRITTEN:this._dialog&&(this._dialog.close(),this._dialog=null)}}_handleFileChanged(e){this._dialog=new _.Dialog({title:this._trans.__("File changed"),body:this._trans.__("Do you want to overwrite the file or reload it?"),buttons:[_.Dialog.okButton({label:"Reload"}),_.Dialog.warnButton({label:"Overwrite"})],hasClose:!1}),this._dialog.launch().then((s=>{"Reload"===s.button.label?this._sendReloadMsg(e):"Overwrite"===s.button.label&&this._sendOverwriteMsg(e)}))}_sendReloadMsg(e){var s;const t=a.Mf();a.uE(t,o.ROOM),a.uE(t,r.RELOAD),a.uw(t,e),null===(s=this._yWebsocketProvider)||void 0===s||s.ws.send(a._f(t))}_sendOverwriteMsg(e){var s;const t=a.Mf();a.uE(t,o.ROOM),a.uE(t,r.OVERWRITE),a.uw(t,e),null===(s=this._yWebsocketProvider)||void 0===s||s.ws.send(a._f(t))}}const y="true"===d.PageConfig.getOption("disableRTC");class g extends l.Drive{constructor(e,s){super({name:"RTC"}),this._onCreate=(e,s)=>{if("string"==typeof e.format)try{const t=new p({url:d.URLExt.join(this.serverSettings.wsUrl,"api/collaboration/room"),path:e.path,format:e.format,contentType:e.contentType,model:s,user:this._user,translator:this._trans}),o=`${e.format}:${e.contentType}:${e.path}`;this._providers.set(o,t),s.disposed.connect((()=>{const e=this._providers.get(o);e&&(e.dispose(),this._providers.delete(o))}))}catch(s){console.error(`Failed to open websocket connection for ${e.path}.\n:${s}`)}},this._user=e,this._trans=s,this._providers=new Map,this.sharedModelFactory=new v(this._onCreate)}dispose(){this.isDisposed||(this._providers.forEach((e=>e.dispose())),this._providers.clear(),super.dispose())}async get(e,s){if(s&&s.format&&s.type){const t=`${s.format}:${s.type}:${e}`,o=this._providers.get(t);if(o){const[t]=await Promise.all([super.get(e,{...s,content:!1}),o.ready]);return t}}return super.get(e,s)}async save(e,s={}){if(s.format&&s.type){const t=`${s.format}:${s.type}:${e}`;if(this._providers.get(t))return this.get(e,{...s,content:!1})}return super.save(e,s)}}class v{constructor(e){this._onCreate=e,this.collaborative=!y,this._documentFactories=new Map}registerDocumentFactory(e,s){if(this._documentFactories.has(e))throw new Error(`The content type ${e} already exists`);this._documentFactories.set(e,s)}createNew(e){if("string"==typeof e.format){if(this.collaborative&&e.collaborative&&this._documentFactories.has(e.contentType)){const s=this._documentFactories.get(e.contentType)(e);return this._onCreate(e,s),s}}else console.warn(`Only defined format are supported; got ${e.format}.`)}}const f=new u.Token("@jupyter/collaboration-extension:ICollaborativeDrive")}}]);