# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from langfuse.api.core.datetime_utils import serialize_datetime
from langfuse.api.resources.commons.types.map_value import MapValue
from langfuse.api.resources.commons.types.observation_level import ObservationLevel
from langfuse.api.resources.commons.types.usage import Usage


try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateTraceValidation(pydantic.BaseModel):
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    user_id: typing.Optional[str] = pydantic.Field(alias="userId", default=None)
    external_id: typing.Optional[str] = pydantic.Field(alias="externalId", default=None)
    release: typing.Optional[str] = None
    version: typing.Optional[str] = None
    input: typing.Optional[typing.Any] = None
    output: typing.Optional[typing.Any] = None
    metadata: typing.Optional[typing.Any] = None
    public: typing.Optional[bool] = pydantic.Field(default=None, description="Make trace publicly accessible via url")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


class CreateScoreValidation(pydantic.BaseModel):
    id: typing.Optional[str] = None
    trace_id: str = pydantic.Field(alias="traceId")
    name: str
    value: float
    observation_id: typing.Optional[str] = pydantic.Field(alias="observationId", default=None)
    comment: typing.Optional[str] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


class CreateEventValidation(pydantic.BaseModel):
    id: typing.Optional[str] = None
    trace_id: typing.Optional[str] = pydantic.Field(alias="traceId", default=None)
    name: typing.Optional[str] = None
    start_time: typing.Optional[dt.datetime] = pydantic.Field(alias="startTime", default=None)
    metadata: typing.Optional[typing.Any] = None
    input: typing.Optional[typing.Any] = None
    output: typing.Optional[typing.Any] = None
    level: typing.Optional[ObservationLevel] = None
    status_message: typing.Optional[str] = pydantic.Field(alias="statusMessage", default=None)
    parent_observation_id: typing.Optional[str] = pydantic.Field(alias="parentObservationId", default=None)
    version: typing.Optional[str] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


class CreateSpanValidation(CreateEventValidation):
    end_time: typing.Optional[dt.datetime] = pydantic.Field(alias="endTime", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


class CreateGenerationValidation(CreateSpanValidation):
    completion_start_time: typing.Optional[dt.datetime] = pydantic.Field(alias="completionStartTime", default=None)
    model: typing.Optional[str] = None
    model_parameters: typing.Optional[typing.Dict[str, MapValue]] = pydantic.Field(alias="modelParameters", default=None)
    prompt: typing.Optional[typing.Any] = None
    completion: typing.Optional[typing.Any] = None
    usage: typing.Optional[Usage] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


class UpdateGenerationValidation(pydantic.BaseModel):
    generation_id: str = pydantic.Field(alias="generationId")
    trace_id: typing.Optional[str] = pydantic.Field(alias="traceId", default=None)
    name: typing.Optional[str] = None
    start_time: typing.Optional[dt.datetime] = pydantic.Field(alias="startTime", default=None)
    end_time: typing.Optional[dt.datetime] = pydantic.Field(alias="endTime", default=None)
    completion_start_time: typing.Optional[dt.datetime] = pydantic.Field(alias="completionStartTime", default=None)
    model: typing.Optional[str] = None
    model_parameters: typing.Optional[typing.Dict[str, MapValue]] = pydantic.Field(alias="modelParameters", default=None)
    prompt: typing.Optional[typing.Any] = None
    version: typing.Optional[str] = None
    metadata: typing.Optional[typing.Any] = None
    completion: typing.Optional[typing.Any] = None
    usage: typing.Optional[Usage] = None
    level: typing.Optional[ObservationLevel] = None
    status_message: typing.Optional[str] = pydantic.Field(alias="statusMessage", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


class UpdateSpanValidation(pydantic.BaseModel):
    span_id: str = pydantic.Field(alias="spanId")
    trace_id: typing.Optional[str] = pydantic.Field(alias="traceId", default=None)
    start_time: typing.Optional[dt.datetime] = pydantic.Field(alias="startTime", default=None)
    end_time: typing.Optional[dt.datetime] = pydantic.Field(alias="endTime", default=None)
    name: typing.Optional[str] = None
    metadata: typing.Optional[typing.Any] = None
    input: typing.Optional[typing.Any] = None
    output: typing.Optional[typing.Any] = None
    level: typing.Optional[ObservationLevel] = None
    version: typing.Optional[str] = None
    status_message: typing.Optional[str] = pydantic.Field(alias="statusMessage", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
