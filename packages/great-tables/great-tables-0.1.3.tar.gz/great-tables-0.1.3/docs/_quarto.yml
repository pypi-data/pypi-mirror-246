project:
  type: website

website:
  title: great_tables
  page-navigation: true
  navbar:
    left:
      - text: Get Started
        file: get-started/index.qmd
      - text: Examples
        file: examples/index.qmd
      - href: reference/index.qmd
        text: Reference
      - href: changelog.qmd
        text: Changelog
    right:
      - icon: github
        href: https://github.com/posit-dev/great-tables
  sidebar:
    - id: examples
      contents: examples-qmd/*
    - title: "Get Started"
      contents:
        - get-started/index.qmd
        - get-started/overview.qmd
        - section: Basic
          contents:
            - get-started/basic-header.qmd
            - get-started/basic-stub.qmd
            - get-started/basic-column-labels.qmd
            - get-started/basic-formatting.qmd
        - section: Advanced
          contents:
            - get-started/column-selection.qmd

format:
  html:
    theme: cosmo
    # css: styles.css
    toc: true

# tell quarto to read the generated sidebar
metadata-files:
  - _sidebar.yml

quartodoc:
  package: great_tables
  sidebar: _sidebar.yml
  dynamic: true
  sections:
    - title: Table Creation
      desc: >
        All tables created in **Great Tables** begin by using `GT()`. Here we supply the input
        data table and some basic options for creating a stub (`rowname_col`) and row groups
        (`groupname_col`).
      contents:
        - GT
    - title: Creating or modifying parts of a table
      desc: >
        A table can contain a few useful components for conveying additional information. These
        include a header (with a titles and subtitle), a footer (with footnotes and source notes),
        and additional areas for labels (row group labels, column spanner labels, the stubhead
        label). We can modify the look of table parts more generally with `tab_options()` and
        perform styling on targeted table locations with `tab_style()`.
      contents:
        - GT.tab_header
        - GT.tab_spanner
        - GT.tab_stubhead
        - GT.tab_source_note
        - GT.tab_style
    - title: Formatting column data
      desc: >
        Columns of data can be formatted with the `fmt_*()` methods. We can specify the rows of
        these columns quite precisely with the `rows` argument. We get to apply these methods
        exactly once to each data cell (last call wins). Need to do custom formatting? Use the
        `fmt()` method and define your own formatter within.
      contents:
        - GT.fmt_number
        - GT.fmt_integer
        - GT.fmt_percent
        - GT.fmt_scientific
        - GT.fmt_currency
        - GT.fmt_bytes
        - GT.fmt_roman
        - GT.fmt_date
        - GT.fmt_time
        - GT.fmt_markdown
        - GT.fmt
    - title: Modifying columns
      desc: >
        The `cols_*()` methods allow for modifications that act on entire columns. This includes
        alignment of the data in columns (`cols_align()`), hiding columns from view (`cols_hide()`),
        re-labeling the column labels (`cols_label()`), and moving columns around (the
        `cols_move*()` methods).
      contents:
        - GT.cols_align
        - GT.cols_label
        - GT.cols_move
        - GT.cols_move_to_start
        - GT.cols_move_to_end
    - title: Location Targeting and Styling Classes
      desc: >
        Location targeting is a powerful feature of **Great Tables**. It allows for the precise
        selection of table locations for styling (using the `tab_style()` method). The styling
        classes allow for the specification of the styling properties to be applied to the targeted
        locations.
      contents:
        - loc.body
        - style.fill
        - style.text
        - style.borders
    - title: Helper functions
      desc: >
        An assortment of helper functions is available in the **Great Tables** package. The `md()`
        and `html()` helpers can used be during label creation with the `tab_header()`,
        `tab_footnote()`, `tab_spanner()`, `tab_stubhead_label()`, and `tab_source_note()`
        methods.
      contents:
        - md
        - html
        #- px
        #- pct
    - title: Value formatting functions
      desc: >
        If you have single values (or lists of them) in need of formatting, we have a set of
        `val_fmt_*()` functions that have been adapted from the corresponding `fmt_*()` methods.
      contents:
        - vals.fmt_number
        - vals.fmt_integer
        - vals.fmt_scientific
        - vals.fmt_percent
        - vals.fmt_currency
        - vals.fmt_roman
        - vals.fmt_bytes
        - vals.fmt_date
        - vals.fmt_time
        - vals.fmt_markdown
    - title: Built in datasets
      desc: >
        The **Great Tables** package is equipped with ten datasets that come in all shapes and
        sizes. Many examples thoughout the help docs use these datasets to quickly demonstrate the
        awesome features of the package!
      contents:
        - data.countrypops
        - data.sza
        - data.gtcars
        - data.sp500
        - data.pizzaplace
        - data.exibble
        - data.towny
        - data.metro
        - data.constants
        - data.illness
