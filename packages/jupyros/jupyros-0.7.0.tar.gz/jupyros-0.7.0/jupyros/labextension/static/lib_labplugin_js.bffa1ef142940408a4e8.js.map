{"version":3,"file":"lib_labplugin_js.bffa1ef142940408a4e8.js","mappings":";;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACpRA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oFAA4C;AAC5C,6FAA8D;;;;;;;;;;;ACV9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,mBAAO,CAAC,0GAAuB;AAC7C,QAAQ,mBAAO,CAAC,6DAAQ;;AAExB,aAAa,mBAAO,CAAC,mDAAQ;AAC7B,YAAY,mBAAO,CAAC,0DAAO;AAC3B,YAAY,mBAAO,CAAC,yDAAO;;AAE3B,eAAe,mBAAO,CAAC,wCAAe;;AAEtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,YAAY;AACZ;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,KAAK;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,6CAA6C;AAC5F,8CAA8C,4CAA4C;AAC1F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,6CAA6C;AAC5F,8CAA8C,4CAA4C;AAC1F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,4CAA4C;AAC1F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,4CAA4C;AAC1F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mDAAmD,kBAAkB,kBAAkB;AACvF,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/hBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAO,CAAC,kCAAY;AACvC,WAAW,mBAAO,CAAC,0GAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA","sources":["webpack://@robostack/jupyter-ros/./lib/defaults.js","webpack://@robostack/jupyter-ros/./lib/index.js","webpack://@robostack/jupyter-ros/./lib/jupyter-ros.js","webpack://@robostack/jupyter-ros/./lib/labplugin.js"],"sourcesContent":["\nvar DepthCloudModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"DepthCloudModel\",\n        f: 526.1,\n        url: \"\",\n    }\n    \n    \n\nvar GridModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"GridModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"GridView\",\n        cell_size: 0.5,\n        color: \"#0181c4\",\n        num_cells: 20,\n    }\n    \n    \n\nvar InteractiveMarkerModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"InteractiveMarkerModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"InteractiveMarkerView\",\n        menu_font_size: \"0.8em\",\n        ros: null,\n        tf_client: null,\n        topic: \"/basic_controls\",\n    }\n    \n    \n\nvar LaserScanModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"LaserScanModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"LaserScanView\",\n        color_map: \"\",\n        color_source: \"intensities\",\n        max_points: 200000,\n        message_ratio: 1.0,\n        point_ratio: 1.0,\n        point_size: 0.05,\n        ros: null,\n        static_color: \"#FF0000\",\n        tf_client: null,\n        topic: \"/scan\",\n    }\n    \n    \n\nvar MarkerModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"MarkerModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"MarkerView\",\n        lifetime: 0.0,\n        path: \"/\",\n        ros: null,\n        tf_client: null,\n        topic: \"/visualization_marker\",\n    }\n    \n    \n\nvar MarkerArrayClientModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"MarkerArrayClientModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"MarkerArrayClientView\",\n        path: \"/\",\n        ros: null,\n        tf_client: null,\n        topic: \"/marker_array\",\n    }\n    \n    \n\nvar OccupancyGridModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"OccupancyGridModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"OccupancyGridView\",\n        color: \"#FFFFFF\",\n        compression: \"cbor\",\n        continuous: false,\n        opacity: 1.0,\n        ros: null,\n        tf_client: null,\n        topic: \"/map\",\n    }\n    \n    \n\nvar PathModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"PathModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"PathView\",\n        color: \"#CC00FF\",\n        ros: null,\n        tf_client: null,\n        topic: \"/path\",\n    }\n    \n    \n\nvar PointCloudModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"PointCloudModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"PointCloudView\",\n        max_points: 200000,\n        message_ratio: 2.0,\n        point_ratio: 3.0,\n        point_size: 0.05,\n        ros: null,\n        static_color: \"#FF0000\",\n        tf_client: null,\n        topic: \"/point_cloud\",\n    }\n    \n    \n\nvar PolygonModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"PolygonModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"PolygonView\",\n        color: \"#CC00FF\",\n        ros: null,\n        tf_client: null,\n        topic: \"/polygon\",\n    }\n    \n    \n\nvar PoseModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"PoseModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"PoseView\",\n        color: \"#CC00FF\",\n        length: 1.0,\n        ros: null,\n        tf_client: null,\n        topic: \"/pose\",\n    }\n    \n    \n\nvar PoseArrayModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"PoseArrayModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"PoseArrayView\",\n        color: \"#CC00FF\",\n        length: 1.0,\n        ros: null,\n        tf_client: null,\n        topic: \"/pose_array\",\n    }\n    \n    \n\nvar ROSConnectionModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"ROSConnectionModel\",\n        url: \"ws://{hostname}:9090\",\n    }\n    \n    \n\nvar SceneNodeModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"SceneNodeModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"SceneNodeView\",\n        frame_id: \"/base_link\",\n        object: null,\n        tf_client: null,\n    }\n    \n    \n\nvar TFClientModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"TFClientModel\",\n        angular_treshold: 0.01,\n        fixed_frame: \"\",\n        rate: 10.0,\n        ros: null,\n        translational_treshold: 0.01,\n    }\n    \n    \n\nvar URDFModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"URDFModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"URDFView\",\n        ros: null,\n        tf_client: null,\n        url: \"http://{hostname}:3000\",\n    }\n    \n    \n\nvar ViewerModelDefaults =     {\n        _model_module: \"@robostack/jupyter-ros\",\n        _model_module_version: \"^0.6.1\",\n        _model_name: \"ViewerModel\",\n        _view_module: \"@robostack/jupyter-ros\",\n        _view_module_version: \"^0.6.1\",\n        _view_name: \"ViewerView\",\n        alpha: 1.0,\n        background_color: \"#FFFFFF\",\n        height: \"100%\",\n        objects: null,\n    }\n    \n    \n\nmodule.exports = {\n    DepthCloudModelDefaults: DepthCloudModelDefaults,\n    GridModelDefaults: GridModelDefaults,\n    InteractiveMarkerModelDefaults: InteractiveMarkerModelDefaults,\n    LaserScanModelDefaults: LaserScanModelDefaults,\n    MarkerArrayClientModelDefaults: MarkerArrayClientModelDefaults,\n    MarkerModelDefaults: MarkerModelDefaults,\n    OccupancyGridModelDefaults: OccupancyGridModelDefaults,\n    PathModelDefaults: PathModelDefaults,\n    PointCloudModelDefaults: PointCloudModelDefaults,\n    PolygonModelDefaults: PolygonModelDefaults,\n    PoseArrayModelDefaults: PoseArrayModelDefaults,\n    PoseModelDefaults: PoseModelDefaults,\n    ROSConnectionModelDefaults: ROSConnectionModelDefaults,\n    SceneNodeModelDefaults: SceneNodeModelDefaults,\n    TFClientModelDefaults: TFClientModelDefaults,\n    URDFModelDefaults: URDFModelDefaults,\n    ViewerModelDefaults: ViewerModelDefaults,\n}\n\n    ","///////////////////////////////////////////////////////////////////////////////\n// Copyright (c) Wolf Vollprecht, QuantStack                                 //\n//                                                                           //\n// Distributed under the terms of the BSD 3-Clause License.                  //\n//                                                                           //\n// The full license is in the file LICENSE, distributed with this software.  //\n///////////////////////////////////////////////////////////////////////////////\n\n// Export widget models and views, and the npm package version number.\nmodule.exports = require('./jupyter-ros.js');\nmodule.exports['version'] = require('../package.json').version;\n","///////////////////////////////////////////////////////////////////////////////\n// Copyright (c) Wolf Vollprecht, QuantStack                                 //\n//                                                                           //\n// Distributed under the terms of the BSD 3-Clause License.                  //\n//                                                                           //\n// The full license is in the file LICENSE, distributed with this software.  //\n///////////////////////////////////////////////////////////////////////////////\n\nwindow.ws = window.WebSocket;\nvar widgets = require('@jupyter-widgets/base');\nvar _ = require('lodash');\n\nvar ROSLIB = require('roslib');\nvar ROS3D = require('ros3d');\nvar THREE = require('three');\n\nvar defaults = require('./defaults.js')\n\nvar widget_defaults = widgets.WidgetModel.prototype.defaults;\nvar domwidget_defaults = widgets.DOMWidgetModel.prototype.defaults;\n\nvar default_serializers = function(names) {\n    names = names || ['ros', 'tf_client']\n\n    var named_serializers = {}\n    for (let idx in names)\n    {\n        named_serializers[names[idx]] = { deserialize: widgets.unpack_models }\n    }\n    return {serializers: _.extend(named_serializers, widgets.WidgetModel.serializers)};\n}\n\nvar fixup_url = function(url) {\n    url = url\n        .replace(\"{hostname}\", window.location.hostname)\n        .replace(\"{port}\", window.location.port);\n    return url;\n}\n\nvar ROSConnectionModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.ROSConnectionModelDefaults),\n    initialize: function() {\n        ROSConnectionModel.__super__.initialize.apply(this, arguments);\n        this.connection = new ROSLIB.Ros({\n          url: fixup_url(this.get('url'))\n        });\n    },\n    get_connection: function() {\n        return this.connection;\n    }\n});\n\nvar TFClientModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.TFClientModelDefaults),\n    initialize: function() {\n        TFClientModel.__super__.initialize.apply(this, arguments);\n        this.client = new ROSLIB.TFClient({\n          ros: this.get('ros').get_connection(),\n          angularThres: this.get('angular_treshold'),\n          transThres: this.get('translational_treshold'),\n          rate: this.get('rate'),\n          fixedFrame: this.get('fixed_frame')\n        });\n    },\n    get_client: function() {\n        return this.client;\n    },\n}, default_serializers(['ros'])\n);\n\nvar PointCloudModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widgets.WidgetModel.prototype.defaults(), defaults.PointCloudModelDefaults),\n}, default_serializers());\n\nvar OccupancyGridModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.OccupancyGridDefaults),\n}, default_serializers());\n\nvar SceneNodeModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widgets.WidgetModel.prototype.defaults(), defaults.SceneNodeModelDefaults),\n}, default_serializers(['tf_client', 'object']));\n\nvar OccupancyGridView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        OccupancyGridView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n    },\n    render: function() {\n        this.three_color = new THREE.Color(this.model.get('color'));\n        this.rgb_color = {r: this.three_color.r * 255, \n                          g: this.three_color.g * 255,\n                          b: this.three_color.b * 255};\n\n        this.view = new ROS3D.OccupancyGridClient({\n            rootObject: this.viewer.scene,\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            color: this.rgb_color,\n            compression: this.model.get('compression'),\n            continuous: this.model.get('continuous'),\n            opacity: this.model.get('opacity')\n        });\n    }\n});\n\nvar InteractiveMarkerModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.InteractiveMarkerDefaults),\n},\ndefault_serializers()\n);\n\nvar InteractiveMarkerView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        InteractiveMarkerView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n    },\n    render: function() {\n        this.view = new ROS3D.InteractiveMarkerClient({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            menuFontSize: this.model.get('menu_font_size'),\n            camera: this.viewer.camera,\n            rootObject: this.viewer.selectableObjects,\n        });\n    }\n});\n\nvar PoseArrayModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.PoseArrayDefaults),\n},\ndefault_serializers()\n);\n\nvar PoseArrayView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        PoseArrayView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on(\"change:length\", () => { this.view.length = this.model.get('length') });\n        this.model.on(\"change:color\", () => { this.view.color = this.model.get('color'); });\n    },\n    render: function() {\n        this.view = new ROS3D.PoseArray({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            color: this.model.get('color'),\n            length: this.model.get('length'),\n            rootObject: this.viewer.scene,\n        });\n    }\n});\n\nvar PoseModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.PoseModelDefaults),\n},\ndefault_serializers()\n);\n\nvar PoseView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        PoseView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on(\"change:length\", () => { this.view.length = this.model.get('length') });\n        this.model.on(\"change:color\", () => { this.view.color = this.model.get('color'); });\n    },\n    render: function() {\n        this.view = new ROS3D.Pose({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            color: this.model.get('color'),\n            length: this.model.get('length'),\n            rootObject: this.viewer.scene,\n        });\n    }\n});\n\nvar PathModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.PathModelDefaults),\n},\ndefault_serializers()\n);\n\nvar PathView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        PathView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on(\"change:color\", () => { this.view.color = this.model.get('color'); });\n    },\n    render: function() {\n        this.view = new ROS3D.Path({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            color: this.model.get('color'),\n            rootObject: this.viewer.scene,\n        });\n    }\n});\n\nvar PolygonModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.PolygonModelDefaults),\n},\ndefault_serializers()\n);\n\nvar PolygonView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        PolygonView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on(\"change:color\", () => { this.view.color = this.model.get('color'); });\n    },\n    render: function() {\n        this.view = new ROS3D.Polygon({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            color: this.model.get('color'),\n            rootObject: this.viewer.scene,\n        });\n    }\n});\n\nvar LaserScanModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.LaserScanModelDefaults),\n},\ndefault_serializers()\n);\n\nvar toMaterial = function(pointSize, color) {\n    return { size: pointSize, color: new THREE.Color(color) };\n};\n\nvar LaserScanView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        LaserScanView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on(\"change\", this.trigger_rerender, this);\n    },\n    render: function() {\n        if (this.model.get('color_map')) {\n            this.color_map_function = eval(this.model.get('color_map'))\n        }\n        this.view = new ROS3D.LaserScan({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            rootObject: this.viewer.scene,\n            messageRatio: this.model.get('message_ratio'),\n            max_pts: this.model.get('max_points'),\n            pointRatio: this.model.get('point_ratio'),\n            material: toMaterial(this.model.get('point_size'), this.model.get('static_color')),\n            colorsrc: this.model.get('color_source'),\n            colormap: this.color_map_function || undefined\n        });\n    },\n    remove: function() {\n        this.viewer.scene.remove(this.view.points.sn);\n    },\n    trigger_rerender: function() {\n        this.remove();\n        this.render();\n    }\n});\n\nvar MarkerModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.MarkerDefaults),\n},\ndefault_serializers()\n);\n\nvar MarkerView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        MarkerView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n    },\n    render: function() {\n        this.view = new ROS3D.MarkerClient({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            path: this.model.get('path'),\n            lifetime: this.model.get('lifetime'),\n            rootObject: this.viewer.scene,\n        });\n    }\n});\n\nvar MarkerArrayModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.MarkerArrayDefaults),\n},\ndefault_serializers()\n);\n\nvar MarkerArrayView = widgets.WidgetView.extend({\n    initialize: function(args) {\n        MarkerArrayView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        // this.model.on(\"change\", this.trigger_rerender, this);\n    },\n    render: function() {\n        this.view = new ROS3D.MarkerArrayClient({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            path: this.model.get('path'),\n            rootObject: this.viewer.scene,\n        });\n    }\n});\n\nvar GridModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widgets.WidgetModel.prototype.defaults(), defaults.GridModelDefaults)\n});\n\nvar URDFModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widgets.WidgetModel.prototype.defaults(), defaults.URDFModelDefaults),\n},\ndefault_serializers()\n);\n\nvar URDFView = widgets.WidgetView.extend({\n    initialize: function(parms) {\n        URDFView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        // this.model.on('change', this.trigger_rerender, this);\n    },\n    render: function() {\n        this.view = new ROS3D.UrdfClient({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            rootObject: this.viewer.scene,\n            path: fixup_url(this.model.get('url'))\n        });\n    },\n    trigger_rerender: function() {\n        this.remove();\n        this.render();\n    },\n    remove: function() {\n        this.viewer.scene.remove(this.view);\n    }\n});\n\nvar ViewerModel = widgets.DOMWidgetModel.extend({\n    defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), defaults.ViewerModelDefaults)\n},\ndefault_serializers(['objects', 'layout'])\n);\n\nvar PointCloudView = widgets.WidgetView.extend({\n    initialize: function(parms) {\n        PointCloudView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n    },\n    render: function() {\n        // if (this.model.get('color_map')) {\n        //     this.color_map_function = new Function(this.model.get('color_source'), 'THREE', this.model.get('color_map'));\n        //     this.color_map_apply = function() { args = arguments; args.push(THREE); this.color_map_apply.apply(null, args); }\n        //     material = { size: this.model.get('point_size'), sizeAttenuation: false };\n        // }\n        // else {\n        //     material = toMaterial(this.model.get('point_size'), this.model.get('static_color'));\n        // }\n\n        this.view = new ROS3D.PointCloud2({\n            ros: this.model.get('ros').get_connection(),\n            tfClient: this.model.get('tf_client').get_client(),\n            topic: this.model.get('topic'),\n            rootObject: this.viewer.scene,\n            messageRatio: this.model.get('message_ratio'),\n            max_pts: this.model.get('max_points'),\n            pointRatio: this.model.get('point_ratio'),\n            material: toMaterial(this.model.get('point_size'), this.model.get('static_color'))\n            // colorsrc: this.model.get('color_source'),\n            // colormap: this.color_map_apply || undefined\n        });\n    },\n    // remove: function() {\n    //     this.viewer.scene.remove(this.view.points.sn);\n    // }\n});\n\nvar DepthCloudModel = widgets.WidgetModel.extend({\n    defaults: _.extend(widget_defaults(), defaults.DepthCloudModelDefaults),\n    initialize: function() {\n        DepthCloudModel.__super__.initialize.apply(this, arguments);\n        this.depth_cloud = new ROS3D.DepthCloud({\n            url: this.get('url'),\n            f: this.get('f')\n        });\n        this.depth_cloud.startStream();\n    },\n    get_threejs_obj: function() {\n        return this.depth_cloud;\n    },\n});\n\nvar SceneNodeView = widgets.WidgetView.extend({\n    initialize: function(parms) {\n        SceneNodeView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on('change', this.trigger_rerender, this);\n    },\n    render: function() {\n        this.view = new ROS3D.SceneNode({\n            frameID: this.model.get('frame_id'),\n            tfClient: this.model.get('tf_client').get_client(),\n            object: this.model.get('object').get_threejs_obj()\n        });\n        this.viewer.scene.add(this.view);\n    },\n    trigger_rerender: function() {\n        this.remove();\n        this.render();\n    },\n    remove: function() {\n        this.viewer.scene.remove(this.view);\n    }\n});\n\nvar GridView = widgets.WidgetView.extend({\n    initialize: function(parms) {\n        GridView.__super__.initialize.apply(this, arguments);\n        this.viewer = this.options.viewer;\n        this.model.on('change', this.trigger_rerender, this);\n    },\n    render: function() {\n        this.grid_view = new ROS3D.Grid({\n            color: this.model.get('color'),\n            cellSize: this.model.get('cell_size'),\n            num_cells: this.model.get('num_cells')\n        });\n        this.viewer.addObject(this.grid_view);\n    },\n    trigger_rerender: function() {\n        this.remove();\n        this.render();\n    },\n    remove: function() {\n        this.viewer.scene.remove(this.grid_view);\n    }\n});\n\n// Custom View. Renders the widget model.\nvar ViewerView = widgets.DOMWidgetView.extend({\n    render: function() {\n        var unique_id = (new Date).getTime().toString() + Math.floor(Math.random() * Math.floor(9999)).toString();\n        this.el.id = unique_id + 'ROS_VIEWER';\n\n        this.model.on(\"change:background_color\", this.background_color_change, this);\n        this.model.on(\"change:alpha\", this.background_color_change, this);\n\n        this.displayed.then(() => {\n           this.init_viewer();\n        });\n    },\n\n    add_object: function (model) {\n        return this.create_child_view(model, {\n            viewer: this.viewer,\n        });\n    },\n    remove_object: function (view) {\n        view.remove();\n    },\n    objects_changed: function(msg) {\n        this.object_views.update(msg.changed.objects);\n    },\n    trigger_resize: function() {\n        this.viewer.resize(this.el.clientWidth, this.el.clientHeight)\n    },\n    processPhosphorMessage: function(msg) {\n        ViewerView.__super__.processPhosphorMessage.apply(this, arguments);\n        if (msg.type == 'resize') {\n            this.trigger_resize();\n        }\n    },\n    background_color_change: function() {\n        this.viewer.renderer.setClearColor(this.model.get('background_color'), this.model.get('alpha'))\n    },\n    init_viewer: function() {\n        var height = this.model.get('layout').get('height');\n        if (height === null || height == 'auto') {\n            height = 400;\n        }\n        else {\n            height = parseInt(height)\n        }\n\n        this.viewer = new ROS3D.Viewer({\n            divID: this.el.id,\n            width: this.el.clientWidth,\n            height: height,\n            antialias: this.model.get('antialias'),\n            background: this.model.get('background_color')\n        });\n\n        window.addEventListener(\"resize\", () => {\n           this.viewer && this.trigger_resize();\n        });\n\n        this.model.on(\"change:objects\", this.objects_changed, this);\n        this.object_views = new widgets.ViewList(this.add_object, this.remove_object, this);\n        this.object_views.update(this.model.get('objects'));\n     }\n});\n\n\nmodule.exports = {\n    ROSConnectionModel: ROSConnectionModel,\n    TFClientModel: TFClientModel,\n    PointCloudModel: PointCloudModel,\n    PointCloudView: PointCloudView,\n    MarkerModel: MarkerModel,\n    MarkerView: MarkerView,\n    MarkerArrayModel: MarkerArrayModel,\n    MarkerArrayView: MarkerArrayView,\n    OccupancyGridModel: OccupancyGridModel,\n    OccupancyGridView: OccupancyGridView,\n    InteractiveMarkerModel: InteractiveMarkerModel,\n    InteractiveMarkerView: InteractiveMarkerView,\n    GridModel: GridModel,\n    GridView: GridView,\n    URDFModel: URDFModel,\n    URDFView: URDFView,\n    PoseArrayModel: PoseArrayModel,\n    PoseArrayView: PoseArrayView,\n    PoseModel: PoseModel,\n    PoseView: PoseView,\n    PathModel: PathModel,\n    PathView: PathView,\n    PolygonModel: PolygonModel,\n    PolygonView: PolygonView,\n    LaserScanModel: LaserScanModel,\n    LaserScanView: LaserScanView,\n    SceneNodeModel: SceneNodeModel,\n    SceneNodeView: SceneNodeView,\n    DepthCloudModel: DepthCloudModel,\n    ViewerModel: ViewerModel,\n    ViewerView: ViewerView\n};\n","///////////////////////////////////////////////////////////////////////////////\n// Copyright (c) Wolf Vollprecht, QuantStack                                 //\n//                                                                           //\n// Distributed under the terms of the BSD 3-Clause License.                  //\n//                                                                           //\n// The full license is in the file LICENSE, distributed with this software.  //\n///////////////////////////////////////////////////////////////////////////////\n\nvar index_module = require('./index.js');\nvar base = require('@jupyter-widgets/base');\n\nmodule.exports = {\n  id: '@robostack/jupyter-ros',\n  requires: [base.IJupyterWidgetRegistry],\n  activate: function(app, widgets) {\n    widgets.registerWidget({\n        name: '@robostack/jupyter-ros',\n        version: index_module.version,\n        exports: index_module\n    });\n  },\n  autoStart: true\n};\n\n"],"names":[],"sourceRoot":""}