"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Phonexia s.r.o.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Phonexia licensing definitions for gRPC API.
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from phonexia.grpc.common.licensing_pb2 import (
    LicensingInfoRequest,
    LicensingInfoResult,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar('_T')

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta):
    ...

class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class LicensingStub:
    """Service that implements licensing provider."""

    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    Info: UnaryUnaryMultiCallable[
        LicensingInfoRequest,
        LicensingInfoResult,
    ]
    """Returns information about the license."""

class LicensingAsyncStub:
    """Service that implements licensing provider."""

    Info: UnaryUnaryMultiCallable[
        LicensingInfoRequest,
        LicensingInfoResult,
    ]
    """Returns information about the license."""

class LicensingServicer(metaclass=ABCMeta):
    """Service that implements licensing provider."""

    @abstractmethod
    def Info(
        self,
        request: LicensingInfoRequest,
        context: _ServicerContext,
    ) -> Union[LicensingInfoResult, Awaitable[LicensingInfoResult]]:
        """Returns information about the license."""

def add_LicensingServicer_to_server(servicer: LicensingServicer, server: Union[Server, Server]) -> None: ...
