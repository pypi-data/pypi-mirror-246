"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Phonexia s.r.o.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Health check definitions for gRPC API.
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryStreamMultiCallable,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryStreamMultiCallable,
    UnaryUnaryMultiCallable,
)
from phonexia.grpc.common.health_check_pb2 import (
    HealthCheckRequest,
    HealthCheckResponse,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar('_T')

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta):
    ...

class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class HealthStub:
    """Service for checking the health of a service."""

    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    Check: UnaryUnaryMultiCallable[
        HealthCheckRequest,
        HealthCheckResponse,
    ]
    """Check the health of a service."""
    Watch: UnaryStreamMultiCallable[
        HealthCheckRequest,
        HealthCheckResponse,
    ]
    """Watch the health of a service. Messages about service availability will be
    periodically sent on the stream.
    """

class HealthAsyncStub:
    """Service for checking the health of a service."""

    Check: UnaryUnaryMultiCallable[
        HealthCheckRequest,
        HealthCheckResponse,
    ]
    """Check the health of a service."""
    Watch: UnaryStreamMultiCallable[
        HealthCheckRequest,
        HealthCheckResponse,
    ]
    """Watch the health of a service. Messages about service availability will be
    periodically sent on the stream.
    """

class HealthServicer(metaclass=ABCMeta):
    """Service for checking the health of a service."""

    @abstractmethod
    def Check(
        self,
        request: HealthCheckRequest,
        context: _ServicerContext,
    ) -> Union[HealthCheckResponse, Awaitable[HealthCheckResponse]]:
        """Check the health of a service."""
    @abstractmethod
    def Watch(
        self,
        request: HealthCheckRequest,
        context: _ServicerContext,
    ) -> Union[Iterator[HealthCheckResponse], AsyncIterator[HealthCheckResponse]]:
        """Watch the health of a service. Messages about service availability will be
        periodically sent on the stream.
        """

def add_HealthServicer_to_server(servicer: HealthServicer, server: Union[Server, Server]) -> None: ...
