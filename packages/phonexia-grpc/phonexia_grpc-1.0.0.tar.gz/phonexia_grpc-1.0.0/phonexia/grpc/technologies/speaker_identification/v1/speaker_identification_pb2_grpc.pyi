"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Phonexia s.r.o.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Phonexia Speaker Identification gRPC API.
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    StreamStreamMultiCallable,
    StreamUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    StreamStreamMultiCallable,
    StreamUnaryMultiCallable,
)
from phonexia.grpc.technologies.speaker_identification.v1.speaker_identification_pb2 import (
    CompareRequest,
    CompareResponse,
    ExtractRequest,
    ExtractResponse,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar('_T')

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta):
    ...

class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class VoiceprintComparisonStub:
    """Service that implements voiceprint comparison."""

    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    Compare: StreamStreamMultiCallable[
        CompareRequest,
        CompareResponse,
    ]
    """Performs synchronous comparison of two voiceprint lists. Each voiceprint
    from one list is compared with each voiceprint from other list. Returns a
    message containing matrix of comparison scores (results of individual
    voiceprint-to-voiceprint comparisons).
    """

class VoiceprintComparisonAsyncStub:
    """Service that implements voiceprint comparison."""

    Compare: StreamStreamMultiCallable[
        CompareRequest,
        CompareResponse,
    ]
    """Performs synchronous comparison of two voiceprint lists. Each voiceprint
    from one list is compared with each voiceprint from other list. Returns a
    message containing matrix of comparison scores (results of individual
    voiceprint-to-voiceprint comparisons).
    """

class VoiceprintComparisonServicer(metaclass=ABCMeta):
    """Service that implements voiceprint comparison."""

    @abstractmethod
    def Compare(
        self,
        request_iterator: _MaybeAsyncIterator[CompareRequest],
        context: _ServicerContext,
    ) -> Union[Iterator[CompareResponse], AsyncIterator[CompareResponse]]:
        """Performs synchronous comparison of two voiceprint lists. Each voiceprint
        from one list is compared with each voiceprint from other list. Returns a
        message containing matrix of comparison scores (results of individual
        voiceprint-to-voiceprint comparisons).
        """

def add_VoiceprintComparisonServicer_to_server(servicer: VoiceprintComparisonServicer, server: Union[Server, Server]) -> None: ...

class VoiceprintExtractionStub:
    """Service that implements voiceprint extraction."""

    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    Extract: StreamUnaryMultiCallable[
        ExtractRequest,
        ExtractResponse,
    ]
    """Performs synchronous voiceprint extraction from an audio. Returns a
    result after completely sent and processed audio.
    """

class VoiceprintExtractionAsyncStub:
    """Service that implements voiceprint extraction."""

    Extract: StreamUnaryMultiCallable[
        ExtractRequest,
        ExtractResponse,
    ]
    """Performs synchronous voiceprint extraction from an audio. Returns a
    result after completely sent and processed audio.
    """

class VoiceprintExtractionServicer(metaclass=ABCMeta):
    """Service that implements voiceprint extraction."""

    @abstractmethod
    def Extract(
        self,
        request_iterator: _MaybeAsyncIterator[ExtractRequest],
        context: _ServicerContext,
    ) -> Union[ExtractResponse, Awaitable[ExtractResponse]]:
        """Performs synchronous voiceprint extraction from an audio. Returns a
        result after completely sent and processed audio.
        """

def add_VoiceprintExtractionServicer_to_server(servicer: VoiceprintExtractionServicer, server: Union[Server, Server]) -> None: ...
