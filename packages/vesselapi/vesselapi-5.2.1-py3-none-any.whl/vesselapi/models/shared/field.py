"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import List, Optional, Union
from vesselapi import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Options:
    key: Optional[Union[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    


class Type(str, Enum):
    STRING = 'string'
    NUMBER = 'number'
    DATETIME = 'datetime'
    DATE = 'date'
    BOOLEAN = 'boolean'
    REFERENCE = 'reference'
    PHONE = 'phone'
    URL = 'url'
    ID = 'id'
    EMAIL = 'email'
    PERCENT = 'percent'
    SINGLESELECT = 'singleselect'
    MULTISELECT = 'multiselect'
    ADDRESS = 'address'
    DECIMAL = 'decimal'
    TIME = 'time'
    DATERANGE = 'daterange'
    OBJECT = 'object'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Field:
    r"""(Alias: property) A field is a key-value pair on a CRM Object that provides information about that object."""
    creatable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatable') }})
    r"""If this field can be used when creating the object"""
    custom: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom') }})
    r"""If this field is a custom field"""
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""The key in the CRM object (ex: annualRevenue, numberOfEmployees, etc)"""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The display name of this field (ex: number of employees, annual revenue, etc)"""
    required: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required') }})
    r"""If this field is required when creating the object"""
    type: Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    universal: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('universal') }})
    r"""If this is a field we've unified across CRMs"""
    updatable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatable') }})
    r"""If this field can be updated"""
    is_array: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isArray'), 'exclude': lambda f: f is None }})
    r"""If this field is an array"""
    options: Optional[List[Options]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Possible options for this field"""
    

