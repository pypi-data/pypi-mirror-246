"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from typing import Any, Dict, Optional
from vesselapi import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventAttendeeAssociations:
    association_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associationId') }})
    r"""The id of the associated object, if this Attendee is not associated with a CRM object, this id is null and the `email` field will be present"""
    event_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventId') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventAttendee:
    r"""Event Attendees hold information about someone who attendeed or was invited to an event. Attendees are always associated with some Event and another person object such as a Contact, Lead, or Other."""
    associated_object_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedObjectType') }})
    r"""The object type of the associated object (e.g., Contact, Lead, etc) or Other if this Attendee is not associated with a CRM object"""
    associations: EventAttendeeAssociations = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associations') }})
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdTime') }})
    r"""The timestamp that the event attendee was created"""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique Vessel Id."""
    modified_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedTime') }})
    r"""The timestamp the event attendee was last modified"""
    native_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nativeId') }})
    r"""Id of the object in the connected CRM."""
    additional: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional'), 'exclude': lambda f: f is None }})
    r"""Returned when `allFields` is set in the query params. Includes all data, untransformed, we received from the downstream CRM"""
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Optional unless `associationId` is null"""
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    

