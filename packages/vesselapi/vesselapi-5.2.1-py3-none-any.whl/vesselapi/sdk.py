"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .accounts import Accounts
from .attendees import Attendees
from .calls import Calls
from .connections import Connections
from .contacts import Contacts
from .deals import Deals
from .emails import Emails
from .events import Events
from .integrations import Integrations
from .leads import Leads
from .links import Links
from .notes import Notes
from .passthrough import Passthrough
from .sdkconfiguration import SDKConfiguration
from .tasks import Tasks
from .tokens import Tokens
from .users import Users
from .webhooks import Webhooks
from typing import Callable, Dict, Union
from vesselapi import utils
from vesselapi.models import shared

class VesselAPI:
    r"""API Reference: API
    Vessel's APIs requires an access token to be used together with your Vessel API token. Ensure the following headers are provided when making API calls:

    Key | Value | Description
    ---------|----------|----------
     vessel-api-token | `<VESSEL_API_TOKEN>` | The API token provided by us

    Additionally, in the query or body parameters of each request depending on whether it is a GET or POST, make sure to include the `accessToken` for the connection you want to access.
    """
    connections: Connections
    integrations: Integrations
    webhooks: Webhooks
    accounts: Accounts
    calls: Calls
    contacts: Contacts
    deals: Deals
    emails: Emails
    events: Events
    attendees: Attendees
    leads: Leads
    notes: Notes
    passthrough: Passthrough
    tasks: Tasks
    users: Users
    links: Links
    tokens: Tokens

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: Union[shared.Security,Callable[[], shared.Security]] = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: Union[shared.Security,Callable[[], shared.Security]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.connections = Connections(self.sdk_configuration)
        self.integrations = Integrations(self.sdk_configuration)
        self.webhooks = Webhooks(self.sdk_configuration)
        self.accounts = Accounts(self.sdk_configuration)
        self.calls = Calls(self.sdk_configuration)
        self.contacts = Contacts(self.sdk_configuration)
        self.deals = Deals(self.sdk_configuration)
        self.emails = Emails(self.sdk_configuration)
        self.events = Events(self.sdk_configuration)
        self.attendees = Attendees(self.sdk_configuration)
        self.leads = Leads(self.sdk_configuration)
        self.notes = Notes(self.sdk_configuration)
        self.passthrough = Passthrough(self.sdk_configuration)
        self.tasks = Tasks(self.sdk_configuration)
        self.users = Users(self.sdk_configuration)
        self.links = Links(self.sdk_configuration)
        self.tokens = Tokens(self.sdk_configuration)
    