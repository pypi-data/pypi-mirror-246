"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from typing import Any, Dict, Optional
from vesselapi import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventAttendeeCreate:
    associated_object_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedObjectType') }})
    r"""The object type of the associated object (e.g., Contact, Lead, etc) or Other if this Attendee is not associated with a CRM object"""
    event_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventId') }})
    additional: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional'), 'exclude': lambda f: f is None }})
    r"""Create any property in the downstream CRM, such as a custom or native property. For a list of all properties see /details."""
    association_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associationId'), 'exclude': lambda f: f is None }})
    r"""Required unless email is present and CRM supports \\"Other\\" for associatedObjectType"""
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Required if associationId is not present and the CRM supports \\"Other\\" for attendee associatedObjectType"""
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    

