[build-system]
requires = ["setuptools>=64.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "proxystore"
version = "0.6.2"
authors = [
    {name = "Globus Labs"},
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
]
maintainers = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
    {name = "Valerie Hayot-Sasson", email = "vhayot@uchicago.edu"},
]
description = "Lazy object proxy interface for distributed stores."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "FILE"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    # Click 8.1.4 fails mypy: https://github.com/pallets/click/issues/2558
    "click!=8.1.4",
    "cloudpickle>=1.6.0",
    "cryptography>=39.0.1",
    "globus-sdk>=3.3.0",
    "lazy-object-proxy>=1.6.0",
    "typing-extensions>=4.3.0",
]

[project.urls]
homepage = "https://proxystore.dev"
documentation = "https://docs.proxystore.dev"
repository = "https://github.com/proxystore/proxystore"

[project.optional-dependencies]
all = ["proxystore[endpoints,extensions,redis]"]
endpoints = [
    "aiortc>=1.3.2",
    "aiosqlite",
    "uvicorn[standard]",
    "psutil",
    "pystun3",
    "python-daemon",
    "quart>=0.18.0",
    "requests>=2.27.1",
    "tosholi",
    "websockets>=10.0",
]
extensions = [
    "proxystore-ex",
]
redis = ["redis>=3.4"]
dev = [
    "covdefaults>=2.2",
    "coverage",
    "mypy",
    "pre-commit",
    "pytest",
    "pytest-asyncio>=0.23.2",
    "pytest-cov",
    "pytest-timeout",
    "ruff",
    "tox",
    "types-redis",
    "types-requests",
    "virtualenv",
]
docs = [
    "black",
    "mkdocs-click",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    # mkdocs-material 9.4.0 makes mkdocs-section-index break
    "mkdocs-material!=9.4.0",
    "mkdocs-section-index",
    "mkdocstrings",
    "mkdocstrings-python",
    "mike",
    # Needed for generating CLI docs
    "proxystore[all]",
]

[project.scripts]
proxystore-endpoint = "proxystore.endpoint.cli:cli"
proxystore-globus-auth = "proxystore.globus.cli:cli"
proxystore-relay = "proxystore.p2p.relay.run:cli"

[tool.codespell]
skip = """
.git,
.github,
__pycache__,
build,
dist,
.*egg-info
"""

[tool.coverage.run]
plugins = ["covdefaults"]
concurrency = ["multiprocessing", "thread"]
omit = ["version_check.py", "testing/scripts/*"]
parallel = true

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "testing.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[tool.pytest]
asyncio_mode = "auto"
timeout = 30

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::cryptography.utils.CryptographyDeprecationWarning",
    "ignore::proxystore.warnings.ExperimentalWarning",
    "ignore::DeprecationWarning:proxystore.*",
    "ignore::DeprecationWarning:testing.*",
    "ignore::DeprecationWarning:tests.*",
]
markers = [
    "integration: mark a test as an integration test.",
]

[tool.ruff]
# See all rules here: https://beta.ruff.rs/docs/rules
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # PyLint
    "PLE", "PLW",
    # ruff-specific
    "RUF",
]
extend-ignore = [
    # Do not require docstrings for magic methods
    "D105",
    # Do not require docstrings for __init__ methods
    "D107",
    # Allow builtin attribute shadowing
    "A003",
    # Ruff will change all([generator]) to all(generator) because the all/any
    # generator expressions directly and the list comprehension is not needed.
    # However, coverage marks unfinished generators as not covered and
    # all/any can early exit before exhausting the generator.
    "C419",
    # Conflicts with ruff format but leaving as enabled for now. This
    # may require ruff's linter to be run a second time after the formatter.
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    # "COM812",
    # "ISC001",
    # Allow pytest.raises() without match
    "PT011",
]
line-length = 79
target-version = "py38"

[tool.ruff.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.format]
indent-style = "space"
quote-style = "single"

[tool.ruff.isort]
force-single-line = true
known-first-party = ["proxystore", "test", "testing"]
order-by-type = false
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]
"*/*_test.py" = ["D10"]
"proxystore/**.py" = ["PT"]
"proxystore/store/*.py" = ["D102"]
"tests/conftest.py" = ["F401"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.setuptools.packages.find]
exclude = ["tests*", "testing*"]
namespaces = false
