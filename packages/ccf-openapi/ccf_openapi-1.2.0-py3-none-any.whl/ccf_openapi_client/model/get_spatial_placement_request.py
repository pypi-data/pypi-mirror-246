# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class GetSpatialPlacementRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "target_iri",
            "rui_location",
        }
        
        class properties:
            target_iri = schemas.StrSchema
        
            @staticmethod
            def rui_location() -> typing.Type['SpatialEntity']:
                return SpatialEntity
            __annotations__ = {
                "target_iri": target_iri,
                "rui_location": rui_location,
            }
    
    target_iri: MetaOapg.properties.target_iri
    rui_location: 'SpatialEntity'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_iri"]) -> MetaOapg.properties.target_iri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rui_location"]) -> 'SpatialEntity': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["target_iri", "rui_location", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_iri"]) -> MetaOapg.properties.target_iri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rui_location"]) -> 'SpatialEntity': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["target_iri", "rui_location", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        target_iri: typing.Union[MetaOapg.properties.target_iri, str, ],
        rui_location: 'SpatialEntity',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetSpatialPlacementRequest':
        return super().__new__(
            cls,
            *_args,
            target_iri=target_iri,
            rui_location=rui_location,
            _configuration=_configuration,
            **kwargs,
        )

from ccf_openapi_client.model.spatial_entity import SpatialEntity
