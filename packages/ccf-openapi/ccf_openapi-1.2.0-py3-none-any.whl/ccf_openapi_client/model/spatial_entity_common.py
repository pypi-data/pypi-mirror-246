# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class SpatialEntityCommon(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Properties available in all spatial entity objects.
    """


    class MetaOapg:
        
        class properties:
            entityId = schemas.StrSchema
            
            
            class ccf_annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ccf_annotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            representation_of = schemas.StrSchema
            reference_organ = schemas.StrSchema
            sex = schemas.StrSchema
            __annotations__ = {
                "entityId": entityId,
                "ccf_annotations": ccf_annotations,
                "representation_of": representation_of,
                "reference_organ": reference_organ,
                "sex": sex,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ccf_annotations"]) -> MetaOapg.properties.ccf_annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["representation_of"]) -> MetaOapg.properties.representation_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_organ"]) -> MetaOapg.properties.reference_organ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sex"]) -> MetaOapg.properties.sex: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entityId", "ccf_annotations", "representation_of", "reference_organ", "sex", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> typing.Union[MetaOapg.properties.entityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ccf_annotations"]) -> typing.Union[MetaOapg.properties.ccf_annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["representation_of"]) -> typing.Union[MetaOapg.properties.representation_of, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_organ"]) -> typing.Union[MetaOapg.properties.reference_organ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sex"]) -> typing.Union[MetaOapg.properties.sex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entityId", "ccf_annotations", "representation_of", "reference_organ", "sex", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, schemas.Unset] = schemas.unset,
        ccf_annotations: typing.Union[MetaOapg.properties.ccf_annotations, list, tuple, schemas.Unset] = schemas.unset,
        representation_of: typing.Union[MetaOapg.properties.representation_of, str, schemas.Unset] = schemas.unset,
        reference_organ: typing.Union[MetaOapg.properties.reference_organ, str, schemas.Unset] = schemas.unset,
        sex: typing.Union[MetaOapg.properties.sex, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpatialEntityCommon':
        return super().__new__(
            cls,
            *_args,
            entityId=entityId,
            ccf_annotations=ccf_annotations,
            representation_of=representation_of,
            reference_organ=reference_organ,
            sex=sex,
            _configuration=_configuration,
            **kwargs,
        )
