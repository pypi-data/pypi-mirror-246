# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class SpatialPlacementTranslation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The properties to define the Translation aspect of Spatial Placements.
    """


    class MetaOapg:
        required = {
            "x_translation",
            "z_translation",
            "translation_units",
            "y_translation",
        }
        
        class properties:
            x_translation = schemas.NumberSchema
            y_translation = schemas.NumberSchema
            z_translation = schemas.NumberSchema
            translation_units = schemas.StrSchema
            __annotations__ = {
                "x_translation": x_translation,
                "y_translation": y_translation,
                "z_translation": z_translation,
                "translation_units": translation_units,
            }
    
    x_translation: MetaOapg.properties.x_translation
    z_translation: MetaOapg.properties.z_translation
    translation_units: MetaOapg.properties.translation_units
    y_translation: MetaOapg.properties.y_translation
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x_translation"]) -> MetaOapg.properties.x_translation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y_translation"]) -> MetaOapg.properties.y_translation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["z_translation"]) -> MetaOapg.properties.z_translation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translation_units"]) -> MetaOapg.properties.translation_units: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["x_translation", "y_translation", "z_translation", "translation_units", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x_translation"]) -> MetaOapg.properties.x_translation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y_translation"]) -> MetaOapg.properties.y_translation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["z_translation"]) -> MetaOapg.properties.z_translation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translation_units"]) -> MetaOapg.properties.translation_units: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["x_translation", "y_translation", "z_translation", "translation_units", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        x_translation: typing.Union[MetaOapg.properties.x_translation, decimal.Decimal, int, float, ],
        z_translation: typing.Union[MetaOapg.properties.z_translation, decimal.Decimal, int, float, ],
        translation_units: typing.Union[MetaOapg.properties.translation_units, str, ],
        y_translation: typing.Union[MetaOapg.properties.y_translation, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpatialPlacementTranslation':
        return super().__new__(
            cls,
            *_args,
            x_translation=x_translation,
            z_translation=z_translation,
            translation_units=translation_units,
            y_translation=y_translation,
            _configuration=_configuration,
            **kwargs,
        )
