# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class SpatialEntity(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A Spatial Entity defines a bounded cartesian space and the units it is measured in. It typically represents a real world thing, e.g., a human body, a human kidney, a tissue section, or an individual cell.
    """


    class MetaOapg:
        
        class properties:
            label = schemas.StrSchema
            comment = schemas.StrSchema
            rui_rank = schemas.IntSchema
            sex = schemas.StrSchema
            side = schemas.StrSchema
            slice_count = schemas.IntSchema
            slice_thickness = schemas.NumberSchema
            placement = schemas.AnyTypeSchema
        
            @staticmethod
            def object() -> typing.Type['SpatialObjectReference']:
                return SpatialObjectReference
        
            @staticmethod
            def color() -> typing.Type['Rgba']:
                return Rgba
            __annotations__ = {
                "label": label,
                "comment": comment,
                "rui_rank": rui_rank,
                "sex": sex,
                "side": side,
                "slice_count": slice_count,
                "slice_thickness": slice_thickness,
                "placement": placement,
                "object": object,
                "color": color,
            }
        additional_properties = schemas.AnyTypeSchema
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                JsonLdObject,
                SpatialEntityCommon,
                SpatialEntityCreator,
                SpatialEntityDimensions,
            ]

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rui_rank"]) -> MetaOapg.properties.rui_rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sex"]) -> MetaOapg.properties.sex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slice_count"]) -> MetaOapg.properties.slice_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slice_thickness"]) -> MetaOapg.properties.slice_thickness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placement"]) -> MetaOapg.properties.placement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> 'SpatialObjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> 'Rgba': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label"], typing_extensions.Literal["comment"], typing_extensions.Literal["rui_rank"], typing_extensions.Literal["sex"], typing_extensions.Literal["side"], typing_extensions.Literal["slice_count"], typing_extensions.Literal["slice_thickness"], typing_extensions.Literal["placement"], typing_extensions.Literal["object"], typing_extensions.Literal["color"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rui_rank"]) -> typing.Union[MetaOapg.properties.rui_rank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sex"]) -> typing.Union[MetaOapg.properties.sex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slice_count"]) -> typing.Union[MetaOapg.properties.slice_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slice_thickness"]) -> typing.Union[MetaOapg.properties.slice_thickness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placement"]) -> typing.Union[MetaOapg.properties.placement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union['SpatialObjectReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union['Rgba', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label"], typing_extensions.Literal["comment"], typing_extensions.Literal["rui_rank"], typing_extensions.Literal["sex"], typing_extensions.Literal["side"], typing_extensions.Literal["slice_count"], typing_extensions.Literal["slice_thickness"], typing_extensions.Literal["placement"], typing_extensions.Literal["object"], typing_extensions.Literal["color"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        rui_rank: typing.Union[MetaOapg.properties.rui_rank, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sex: typing.Union[MetaOapg.properties.sex, str, schemas.Unset] = schemas.unset,
        side: typing.Union[MetaOapg.properties.side, str, schemas.Unset] = schemas.unset,
        slice_count: typing.Union[MetaOapg.properties.slice_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        slice_thickness: typing.Union[MetaOapg.properties.slice_thickness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        placement: typing.Union[MetaOapg.properties.placement, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        object: typing.Union['SpatialObjectReference', schemas.Unset] = schemas.unset,
        color: typing.Union['Rgba', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'SpatialEntity':
        return super().__new__(
            cls,
            *_args,
            label=label,
            comment=comment,
            rui_rank=rui_rank,
            sex=sex,
            side=side,
            slice_count=slice_count,
            slice_thickness=slice_thickness,
            placement=placement,
            object=object,
            color=color,
            _configuration=_configuration,
            **kwargs,
        )

from ccf_openapi_client.model.json_ld_object import JsonLdObject
from ccf_openapi_client.model.rgba import Rgba
from ccf_openapi_client.model.spatial_entity_common import SpatialEntityCommon
from ccf_openapi_client.model.spatial_entity_creator import SpatialEntityCreator
from ccf_openapi_client.model.spatial_entity_dimensions import SpatialEntityDimensions
from ccf_openapi_client.model.spatial_object_reference import SpatialObjectReference
