# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class TissueBlock(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about a collection of tissue sections.
    """


    class MetaOapg:
        required = {
            "sampleType",
        }
        
        class properties:
            sampleType = schemas.StrSchema
            spatialEntityId = schemas.StrSchema
        
            @staticmethod
            def donor() -> typing.Type['TissueDonor']:
                return TissueDonor
            
            
            class sectionCount(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class sectionSize(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            sectionUnits = schemas.StrSchema
            
            
            class sections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TissueSection']:
                        return TissueSection
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TissueSection'], typing.List['TissueSection']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sections':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TissueSection':
                    return super().__getitem__(i)
            __annotations__ = {
                "sampleType": sampleType,
                "spatialEntityId": spatialEntityId,
                "donor": donor,
                "sectionCount": sectionCount,
                "sectionSize": sectionSize,
                "sectionUnits": sectionUnits,
                "sections": sections,
            }
        additional_properties = schemas.AnyTypeSchema
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                JsonLdObject,
                TissueCommon,
                TissueSampleCommon,
            ]

    
    sampleType: MetaOapg.properties.sampleType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleType"]) -> MetaOapg.properties.sampleType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialEntityId"]) -> MetaOapg.properties.spatialEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["donor"]) -> 'TissueDonor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectionCount"]) -> MetaOapg.properties.sectionCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectionSize"]) -> MetaOapg.properties.sectionSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectionUnits"]) -> MetaOapg.properties.sectionUnits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sections"]) -> MetaOapg.properties.sections: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sampleType"], typing_extensions.Literal["spatialEntityId"], typing_extensions.Literal["donor"], typing_extensions.Literal["sectionCount"], typing_extensions.Literal["sectionSize"], typing_extensions.Literal["sectionUnits"], typing_extensions.Literal["sections"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleType"]) -> MetaOapg.properties.sampleType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialEntityId"]) -> typing.Union[MetaOapg.properties.spatialEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["donor"]) -> typing.Union['TissueDonor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectionCount"]) -> typing.Union[MetaOapg.properties.sectionCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectionSize"]) -> typing.Union[MetaOapg.properties.sectionSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectionUnits"]) -> typing.Union[MetaOapg.properties.sectionUnits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sections"]) -> typing.Union[MetaOapg.properties.sections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sampleType"], typing_extensions.Literal["spatialEntityId"], typing_extensions.Literal["donor"], typing_extensions.Literal["sectionCount"], typing_extensions.Literal["sectionSize"], typing_extensions.Literal["sectionUnits"], typing_extensions.Literal["sections"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sampleType: typing.Union[MetaOapg.properties.sampleType, str, ],
        spatialEntityId: typing.Union[MetaOapg.properties.spatialEntityId, str, schemas.Unset] = schemas.unset,
        donor: typing.Union['TissueDonor', schemas.Unset] = schemas.unset,
        sectionCount: typing.Union[MetaOapg.properties.sectionCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sectionSize: typing.Union[MetaOapg.properties.sectionSize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sectionUnits: typing.Union[MetaOapg.properties.sectionUnits, str, schemas.Unset] = schemas.unset,
        sections: typing.Union[MetaOapg.properties.sections, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TissueBlock':
        return super().__new__(
            cls,
            *_args,
            sampleType=sampleType,
            spatialEntityId=spatialEntityId,
            donor=donor,
            sectionCount=sectionCount,
            sectionSize=sectionSize,
            sectionUnits=sectionUnits,
            sections=sections,
            _configuration=_configuration,
            **kwargs,
        )

from ccf_openapi_client.model.json_ld_object import JsonLdObject
from ccf_openapi_client.model.tissue_common import TissueCommon
from ccf_openapi_client.model.tissue_donor import TissueDonor
from ccf_openapi_client.model.tissue_sample_common import TissueSampleCommon
from ccf_openapi_client.model.tissue_section import TissueSection
