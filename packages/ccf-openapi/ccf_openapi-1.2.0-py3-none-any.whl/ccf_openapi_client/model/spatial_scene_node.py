# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class SpatialSceneNode(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            tooltip = schemas.StrSchema
            unpickable = schemas.BoolSchema
            geometry = schemas.StrSchema
            _lighting = schemas.StrSchema
            zoomBasedOpacity = schemas.BoolSchema
            zoomToOnLoad = schemas.BoolSchema
            scenegraph = schemas.StrSchema
            scenegraphNode = schemas.StrSchema
        
            @staticmethod
            def color() -> typing.Type['Rgba']:
                return Rgba
            opacity = schemas.NumberSchema
            
            
            class transformMatrix(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 16
                    min_items = 16
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transformMatrix':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            priority = schemas.NumberSchema
            __annotations__ = {
                "name": name,
                "tooltip": tooltip,
                "unpickable": unpickable,
                "geometry": geometry,
                "_lighting": _lighting,
                "zoomBasedOpacity": zoomBasedOpacity,
                "zoomToOnLoad": zoomToOnLoad,
                "scenegraph": scenegraph,
                "scenegraphNode": scenegraphNode,
                "color": color,
                "opacity": opacity,
                "transformMatrix": transformMatrix,
                "priority": priority,
            }
        additional_properties = schemas.AnyTypeSchema
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                JsonLdObject,
                SpatialEntityCommon,
            ]

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltip"]) -> MetaOapg.properties.tooltip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unpickable"]) -> MetaOapg.properties.unpickable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geometry"]) -> MetaOapg.properties.geometry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_lighting"]) -> MetaOapg.properties._lighting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoomBasedOpacity"]) -> MetaOapg.properties.zoomBasedOpacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoomToOnLoad"]) -> MetaOapg.properties.zoomToOnLoad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenegraph"]) -> MetaOapg.properties.scenegraph: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenegraphNode"]) -> MetaOapg.properties.scenegraphNode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> 'Rgba': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opacity"]) -> MetaOapg.properties.opacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transformMatrix"]) -> MetaOapg.properties.transformMatrix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["tooltip"], typing_extensions.Literal["unpickable"], typing_extensions.Literal["geometry"], typing_extensions.Literal["_lighting"], typing_extensions.Literal["zoomBasedOpacity"], typing_extensions.Literal["zoomToOnLoad"], typing_extensions.Literal["scenegraph"], typing_extensions.Literal["scenegraphNode"], typing_extensions.Literal["color"], typing_extensions.Literal["opacity"], typing_extensions.Literal["transformMatrix"], typing_extensions.Literal["priority"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltip"]) -> typing.Union[MetaOapg.properties.tooltip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unpickable"]) -> typing.Union[MetaOapg.properties.unpickable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geometry"]) -> typing.Union[MetaOapg.properties.geometry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_lighting"]) -> typing.Union[MetaOapg.properties._lighting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoomBasedOpacity"]) -> typing.Union[MetaOapg.properties.zoomBasedOpacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoomToOnLoad"]) -> typing.Union[MetaOapg.properties.zoomToOnLoad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenegraph"]) -> typing.Union[MetaOapg.properties.scenegraph, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenegraphNode"]) -> typing.Union[MetaOapg.properties.scenegraphNode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union['Rgba', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opacity"]) -> typing.Union[MetaOapg.properties.opacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transformMatrix"]) -> typing.Union[MetaOapg.properties.transformMatrix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["tooltip"], typing_extensions.Literal["unpickable"], typing_extensions.Literal["geometry"], typing_extensions.Literal["_lighting"], typing_extensions.Literal["zoomBasedOpacity"], typing_extensions.Literal["zoomToOnLoad"], typing_extensions.Literal["scenegraph"], typing_extensions.Literal["scenegraphNode"], typing_extensions.Literal["color"], typing_extensions.Literal["opacity"], typing_extensions.Literal["transformMatrix"], typing_extensions.Literal["priority"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        tooltip: typing.Union[MetaOapg.properties.tooltip, str, schemas.Unset] = schemas.unset,
        unpickable: typing.Union[MetaOapg.properties.unpickable, bool, schemas.Unset] = schemas.unset,
        geometry: typing.Union[MetaOapg.properties.geometry, str, schemas.Unset] = schemas.unset,
        _lighting: typing.Union[MetaOapg.properties._lighting, str, schemas.Unset] = schemas.unset,
        zoomBasedOpacity: typing.Union[MetaOapg.properties.zoomBasedOpacity, bool, schemas.Unset] = schemas.unset,
        zoomToOnLoad: typing.Union[MetaOapg.properties.zoomToOnLoad, bool, schemas.Unset] = schemas.unset,
        scenegraph: typing.Union[MetaOapg.properties.scenegraph, str, schemas.Unset] = schemas.unset,
        scenegraphNode: typing.Union[MetaOapg.properties.scenegraphNode, str, schemas.Unset] = schemas.unset,
        color: typing.Union['Rgba', schemas.Unset] = schemas.unset,
        opacity: typing.Union[MetaOapg.properties.opacity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transformMatrix: typing.Union[MetaOapg.properties.transformMatrix, list, tuple, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'SpatialSceneNode':
        return super().__new__(
            cls,
            *_args,
            name=name,
            tooltip=tooltip,
            unpickable=unpickable,
            geometry=geometry,
            _lighting=_lighting,
            zoomBasedOpacity=zoomBasedOpacity,
            zoomToOnLoad=zoomToOnLoad,
            scenegraph=scenegraph,
            scenegraphNode=scenegraphNode,
            color=color,
            opacity=opacity,
            transformMatrix=transformMatrix,
            priority=priority,
            _configuration=_configuration,
            **kwargs,
        )

from ccf_openapi_client.model.json_ld_object import JsonLdObject
from ccf_openapi_client.model.rgba import Rgba
from ccf_openapi_client.model.spatial_entity_common import SpatialEntityCommon
