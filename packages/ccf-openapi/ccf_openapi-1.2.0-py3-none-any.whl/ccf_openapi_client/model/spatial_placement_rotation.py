# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ccf_openapi_client import schemas  # noqa: F401


class SpatialPlacementRotation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The properties to define the Rotation aspect of Spatial Placements.
    """


    class MetaOapg:
        required = {
            "y_rotation",
            "rotation_units",
            "z_rotation",
            "x_rotation",
        }
        
        class properties:
            x_rotation = schemas.NumberSchema
            y_rotation = schemas.NumberSchema
            z_rotation = schemas.NumberSchema
            rotation_units = schemas.StrSchema
            __annotations__ = {
                "x_rotation": x_rotation,
                "y_rotation": y_rotation,
                "z_rotation": z_rotation,
                "rotation_units": rotation_units,
            }
    
    y_rotation: MetaOapg.properties.y_rotation
    rotation_units: MetaOapg.properties.rotation_units
    z_rotation: MetaOapg.properties.z_rotation
    x_rotation: MetaOapg.properties.x_rotation
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x_rotation"]) -> MetaOapg.properties.x_rotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y_rotation"]) -> MetaOapg.properties.y_rotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["z_rotation"]) -> MetaOapg.properties.z_rotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotation_units"]) -> MetaOapg.properties.rotation_units: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["x_rotation", "y_rotation", "z_rotation", "rotation_units", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x_rotation"]) -> MetaOapg.properties.x_rotation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y_rotation"]) -> MetaOapg.properties.y_rotation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["z_rotation"]) -> MetaOapg.properties.z_rotation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotation_units"]) -> MetaOapg.properties.rotation_units: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["x_rotation", "y_rotation", "z_rotation", "rotation_units", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        y_rotation: typing.Union[MetaOapg.properties.y_rotation, decimal.Decimal, int, float, ],
        rotation_units: typing.Union[MetaOapg.properties.rotation_units, str, ],
        z_rotation: typing.Union[MetaOapg.properties.z_rotation, decimal.Decimal, int, float, ],
        x_rotation: typing.Union[MetaOapg.properties.x_rotation, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpatialPlacementRotation':
        return super().__new__(
            cls,
            *_args,
            y_rotation=y_rotation,
            rotation_units=rotation_units,
            z_rotation=z_rotation,
            x_rotation=x_rotation,
            _configuration=_configuration,
            **kwargs,
        )
