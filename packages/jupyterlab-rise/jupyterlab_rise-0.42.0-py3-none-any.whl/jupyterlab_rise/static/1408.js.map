{"version":3,"file":"1408.bundle.js","mappings":"6LAOIA,E,YACJ,SAAWA,GAIPA,EAAWC,KAAO,oBAIlBD,EAAWE,MAAQ,eACtB,CATD,CASGF,IAAeA,EAAa,CAAC,IAIzB,MAAMG,EACT,WAAAC,GACIC,KAAKC,cAAe,CACxB,CACA,wBAAMC,GACF,GAAIF,KAAKC,aACL,aAEE,uEACN,MAAM,QAAEE,SAAkB,iCACpB,MAAEC,SAAgB,iFAClB,IAAEC,SAAc,mFAChB,QAAEC,SAAkB,+DACpB,YAAEC,SAAsB,8EACxB,YAAEC,SAAsB,sCACxB,YAAEC,SAAsB,iFACxB,eAAEC,SAAyB,gCAC3B,oBAAEC,SAA8B,gFACtCR,EAAQS,SAASC,SAASF,EAAoBH,EAAY,IAAIC,EAAYC,QAO1E,MAAMI,EAAQ,IAAIV,EAAM,CAEpBW,KAAM,IARV,cAAwBT,EACpB,WAAAP,GACIiB,SAASC,WACTjB,KAAKkB,aAAe,CAAC,CACzB,KAMEC,EAAM,IAAId,EAAI,CAChBe,SAAUb,EAAYc,OAAO,WAC7BC,WAAY,CACR,CAAC,IAAK,KACN,CAAC,MAAO,QAEZC,YAAa,CACT,CAAC,KAAM,MACP,CAAC,MAAO,QAEZC,gBAAgB,EAChBC,qBAAqB,IAEzBzB,KAAK0B,cAAgBvB,EAAQwB,SAASC,OAAOD,SAAU,CACnDE,SAAUV,EACVW,UAAWhB,IAEfd,KAAKC,cAAe,CACxB,CAIA,kBAAM8B,GAEF,aADM/B,KAAKE,qBACJF,KAAK0B,aAChB,CAIA,aAAMM,CAAQC,GACV,UACUjC,KAAKE,oBACf,CACA,MAAOgC,GAEH,YADAC,QAAQC,MAAMF,EAElB,CACAlC,KAAK0B,cAAcW,QAAQC,SAAW,CAACL,GACvCjC,KAAK0B,cAAca,QAAQC,gBACpBxC,KAAK0B,cAAcW,QAAQC,QACtC,EAKJ,MA2BA,EA3BsB,CAClBG,GAAI,uCACJC,YAAa,0DACbC,SAAU,EAAAC,iBACVC,SAAWC,IACP,MAAMC,EAAa,IAAIjD,EAkBvB,OAjBAgD,EAAIE,SAASC,WAAWtD,EAAWC,KAAM,CACrCsD,QAASC,UACL,MACMC,SADWL,EAAWhB,gBACZsB,gBACVC,UAAUC,UAAUC,UAAUJ,EAAKK,KAAKA,KAAK,EAEvDC,MAAO,uBAEXZ,EAAIE,SAASC,WAAWtD,EAAWE,MAAO,CACtCqD,QAASC,MAAOQ,IACZ,MAAMC,QAAWb,EAAWhB,eACtBlC,EAAQ8D,EAAY,OAAK,EAC/BC,EAAGP,UAAUhB,QAAQxC,MAAQA,EAC7B+D,EAAGC,UAAU,EAEjBH,MAAOC,GAAQ,kBAAoBA,EAAY,MAAI,IAAIA,EAAY,QAAM,WAEtEZ,CAAU,EAErBe,WAAW,E","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/mathjax-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module mathjax-extension\n */\nimport { ILatexTypesetter } from '@jupyterlab/rendermime';\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Copy raw LaTeX to clipboard.\n     */\n    CommandIDs.copy = 'mathjax:clipboard';\n    /**\n     * Scale MathJax elements.\n     */\n    CommandIDs.scale = 'mathjax:scale';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The MathJax Typesetter.\n */\nexport class MathJaxTypesetter {\n    constructor() {\n        this._initialized = false;\n    }\n    async _ensureInitialized() {\n        if (this._initialized) {\n            return;\n        }\n        await import('mathjax-full/js/input/tex/require/RequireConfiguration');\n        const { mathjax } = await import('mathjax-full/js/mathjax');\n        const { CHTML } = await import('mathjax-full/js/output/chtml');\n        const { TeX } = await import('mathjax-full/js/input/tex');\n        const { TeXFont } = await import('mathjax-full/js/output/chtml/fonts/tex');\n        const { AllPackages } = await import('mathjax-full/js/input/tex/AllPackages');\n        const { SafeHandler } = await import('mathjax-full/js/ui/safe/SafeHandler');\n        const { HTMLHandler } = await import('mathjax-full/js/handlers/html/HTMLHandler');\n        const { browserAdaptor } = await import('mathjax-full/js/adaptors/browserAdaptor');\n        const { AssistiveMmlHandler } = await import('mathjax-full/js/a11y/assistive-mml');\n        mathjax.handlers.register(AssistiveMmlHandler(SafeHandler(new HTMLHandler(browserAdaptor()))));\n        class EmptyFont extends TeXFont {\n            constructor() {\n                super(...arguments);\n                this.defaultFonts = {};\n            }\n        }\n        const chtml = new CHTML({\n            // Override dynamically generated fonts in favor of our font css\n            font: new EmptyFont()\n        });\n        const tex = new TeX({\n            packages: AllPackages.concat('require'),\n            inlineMath: [\n                ['$', '$'],\n                ['\\\\(', '\\\\)']\n            ],\n            displayMath: [\n                ['$$', '$$'],\n                ['\\\\[', '\\\\]']\n            ],\n            processEscapes: true,\n            processEnvironments: true\n        });\n        this._mathDocument = mathjax.document(window.document, {\n            InputJax: tex,\n            OutputJax: chtml\n        });\n        this._initialized = true;\n    }\n    /**\n     * Get an instance of the MathDocument object.\n     */\n    async mathDocument() {\n        await this._ensureInitialized();\n        return this._mathDocument;\n    }\n    /**\n     * Typeset the math in a node.\n     */\n    async typeset(node) {\n        try {\n            await this._ensureInitialized();\n        }\n        catch (e) {\n            console.error(e);\n            return;\n        }\n        this._mathDocument.options.elements = [node];\n        this._mathDocument.clear().render();\n        delete this._mathDocument.options.elements;\n    }\n}\n/**\n * The MathJax extension.\n */\nconst mathJaxPlugin = {\n    id: '@jupyterlab/mathjax-extension:plugin',\n    description: 'Provides the LaTeX mathematical expression interpreter.',\n    provides: ILatexTypesetter,\n    activate: (app) => {\n        const typesetter = new MathJaxTypesetter();\n        app.commands.addCommand(CommandIDs.copy, {\n            execute: async () => {\n                const md = await typesetter.mathDocument();\n                const oJax = md.outputJax;\n                await navigator.clipboard.writeText(oJax.math.math);\n            },\n            label: 'MathJax Copy Latex'\n        });\n        app.commands.addCommand(CommandIDs.scale, {\n            execute: async (args) => {\n                const md = await typesetter.mathDocument();\n                const scale = args['scale'] || 1.0;\n                md.outputJax.options.scale = scale;\n                md.rerender();\n            },\n            label: args => 'Mathjax Scale ' + (args['scale'] ? `x${args['scale']}` : 'Reset')\n        });\n        return typesetter;\n    },\n    autoStart: true\n};\nexport default mathJaxPlugin;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","copy","scale","MathJaxTypesetter","constructor","this","_initialized","_ensureInitialized","mathjax","CHTML","TeX","TeXFont","AllPackages","SafeHandler","HTMLHandler","browserAdaptor","AssistiveMmlHandler","handlers","register","chtml","font","super","arguments","defaultFonts","tex","packages","concat","inlineMath","displayMath","processEscapes","processEnvironments","_mathDocument","document","window","InputJax","OutputJax","mathDocument","typeset","node","e","console","error","options","elements","clear","render","id","description","provides","ILatexTypesetter","activate","app","typesetter","commands","addCommand","execute","async","oJax","outputJax","navigator","clipboard","writeText","math","label","args","md","rerender","autoStart"],"sourceRoot":""}