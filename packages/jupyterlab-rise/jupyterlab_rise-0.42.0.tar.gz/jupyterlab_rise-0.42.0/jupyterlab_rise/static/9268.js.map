{"version":3,"file":"9268.bundle.js","mappings":"sMAcA,MAyBA,EAzBe,CACXA,GAAI,4CACJC,YAAa,gCACbC,WAAW,EACXC,SAAU,EAAAC,gBACVC,SAAU,CAAC,EAAAC,yBACXC,SAAU,CAACC,EAAKC,KACZC,EAAQC,iBAAiBF,GAClB,CACHG,OAASC,GAAY,IAAIC,SAAQ,CAACC,EAASC,MACvC,IAAAC,QAAOJ,GAAS,CAACK,EAAKL,KACdK,EACAF,EAAOE,GAGPH,EAAQF,EACZ,GACF,OASlB,IAAIH,GACJ,SAAWA,GACP,IAAIS,GAAoB,EA0CxBT,EAAQC,iBAzCR,SAA0BF,GAClBU,IAIAA,GAAoB,EAExB,EAAAF,OAAOG,WAAW,CACdC,KAAK,EACLC,UAAU,EAEVC,WAAY,YACZC,UAAW,CAACC,EAAMC,EAAMC,KACpB,MAAMC,EAAK,CAACV,EAAKO,KACTE,GACAA,EAAST,EAAKO,GAEXA,GAEX,IAAKC,EAED,OAAOE,EAAG,KAAMH,GAEpB,MAAMI,EAAKC,SAASC,cAAc,OAClC,IACItB,EACKe,UAAUC,EAAMhB,EAAUuB,SAASN,GAAOG,GAC1CI,MAAK,IACCL,EAAG,KAAMC,EAAGK,aAElBC,OAAMC,GACAR,EAAGQ,EAAQX,IAE1B,CACA,MAAOP,GAEH,OADAmB,QAAQC,MAAM,uBAAuBZ,SAAaR,GAC3CU,EAAGV,EAAKO,EACnB,KAGZ,CAEH,CA5CD,CA4CGf,IAAYA,EAAU,CAAC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/markedparser-extension/lib/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module markedparser-extension\n */\nimport { IEditorLanguageRegistry } from '@jupyterlab/codemirror';\nimport { IMarkdownParser } from '@jupyterlab/rendermime';\nimport { marked } from 'marked';\n/**\n * The markdown parser plugin.\n */\nconst plugin = {\n    id: '@jupyterlab/markedparser-extension:plugin',\n    description: 'Provides the Markdown parser.',\n    autoStart: true,\n    provides: IMarkdownParser,\n    requires: [IEditorLanguageRegistry],\n    activate: (app, languages) => {\n        Private.initializeMarked(languages);\n        return {\n            render: (content) => new Promise((resolve, reject) => {\n                marked(content, (err, content) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(content);\n                    }\n                });\n            })\n        };\n    }\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\nvar Private;\n(function (Private) {\n    let markedInitialized = false;\n    function initializeMarked(languages) {\n        if (markedInitialized) {\n            return;\n        }\n        else {\n            markedInitialized = true;\n        }\n        marked.setOptions({\n            gfm: true,\n            sanitize: false,\n            // breaks: true; We can't use GFM breaks as it causes problems with tables\n            langPrefix: `language-`,\n            highlight: (code, lang, callback) => {\n                const cb = (err, code) => {\n                    if (callback) {\n                        callback(err, code);\n                    }\n                    return code;\n                };\n                if (!lang) {\n                    // no language, no highlight\n                    return cb(null, code);\n                }\n                const el = document.createElement('div');\n                try {\n                    languages\n                        .highlight(code, languages.findBest(lang), el)\n                        .then(() => {\n                        return cb(null, el.innerHTML);\n                    })\n                        .catch(reason => {\n                        return cb(reason, code);\n                    });\n                }\n                catch (err) {\n                    console.error(`Failed to highlight ${lang} code`, err);\n                    return cb(err, code);\n                }\n            }\n        });\n    }\n    Private.initializeMarked = initializeMarked;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["id","description","autoStart","provides","IMarkdownParser","requires","IEditorLanguageRegistry","activate","app","languages","Private","initializeMarked","render","content","Promise","resolve","reject","marked","err","markedInitialized","setOptions","gfm","sanitize","langPrefix","highlight","code","lang","callback","cb","el","document","createElement","findBest","then","innerHTML","catch","reason","console","error"],"sourceRoot":""}