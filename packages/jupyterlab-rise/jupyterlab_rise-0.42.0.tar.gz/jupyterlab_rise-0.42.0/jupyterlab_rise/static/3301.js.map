{"version":3,"file":"3301.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/commands/dist/index.es6.js"],"sourcesContent":["import { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Platform, Selector } from '@lumino/domutils';\nimport { getKeyboardLayout } from '@lumino/keyboard';\nimport { Signal } from '@lumino/signaling';\n\n// Copyright (c) Jupyter Development Team.\n/**\n * An object which manages a collection of commands.\n *\n * #### Notes\n * A command registry can be used to populate a variety of action-based\n * widgets, such as command palettes, menus, and toolbars.\n */\nclass CommandRegistry {\n    constructor() {\n        this._timerID = 0;\n        this._replaying = false;\n        this._keystrokes = [];\n        this._keydownEvents = [];\n        this._keyBindings = [];\n        this._exactKeyMatch = null;\n        this._commands = new Map();\n        this._commandChanged = new Signal(this);\n        this._commandExecuted = new Signal(this);\n        this._keyBindingChanged = new Signal(this);\n    }\n    /**\n     * A signal emitted when a command has changed.\n     *\n     * #### Notes\n     * This signal is useful for visual representations of commands which\n     * need to refresh when the state of a relevant command has changed.\n     */\n    get commandChanged() {\n        return this._commandChanged;\n    }\n    /**\n     * A signal emitted when a command has executed.\n     *\n     * #### Notes\n     * Care should be taken when consuming this signal. The command system is used\n     * by many components for many user actions. Handlers registered with this\n     * signal must return quickly to ensure the overall application remains responsive.\n     */\n    get commandExecuted() {\n        return this._commandExecuted;\n    }\n    /**\n     * A signal emitted when a key binding is changed.\n     */\n    get keyBindingChanged() {\n        return this._keyBindingChanged;\n    }\n    /**\n     * A read-only array of the key bindings in the registry.\n     */\n    get keyBindings() {\n        return this._keyBindings;\n    }\n    /**\n     * List the ids of the registered commands.\n     *\n     * @returns A new array of the registered command ids.\n     */\n    listCommands() {\n        return Array.from(this._commands.keys());\n    }\n    /**\n     * Test whether a specific command is registered.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @returns `true` if the command is registered, `false` otherwise.\n     */\n    hasCommand(id) {\n        return this._commands.has(id);\n    }\n    /**\n     * Add a command to the registry.\n     *\n     * @param id - The unique id of the command.\n     *\n     * @param options - The options for the command.\n     *\n     * @returns A disposable which will remove the command.\n     *\n     * @throws An error if the given `id` is already registered.\n     */\n    addCommand(id, options) {\n        // Throw an error if the id is already registered.\n        if (this._commands.has(id)) {\n            throw new Error(`Command '${id}' already registered.`);\n        }\n        // Add the command to the registry.\n        this._commands.set(id, Private.createCommand(options));\n        // Emit the `commandChanged` signal.\n        this._commandChanged.emit({ id, type: 'added' });\n        // Return a disposable which will remove the command.\n        return new DisposableDelegate(() => {\n            // Remove the command from the registry.\n            this._commands.delete(id);\n            // Emit the `commandChanged` signal.\n            this._commandChanged.emit({ id, type: 'removed' });\n        });\n    }\n    /**\n     * Notify listeners that the state of a command has changed.\n     *\n     * @param id - The id of the command which has changed. If more than\n     *   one command has changed, this argument should be omitted.\n     *\n     * @throws An error if the given `id` is not registered.\n     *\n     * #### Notes\n     * This method should be called by the command author whenever the\n     * application state changes such that the results of the command\n     * metadata functions may have changed.\n     *\n     * This will cause the `commandChanged` signal to be emitted.\n     */\n    notifyCommandChanged(id) {\n        if (id !== undefined && !this._commands.has(id)) {\n            throw new Error(`Command '${id}' is not registered.`);\n        }\n        this._commandChanged.emit({ id, type: id ? 'changed' : 'many-changed' });\n    }\n    /**\n     * Get the description for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The description for the command.\n     */\n    describedBy(id, args = JSONExt.emptyObject) {\n        var _a;\n        let cmd = this._commands.get(id);\n        return Promise.resolve((_a = cmd === null || cmd === void 0 ? void 0 : cmd.describedBy.call(undefined, args)) !== null && _a !== void 0 ? _a : { args: null });\n    }\n    /**\n     * Get the display label for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The display label for the command, or an empty string\n     *   if the command is not registered.\n     */\n    label(id, args = JSONExt.emptyObject) {\n        var _a;\n        let cmd = this._commands.get(id);\n        return (_a = cmd === null || cmd === void 0 ? void 0 : cmd.label.call(undefined, args)) !== null && _a !== void 0 ? _a : '';\n    }\n    /**\n     * Get the mnemonic index for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The mnemonic index for the command, or `-1` if the\n     *   command is not registered.\n     */\n    mnemonic(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.mnemonic.call(undefined, args) : -1;\n    }\n    /**\n     * Get the icon renderer for a specific command.\n     *\n     * DEPRECATED: if set to a string value, the .icon field will\n     * function as an alias for the .iconClass field, for backwards\n     * compatibility. In the future when this is removed, the default\n     * return type will become undefined.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The icon renderer for the command or `undefined`.\n     */\n    icon(id, args = JSONExt.emptyObject) {\n        var _a;\n        return (_a = this._commands.get(id)) === null || _a === void 0 ? void 0 : _a.icon.call(undefined, args);\n    }\n    /**\n     * Get the icon class for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The icon class for the command, or an empty string if\n     *   the command is not registered.\n     */\n    iconClass(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.iconClass.call(undefined, args) : '';\n    }\n    /**\n     * Get the icon label for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The icon label for the command, or an empty string if\n     *   the command is not registered.\n     */\n    iconLabel(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.iconLabel.call(undefined, args) : '';\n    }\n    /**\n     * Get the short form caption for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The caption for the command, or an empty string if the\n     *   command is not registered.\n     */\n    caption(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.caption.call(undefined, args) : '';\n    }\n    /**\n     * Get the usage help text for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The usage text for the command, or an empty string if\n     *   the command is not registered.\n     */\n    usage(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.usage.call(undefined, args) : '';\n    }\n    /**\n     * Get the extra class name for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The class name for the command, or an empty string if\n     *   the command is not registered.\n     */\n    className(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.className.call(undefined, args) : '';\n    }\n    /**\n     * Get the dataset for a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns The dataset for the command, or an empty dataset if\n     *   the command is not registered.\n     */\n    dataset(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.dataset.call(undefined, args) : {};\n    }\n    /**\n     * Test whether a specific command is enabled.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns A boolean indicating whether the command is enabled,\n     *   or `false` if the command is not registered.\n     */\n    isEnabled(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.isEnabled.call(undefined, args) : false;\n    }\n    /**\n     * Test whether a specific command is toggled.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns A boolean indicating whether the command is toggled,\n     *   or `false` if the command is not registered.\n     */\n    isToggled(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.isToggled.call(undefined, args) : false;\n    }\n    /**\n     * Test whether a specific command is toggleable.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns A boolean indicating whether the command is toggleable,\n     *   or `false` if the command is not registered.\n     */\n    isToggleable(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.isToggleable : false;\n    }\n    /**\n     * Test whether a specific command is visible.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns A boolean indicating whether the command is visible,\n     *   or `false` if the command is not registered.\n     */\n    isVisible(id, args = JSONExt.emptyObject) {\n        let cmd = this._commands.get(id);\n        return cmd ? cmd.isVisible.call(undefined, args) : false;\n    }\n    /**\n     * Execute a specific command.\n     *\n     * @param id - The id of the command of interest.\n     *\n     * @param args - The arguments for the command.\n     *\n     * @returns A promise which resolves with the result of the command.\n     *\n     * #### Notes\n     * The promise will reject if the command throws an exception,\n     * or if the command is not registered.\n     */\n    execute(id, args = JSONExt.emptyObject) {\n        // Reject if the command is not registered.\n        let cmd = this._commands.get(id);\n        if (!cmd) {\n            return Promise.reject(new Error(`Command '${id}' not registered.`));\n        }\n        // Execute the command and reject if an exception is thrown.\n        let value;\n        try {\n            value = cmd.execute.call(undefined, args);\n        }\n        catch (err) {\n            value = Promise.reject(err);\n        }\n        // Create the return promise which resolves the result.\n        let result = Promise.resolve(value);\n        // Emit the command executed signal.\n        this._commandExecuted.emit({ id, args, result });\n        // Return the result promise to the caller.\n        return result;\n    }\n    /**\n     * Add a key binding to the registry.\n     *\n     * @param options - The options for creating the key binding.\n     *\n     * @returns A disposable which removes the added key binding.\n     *\n     * #### Notes\n     * If multiple key bindings are registered for the same sequence, the\n     * binding with the highest selector specificity is executed first. A\n     * tie is broken by using the most recently added key binding.\n     *\n     * Ambiguous key bindings are resolved with a timeout. As an example,\n     * suppose two key bindings are registered: one with the key sequence\n     * `['Ctrl D']`, and another with `['Ctrl D', 'Ctrl W']`. If the user\n     * presses `Ctrl D`, the first binding cannot be immediately executed\n     * since the user may intend to complete the chord with `Ctrl W`. For\n     * such cases, a timer is used to allow the chord to be completed. If\n     * the chord is not completed before the timeout, the first binding\n     * is executed.\n     */\n    addKeyBinding(options) {\n        // Create the binding for the given options.\n        let binding = Private.createKeyBinding(options);\n        // Add the key binding to the bindings array.\n        this._keyBindings.push(binding);\n        // Emit the `bindingChanged` signal.\n        this._keyBindingChanged.emit({ binding, type: 'added' });\n        // Return a disposable which will remove the binding.\n        return new DisposableDelegate(() => {\n            // Remove the binding from the array.\n            ArrayExt.removeFirstOf(this._keyBindings, binding);\n            // Emit the `bindingChanged` signal.\n            this._keyBindingChanged.emit({ binding, type: 'removed' });\n        });\n    }\n    /**\n     * Process a `'keydown'` event and invoke a matching key binding.\n     *\n     * @param event - The event object for a `'keydown'` event.\n     *\n     * #### Notes\n     * This should be called in response to a `'keydown'` event in order\n     * to invoke the command for the best matching key binding.\n     *\n     * The registry **does not** install its own listener for `'keydown'`\n     * events. This allows the application full control over the nodes\n     * and phase for which the registry processes `'keydown'` events.\n     *\n     * When the keydown event is processed, if the event target or any of its\n     * ancestor nodes has a `data-lm-suppress-shortcuts` attribute, its keydown\n     * events will not invoke commands.\n     */\n    processKeydownEvent(event) {\n        // Bail immediately if playing back keystrokes.\n        if (this._replaying || CommandRegistry.isModifierKeyPressed(event)) {\n            return;\n        }\n        // Get the normalized keystroke for the event.\n        let keystroke = CommandRegistry.keystrokeForKeydownEvent(event);\n        // If the keystroke is not valid for the keyboard layout, replay\n        // any suppressed events and clear the pending state.\n        if (!keystroke) {\n            this._replayKeydownEvents();\n            this._clearPendingState();\n            return;\n        }\n        // Add the keystroke to the current key sequence.\n        this._keystrokes.push(keystroke);\n        // Find the exact and partial matches for the key sequence.\n        let { exact, partial } = Private.matchKeyBinding(this._keyBindings, this._keystrokes, event);\n        // If there is no exact match and no partial match, replay\n        // any suppressed events and clear the pending state.\n        if (!exact && !partial) {\n            this._replayKeydownEvents();\n            this._clearPendingState();\n            return;\n        }\n        // Stop propagation of the event. If there is only a partial match,\n        // the event will be replayed if a final exact match never occurs.\n        event.preventDefault();\n        event.stopPropagation();\n        // If there is an exact match but no partial match, the exact match\n        // can be dispatched immediately. The pending state is cleared so\n        // the next key press starts from the default state.\n        if (exact && !partial) {\n            this._executeKeyBinding(exact);\n            this._clearPendingState();\n            return;\n        }\n        // If there is both an exact match and a partial match, the exact\n        // match is stored for future dispatch in case the timer expires\n        // before a more specific match is triggered.\n        if (exact) {\n            this._exactKeyMatch = exact;\n        }\n        // Store the event for possible playback in the future.\n        this._keydownEvents.push(event);\n        // (Re)start the timer to dispatch the most recent exact match\n        // in case the partial match fails to result in an exact match.\n        this._startTimer();\n    }\n    /**\n     * Start or restart the pending timeout.\n     */\n    _startTimer() {\n        this._clearTimer();\n        this._timerID = window.setTimeout(() => {\n            this._onPendingTimeout();\n        }, Private.CHORD_TIMEOUT);\n    }\n    /**\n     * Clear the pending timeout.\n     */\n    _clearTimer() {\n        if (this._timerID !== 0) {\n            clearTimeout(this._timerID);\n            this._timerID = 0;\n        }\n    }\n    /**\n     * Replay the keydown events which were suppressed.\n     */\n    _replayKeydownEvents() {\n        if (this._keydownEvents.length === 0) {\n            return;\n        }\n        this._replaying = true;\n        this._keydownEvents.forEach(Private.replayKeyEvent);\n        this._replaying = false;\n    }\n    /**\n     * Execute the command for the given key binding.\n     *\n     * If the command is missing or disabled, a warning will be logged.\n     */\n    _executeKeyBinding(binding) {\n        let { command, args } = binding;\n        if (!this.hasCommand(command) || !this.isEnabled(command, args)) {\n            let word = this.hasCommand(command) ? 'enabled' : 'registered';\n            let keys = binding.keys.join(', ');\n            let msg1 = `Cannot execute key binding '${keys}':`;\n            let msg2 = `command '${command}' is not ${word}.`;\n            console.warn(`${msg1} ${msg2}`);\n            return;\n        }\n        this.execute(command, args);\n    }\n    /**\n     * Clear the internal pending state.\n     */\n    _clearPendingState() {\n        this._clearTimer();\n        this._exactKeyMatch = null;\n        this._keystrokes.length = 0;\n        this._keydownEvents.length = 0;\n    }\n    /**\n     * Handle the partial match timeout.\n     */\n    _onPendingTimeout() {\n        this._timerID = 0;\n        if (this._exactKeyMatch) {\n            this._executeKeyBinding(this._exactKeyMatch);\n        }\n        else {\n            this._replayKeydownEvents();\n        }\n        this._clearPendingState();\n    }\n}\n/**\n * The namespace for the `CommandRegistry` class statics.\n */\n(function (CommandRegistry) {\n    /**\n     * Parse a keystroke into its constituent components.\n     *\n     * @param keystroke - The keystroke of interest.\n     *\n     * @returns The parsed components of the keystroke.\n     *\n     * #### Notes\n     * The keystroke should be of the form:\n     *   `[<modifier 1> [<modifier 2> [<modifier N> ]]]<primary key>`\n     *\n     * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and\n     * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and\n     * `Ctrl` on all other platforms.\n     *\n     * The parsing is tolerant and will not throw exceptions. Notably:\n     *   - Duplicate modifiers are ignored.\n     *   - Extra primary keys are ignored.\n     *   - The order of modifiers and primary key is irrelevant.\n     *   - The keystroke parts should be separated by whitespace.\n     *   - The keystroke is case sensitive.\n     */\n    function parseKeystroke(keystroke) {\n        let key = '';\n        let alt = false;\n        let cmd = false;\n        let ctrl = false;\n        let shift = false;\n        for (let token of keystroke.split(/\\s+/)) {\n            if (token === 'Accel') {\n                if (Platform.IS_MAC) {\n                    cmd = true;\n                }\n                else {\n                    ctrl = true;\n                }\n            }\n            else if (token === 'Alt') {\n                alt = true;\n            }\n            else if (token === 'Cmd') {\n                cmd = true;\n            }\n            else if (token === 'Ctrl') {\n                ctrl = true;\n            }\n            else if (token === 'Shift') {\n                shift = true;\n            }\n            else if (token.length > 0) {\n                key = token;\n            }\n        }\n        return { cmd, ctrl, alt, shift, key };\n    }\n    CommandRegistry.parseKeystroke = parseKeystroke;\n    /**\n     * Normalize a keystroke into a canonical representation.\n     *\n     * @param keystroke - The keystroke of interest.\n     *\n     * @returns The normalized representation of the keystroke.\n     *\n     * #### Notes\n     * This normalizes the keystroke by removing duplicate modifiers and\n     * extra primary keys, and assembling the parts in a canonical order.\n     *\n     * The `Cmd` modifier is ignored on non-Mac platforms.\n     */\n    function normalizeKeystroke(keystroke) {\n        let mods = '';\n        let parts = parseKeystroke(keystroke);\n        if (parts.ctrl) {\n            mods += 'Ctrl ';\n        }\n        if (parts.alt) {\n            mods += 'Alt ';\n        }\n        if (parts.shift) {\n            mods += 'Shift ';\n        }\n        if (parts.cmd && Platform.IS_MAC) {\n            mods += 'Cmd ';\n        }\n        return mods + parts.key;\n    }\n    CommandRegistry.normalizeKeystroke = normalizeKeystroke;\n    /**\n     * Get the platform-specific normalized keys for an options object.\n     *\n     * @param options - The options for the key binding.\n     *\n     * @returns Array of combined, normalized keys.\n     */\n    function normalizeKeys(options) {\n        let keys;\n        if (Platform.IS_WIN) {\n            keys = options.winKeys || options.keys;\n        }\n        else if (Platform.IS_MAC) {\n            keys = options.macKeys || options.keys;\n        }\n        else {\n            keys = options.linuxKeys || options.keys;\n        }\n        return keys.map(normalizeKeystroke);\n    }\n    CommandRegistry.normalizeKeys = normalizeKeys;\n    /**\n     * Format keystrokes for display on the local system.\n     *\n     * If a list of keystrokes is provided, it will be displayed as\n     * a comma-separated string\n     *\n     * @param keystroke The keystrokes to format\n     * @returns The keystrokes representation\n     */\n    function formatKeystroke(keystroke) {\n        return typeof keystroke === 'string'\n            ? formatSingleKey(keystroke)\n            : keystroke.map(formatSingleKey).join(', ');\n        function formatSingleKey(key) {\n            let mods = [];\n            let separator = Platform.IS_MAC ? ' ' : '+';\n            let parts = parseKeystroke(key);\n            if (parts.ctrl) {\n                mods.push('Ctrl');\n            }\n            if (parts.alt) {\n                mods.push('Alt');\n            }\n            if (parts.shift) {\n                mods.push('Shift');\n            }\n            if (Platform.IS_MAC && parts.cmd) {\n                mods.push('Cmd');\n            }\n            mods.push(parts.key);\n            return mods.map(Private.formatKey).join(separator);\n        }\n    }\n    CommandRegistry.formatKeystroke = formatKeystroke;\n    /**\n     * Check if `'keydown'` event is caused by pressing a modifier key that should be ignored.\n     *\n     * @param event - The event object for a `'keydown'` event.\n     *\n     * @returns `true` if modifier key was pressed, `false` otherwise.\n     */\n    function isModifierKeyPressed(event) {\n        let layout = getKeyboardLayout();\n        let key = layout.keyForKeydownEvent(event);\n        return layout.isModifierKey(key);\n    }\n    CommandRegistry.isModifierKeyPressed = isModifierKeyPressed;\n    /**\n     * Create a normalized keystroke for a `'keydown'` event.\n     *\n     * @param event - The event object for a `'keydown'` event.\n     *\n     * @returns A normalized keystroke, or an empty string if the event\n     *   does not represent a valid keystroke for the given layout.\n     */\n    function keystrokeForKeydownEvent(event) {\n        let layout = getKeyboardLayout();\n        let key = layout.keyForKeydownEvent(event);\n        if (!key || layout.isModifierKey(key)) {\n            return '';\n        }\n        let mods = [];\n        if (event.ctrlKey) {\n            mods.push('Ctrl');\n        }\n        if (event.altKey) {\n            mods.push('Alt');\n        }\n        if (event.shiftKey) {\n            mods.push('Shift');\n        }\n        if (event.metaKey && Platform.IS_MAC) {\n            mods.push('Cmd');\n        }\n        mods.push(key);\n        return mods.join(' ');\n    }\n    CommandRegistry.keystrokeForKeydownEvent = keystrokeForKeydownEvent;\n})(CommandRegistry || (CommandRegistry = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The timeout in ms for triggering a key binding chord.\n     */\n    Private.CHORD_TIMEOUT = 1000;\n    /**\n     * Create a normalized command from an options object.\n     */\n    function createCommand(options) {\n        return {\n            execute: options.execute,\n            describedBy: asFunc(typeof options.describedBy === 'function'\n                ? options.describedBy\n                : { args: null, ...options.describedBy }, () => {\n                return { args: null };\n            }),\n            label: asFunc(options.label, emptyStringFunc),\n            mnemonic: asFunc(options.mnemonic, negativeOneFunc),\n            icon: asFunc(options.icon, undefinedFunc),\n            iconClass: asFunc(options.iconClass, emptyStringFunc),\n            iconLabel: asFunc(options.iconLabel, emptyStringFunc),\n            caption: asFunc(options.caption, emptyStringFunc),\n            usage: asFunc(options.usage, emptyStringFunc),\n            className: asFunc(options.className, emptyStringFunc),\n            dataset: asFunc(options.dataset, emptyDatasetFunc),\n            isEnabled: options.isEnabled || trueFunc,\n            isToggled: options.isToggled || falseFunc,\n            isToggleable: options.isToggleable || !!options.isToggled,\n            isVisible: options.isVisible || trueFunc\n        };\n    }\n    Private.createCommand = createCommand;\n    /**\n     * Create a key binding object from key binding options.\n     */\n    function createKeyBinding(options) {\n        return {\n            keys: CommandRegistry.normalizeKeys(options),\n            selector: validateSelector(options),\n            command: options.command,\n            args: options.args || JSONExt.emptyObject\n        };\n    }\n    Private.createKeyBinding = createKeyBinding;\n    /**\n     * Find the key bindings which match a key sequence.\n     *\n     * This returns a match result which contains the best exact matching\n     * binding, and a flag which indicates if there are partial matches.\n     */\n    function matchKeyBinding(bindings, keys, event) {\n        // The current best exact match.\n        let exact = null;\n        // Whether a partial match has been found.\n        let partial = false;\n        // The match distance for the exact match.\n        let distance = Infinity;\n        // The specificity for the exact match.\n        let specificity = 0;\n        // Iterate over the bindings and search for the best match.\n        for (let i = 0, n = bindings.length; i < n; ++i) {\n            // Lookup the current binding.\n            let binding = bindings[i];\n            // Check whether the key binding sequence is a match.\n            let sqm = matchSequence(binding.keys, keys);\n            // If there is no match, the binding is ignored.\n            if (sqm === 0 /* SequenceMatch.None */) {\n                continue;\n            }\n            // If it is a partial match and no other partial match has been\n            // found, ensure the selector matches and set the partial flag.\n            if (sqm === 2 /* SequenceMatch.Partial */) {\n                if (!partial && targetDistance(binding.selector, event) !== -1) {\n                    partial = true;\n                }\n                continue;\n            }\n            // Ignore the match if the selector doesn't match, or if the\n            // matched node is farther away than the current best match.\n            let td = targetDistance(binding.selector, event);\n            if (td === -1 || td > distance) {\n                continue;\n            }\n            // Get the specificity for the selector.\n            let sp = Selector.calculateSpecificity(binding.selector);\n            // Update the best match if this match is stronger.\n            if (!exact || td < distance || sp >= specificity) {\n                exact = binding;\n                distance = td;\n                specificity = sp;\n            }\n        }\n        // Return the match result.\n        return { exact, partial };\n    }\n    Private.matchKeyBinding = matchKeyBinding;\n    /**\n     * Replay a keyboard event.\n     *\n     * This synthetically dispatches a clone of the keyboard event.\n     */\n    function replayKeyEvent(event) {\n        event.target.dispatchEvent(cloneKeyboardEvent(event));\n    }\n    Private.replayKeyEvent = replayKeyEvent;\n    function formatKey(key) {\n        if (Platform.IS_MAC) {\n            return MAC_DISPLAY.hasOwnProperty(key) ? MAC_DISPLAY[key] : key;\n        }\n        else {\n            return WIN_DISPLAY.hasOwnProperty(key) ? WIN_DISPLAY[key] : key;\n        }\n    }\n    Private.formatKey = formatKey;\n    const MAC_DISPLAY = {\n        Backspace: '⌫',\n        Tab: '⇥',\n        Enter: '⏎',\n        Shift: '⇧',\n        Ctrl: '⌃',\n        Alt: '⌥',\n        Escape: '⎋',\n        PageUp: '⇞',\n        PageDown: '⇟',\n        End: '↘',\n        Home: '↖',\n        ArrowLeft: '←',\n        ArrowUp: '↑',\n        ArrowRight: '→',\n        ArrowDown: '↓',\n        Delete: '⌦',\n        Cmd: '⌘'\n    };\n    const WIN_DISPLAY = {\n        Escape: 'Esc',\n        PageUp: 'Page Up',\n        PageDown: 'Page Down',\n        ArrowLeft: 'Left',\n        ArrowUp: 'Up',\n        ArrowRight: 'Right',\n        ArrowDown: 'Down',\n        Delete: 'Del'\n    };\n    /**\n     * A singleton empty string function.\n     */\n    const emptyStringFunc = () => '';\n    /**\n     * A singleton `-1` number function\n     */\n    const negativeOneFunc = () => -1;\n    /**\n     * A singleton true boolean function.\n     */\n    const trueFunc = () => true;\n    /**\n     * A singleton false boolean function.\n     */\n    const falseFunc = () => false;\n    /**\n     * A singleton empty dataset function.\n     */\n    const emptyDatasetFunc = () => ({});\n    /**\n     * A singleton undefined function\n     */\n    const undefinedFunc = () => undefined;\n    /**\n     * Cast a value or command func to a command func.\n     */\n    function asFunc(value, dfault) {\n        if (value === undefined) {\n            return dfault;\n        }\n        if (typeof value === 'function') {\n            return value;\n        }\n        return () => value;\n    }\n    /**\n     * Validate the selector for an options object.\n     *\n     * This returns the validated selector, or throws if the selector is\n     * invalid or contains commas.\n     */\n    function validateSelector(options) {\n        if (options.selector.indexOf(',') !== -1) {\n            throw new Error(`Selector cannot contain commas: ${options.selector}`);\n        }\n        if (!Selector.isValid(options.selector)) {\n            throw new Error(`Invalid selector: ${options.selector}`);\n        }\n        return options.selector;\n    }\n    /**\n     * Test whether a key binding sequence matches a key sequence.\n     *\n     * Returns a `SequenceMatch` value indicating the type of match.\n     */\n    function matchSequence(bindKeys, userKeys) {\n        if (bindKeys.length < userKeys.length) {\n            return 0 /* SequenceMatch.None */;\n        }\n        for (let i = 0, n = userKeys.length; i < n; ++i) {\n            if (bindKeys[i] !== userKeys[i]) {\n                return 0 /* SequenceMatch.None */;\n            }\n        }\n        if (bindKeys.length > userKeys.length) {\n            return 2 /* SequenceMatch.Partial */;\n        }\n        return 1 /* SequenceMatch.Exact */;\n    }\n    /**\n     * Find the distance from the target node to the first matching node.\n     *\n     * This traverses the event path from `target` to `currentTarget` and\n     * computes the distance from `target` to the first node which matches\n     * the CSS selector. If no match is found, `-1` is returned.\n     */\n    function targetDistance(selector, event) {\n        let targ = event.target;\n        let curr = event.currentTarget;\n        for (let dist = 0; targ !== null; targ = targ.parentElement, ++dist) {\n            if (targ.hasAttribute('data-lm-suppress-shortcuts')) {\n                return -1;\n            }\n            if (Selector.matches(targ, selector)) {\n                return dist;\n            }\n            if (targ === curr) {\n                return -1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Clone a keyboard event.\n     */\n    function cloneKeyboardEvent(event) {\n        // A custom event is required because Chrome nulls out the\n        // `keyCode` field in user-generated `KeyboardEvent` types.\n        let clone = document.createEvent('Event');\n        let bubbles = event.bubbles || true;\n        let cancelable = event.cancelable || true;\n        clone.initEvent(event.type || 'keydown', bubbles, cancelable);\n        clone.key = event.key || '';\n        clone.keyCode = event.keyCode || 0;\n        clone.which = event.keyCode || 0;\n        clone.ctrlKey = event.ctrlKey || false;\n        clone.altKey = event.altKey || false;\n        clone.shiftKey = event.shiftKey || false;\n        clone.metaKey = event.metaKey || false;\n        clone.view = event.view || window;\n        return clone;\n    }\n})(Private || (Private = {}));\n\nexport { CommandRegistry };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["Private","CommandRegistry","constructor","this","_timerID","_replaying","_keystrokes","_keydownEvents","_keyBindings","_exactKeyMatch","_commands","Map","_commandChanged","Signal","_commandExecuted","_keyBindingChanged","commandChanged","commandExecuted","keyBindingChanged","keyBindings","listCommands","Array","from","keys","hasCommand","id","has","addCommand","options","Error","set","createCommand","emit","type","DisposableDelegate","delete","notifyCommandChanged","undefined","describedBy","args","JSONExt","emptyObject","_a","cmd","get","Promise","resolve","call","label","mnemonic","icon","iconClass","iconLabel","caption","usage","className","dataset","isEnabled","isToggled","isToggleable","isVisible","execute","value","reject","err","result","addKeyBinding","binding","createKeyBinding","push","ArrayExt","removeFirstOf","processKeydownEvent","event","isModifierKeyPressed","keystroke","keystrokeForKeydownEvent","_replayKeydownEvents","_clearPendingState","exact","partial","matchKeyBinding","preventDefault","stopPropagation","_executeKeyBinding","_startTimer","_clearTimer","window","setTimeout","_onPendingTimeout","CHORD_TIMEOUT","clearTimeout","length","forEach","replayKeyEvent","command","word","msg1","join","msg2","console","warn","parseKeystroke","key","alt","ctrl","shift","token","split","Platform","IS_MAC","normalizeKeystroke","mods","parts","normalizeKeys","IS_WIN","winKeys","macKeys","linuxKeys","map","formatKeystroke","formatSingleKey","separator","formatKey","layout","getKeyboardLayout","keyForKeydownEvent","isModifierKey","ctrlKey","altKey","shiftKey","metaKey","asFunc","emptyStringFunc","negativeOneFunc","undefinedFunc","emptyDatasetFunc","trueFunc","falseFunc","selector","validateSelector","bindings","distance","Infinity","specificity","i","n","sqm","matchSequence","targetDistance","td","sp","Selector","calculateSpecificity","target","dispatchEvent","clone","document","createEvent","bubbles","cancelable","initEvent","keyCode","which","view","cloneKeyboardEvent","MAC_DISPLAY","hasOwnProperty","WIN_DISPLAY","Backspace","Tab","Enter","Shift","Ctrl","Alt","Escape","PageUp","PageDown","End","Home","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Delete","Cmd","dfault","indexOf","isValid","bindKeys","userKeys","targ","curr","currentTarget","dist","parentElement","hasAttribute","matches"],"sourceRoot":""}