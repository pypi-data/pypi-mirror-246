{"version":3,"file":"1950.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/services.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { StreamLanguage } from '@codemirror/language';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory, CodeMirrorMimeTypeService, EditorExtensionRegistry, EditorLanguageRegistry, EditorThemeRegistry, IEditorExtensionRegistry, IEditorLanguageRegistry, IEditorThemeRegistry, parseMathIPython, ybinding } from '@jupyterlab/codemirror';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { FormComponent, IFormRendererRegistry } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport validatorAjv8 from '@rjsf/validator-ajv8';\nimport React from 'react';\n/**\n * CodeMirror settings plugin ID\n */\nconst SETTINGS_ID = '@jupyterlab/codemirror-extension:plugin';\n/**\n * CodeMirror language registry provider.\n */\nexport const languagePlugin = {\n    id: '@jupyterlab/codemirror-extension:languages',\n    description: 'Provides the CodeMirror languages registry.',\n    provides: IEditorLanguageRegistry,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        const languages = new EditorLanguageRegistry();\n        // Register default languages\n        for (const language of EditorLanguageRegistry.getDefaultLanguages(translator)) {\n            languages.addLanguage(language);\n        }\n        // Add Jupyter Markdown flavor here to support\n        // code block highlighting.\n        languages.addLanguage({\n            name: 'ipythongfm',\n            mime: 'text/x-ipythongfm',\n            load: async () => {\n                const [m, tex] = await Promise.all([\n                    import('@codemirror/lang-markdown'),\n                    import('@codemirror/legacy-modes/mode/stex')\n                ]);\n                return m.markdown({\n                    base: m.markdownLanguage,\n                    codeLanguages: (info) => languages.findBest(info),\n                    extensions: [\n                        parseMathIPython(StreamLanguage.define(tex.stexMath).parser)\n                    ]\n                });\n            }\n        });\n        return languages;\n    }\n};\n/**\n * CodeMirror theme registry provider.\n */\nexport const themePlugin = {\n    id: '@jupyterlab/codemirror-extension:themes',\n    description: 'Provides the CodeMirror theme registry',\n    provides: IEditorThemeRegistry,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        const themes = new EditorThemeRegistry();\n        // Register default themes\n        for (const theme of EditorThemeRegistry.getDefaultThemes(translator)) {\n            themes.addTheme(theme);\n        }\n        return themes;\n    }\n};\n/**\n * CodeMirror editor extensions registry provider.\n */\nexport const extensionPlugin = {\n    id: '@jupyterlab/codemirror-extension:extensions',\n    description: 'Provides the CodeMirror extension factory registry.',\n    provides: IEditorExtensionRegistry,\n    requires: [IEditorThemeRegistry],\n    optional: [ITranslator, ISettingRegistry, IFormRendererRegistry],\n    activate: (app, themes, translator, settingRegistry, formRegistry) => {\n        const registry = new EditorExtensionRegistry();\n        // Register default extensions\n        for (const extensionFactory of EditorExtensionRegistry.getDefaultExtensions({\n            themes,\n            translator\n        })) {\n            registry.addExtension(extensionFactory);\n        }\n        if (settingRegistry) {\n            const updateSettings = (settings) => {\n                var _a;\n                registry.baseConfiguration =\n                    (_a = settings.get('defaultConfig').composite) !== null && _a !== void 0 ? _a : {};\n            };\n            void Promise.all([\n                settingRegistry.load(SETTINGS_ID),\n                app.restored\n            ]).then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(updateSettings);\n            });\n            formRegistry === null || formRegistry === void 0 ? void 0 : formRegistry.addRenderer(`${SETTINGS_ID}.defaultConfig`, {\n                fieldRenderer: (props) => {\n                    const properties = React.useMemo(() => registry.settingsSchema, []);\n                    const editorConfiguration = props.formContext.settings.id ===\n                        SETTINGS_ID\n                        ? registry.baseConfiguration\n                        : registry.defaultConfiguration;\n                    const defaultFormData = {};\n                    // Only provide customizable options\n                    for (const [key, value] of Object.entries(editorConfiguration)) {\n                        if (typeof properties[key] !== 'undefined') {\n                            defaultFormData[key] = value;\n                        }\n                    }\n                    return (React.createElement(\"div\", { className: \"jp-FormGroup-contentNormal\" },\n                        React.createElement(\"h3\", { className: \"jp-FormGroup-fieldLabel jp-FormGroup-contentItem\" }, props.schema.title),\n                        props.schema.description && (React.createElement(\"div\", { className: \"jp-FormGroup-description\" }, props.schema.description)),\n                        React.createElement(FormComponent, { schema: {\n                                title: props.schema.title,\n                                description: props.schema.description,\n                                type: 'object',\n                                properties,\n                                additionalProperties: false\n                            }, validator: validatorAjv8, formData: { ...defaultFormData, ...props.formData }, formContext: { defaultFormData }, liveValidate: true, onChange: e => {\n                                var _a;\n                                // Only save non-default values\n                                const nonDefault = {};\n                                for (const [property, value] of Object.entries((_a = e.formData) !== null && _a !== void 0 ? _a : {})) {\n                                    const default_ = defaultFormData[property];\n                                    if (default_ === undefined ||\n                                        !JSONExt.deepEqual(value, default_)) {\n                                        nonDefault[property] = value;\n                                    }\n                                }\n                                props.onChange(nonDefault);\n                            }, tagName: \"div\", translator: translator !== null && translator !== void 0 ? translator : nullTranslator })));\n                }\n            });\n        }\n        return registry;\n    }\n};\n/**\n * CodeMirror shared model binding provider.\n */\nexport const bindingPlugin = {\n    id: '@jupyterlab/codemirror-extension:binding',\n    description: 'Register the CodeMirror extension factory binding the editor and the shared model.',\n    autoStart: true,\n    requires: [IEditorExtensionRegistry],\n    activate: (app, extensions) => {\n        extensions.addExtension({\n            name: 'shared-model-binding',\n            factory: options => {\n                var _a;\n                const sharedModel = options.model.sharedModel;\n                return EditorExtensionRegistry.createImmutableExtension(ybinding({\n                    ytext: sharedModel.ysource,\n                    undoManager: (_a = sharedModel.undoManager) !== null && _a !== void 0 ? _a : undefined\n                }));\n            }\n        });\n    }\n};\n/**\n * The editor services.\n */\nexport const servicesPlugin = {\n    id: '@jupyterlab/codemirror-extension:services',\n    description: 'Provides the service to instantiate CodeMirror editors.',\n    provides: IEditorServices,\n    requires: [\n        IEditorLanguageRegistry,\n        IEditorExtensionRegistry,\n        IEditorThemeRegistry\n    ],\n    optional: [ITranslator],\n    activate: (app, languages, extensions, translator) => {\n        const factory = new CodeMirrorEditorFactory({\n            extensions,\n            languages,\n            translator: translator !== null && translator !== void 0 ? translator : nullTranslator\n        });\n        return {\n            factoryService: factory,\n            mimeTypeService: new CodeMirrorMimeTypeService(languages)\n        };\n    }\n};\n//# sourceMappingURL=services.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module codemirror-extension\n */\nimport { ILabShell } from '@jupyterlab/application';\nimport { IPositionModel, LineCol } from '@jupyterlab/codeeditor';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { bindingPlugin, extensionPlugin, languagePlugin, servicesPlugin, themePlugin } from './services';\n/**\n * A plugin providing a line/column status item to the application.\n */\nexport const lineColItem = {\n    id: '@jupyterlab/codemirror-extension:line-col-status',\n    description: 'Provides the code editor cursor position model.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ILabShell, IStatusBar],\n    provides: IPositionModel,\n    activate: (app, translator, labShell, statusBar) => {\n        const item = new LineCol(translator);\n        const providers = new Set();\n        if (statusBar) {\n            // Add the status item to the status bar.\n            statusBar.registerStatusItem(lineColItem.id, {\n                item,\n                align: 'right',\n                rank: 2,\n                isActive: () => !!item.model.editor\n            });\n        }\n        const addEditorProvider = (provider) => {\n            providers.add(provider);\n            if (app.shell.currentWidget) {\n                updateEditor(app.shell, {\n                    newValue: app.shell.currentWidget,\n                    oldValue: null\n                });\n            }\n        };\n        const update = () => {\n            updateEditor(app.shell, {\n                oldValue: app.shell.currentWidget,\n                newValue: app.shell.currentWidget\n            });\n        };\n        function updateEditor(shell, changes) {\n            Promise.all([...providers].map(provider => provider(changes.newValue)))\n                .then(editors => {\n                var _a;\n                item.model.editor =\n                    (_a = editors.filter(editor => editor !== null)[0]) !== null && _a !== void 0 ? _a : null;\n            })\n                .catch(reason => {\n                console.error('Get editors', reason);\n            });\n        }\n        if (labShell) {\n            labShell.currentChanged.connect(updateEditor);\n        }\n        return { addEditorProvider, update };\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    languagePlugin,\n    themePlugin,\n    bindingPlugin,\n    extensionPlugin,\n    servicesPlugin,\n    lineColItem\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["SETTINGS_ID","languagePlugin","id","description","provides","IEditorLanguageRegistry","optional","ITranslator","activate","app","translator","languages","EditorLanguageRegistry","language","getDefaultLanguages","addLanguage","name","mime","load","async","m","tex","Promise","all","markdown","base","markdownLanguage","codeLanguages","info","findBest","extensions","parseMathIPython","StreamLanguage","define","stexMath","parser","themePlugin","IEditorThemeRegistry","themes","EditorThemeRegistry","theme","getDefaultThemes","addTheme","extensionPlugin","IEditorExtensionRegistry","requires","ISettingRegistry","IFormRendererRegistry","settingRegistry","formRegistry","registry","EditorExtensionRegistry","extensionFactory","getDefaultExtensions","addExtension","updateSettings","settings","_a","baseConfiguration","get","composite","restored","then","changed","connect","addRenderer","fieldRenderer","props","properties","settingsSchema","editorConfiguration","formContext","defaultConfiguration","defaultFormData","key","value","Object","entries","className","schema","title","FormComponent","type","additionalProperties","validator","formData","liveValidate","onChange","e","nonDefault","property","default_","undefined","JSONExt","deepEqual","tagName","nullTranslator","bindingPlugin","autoStart","factory","options","sharedModel","model","createImmutableExtension","ybinding","ytext","ysource","undoManager","servicesPlugin","IEditorServices","factoryService","CodeMirrorEditorFactory","mimeTypeService","CodeMirrorMimeTypeService","lineColItem","ILabShell","IStatusBar","IPositionModel","labShell","statusBar","item","LineCol","providers","Set","updateEditor","shell","changes","map","provider","newValue","editors","editor","filter","catch","reason","console","error","registerStatusItem","align","rank","isActive","currentChanged","addEditorProvider","add","currentWidget","oldValue","update"],"sourceRoot":""}