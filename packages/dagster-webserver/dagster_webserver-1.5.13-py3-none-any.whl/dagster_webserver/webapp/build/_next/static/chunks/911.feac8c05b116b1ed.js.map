{"version":3,"file":"static/chunks/911.feac8c05b116b1ed.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationTick.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationUtils.tsx","webpack://_N_E/../ui-core/src/instigation/TickDetailsDialog.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = React.memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = React.useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Caption, colorTextLight} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = React.useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={colorTextLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={colorTextLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={colorTextLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={colorTextLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Body,\n  Tooltip,\n  colorTextLighter,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\n\nimport {LaunchedRunListQuery, LaunchedRunListQueryVariables} from './types/InstigationTick.types';\n\nexport const RunList = ({runIds}: {runIds: string[]}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList = ({originRunIds}: {originRunIds?: string[]}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', color: colorTextLighter()}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={colorTextLight()} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={colorTextLight()} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Group, Mono, colorTextLight} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\n\nexport const InstigatedRunStatus = ({\n  instigationState,\n}: {\n  instigationState: InstigationStateFragment;\n}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: colorTextLight()}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink = ({run}: {run: RunStatusFragment}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${colorTextLight()};\n  }\n`;\n\nexport const DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT = gql`\n  fragment DynamicPartitionsRequestResultFragment on DynamicPartitionsRequestResult {\n    partitionsDefName\n    partitionKeys\n    skippedPartitionKeys\n    type\n  }\n`;\n\nexport const HISTORY_TICK_FRAGMENT = gql`\n  fragment HistoryTick on InstigationTick {\n    id\n    tickId\n    status\n    timestamp\n    endTimestamp\n    cursor\n    instigationType\n    skipReason\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n    dynamicPartitionsRequestResults {\n      ...DynamicPartitionsRequestResultFragment\n    }\n  }\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {\n  Button,\n  DialogFooter,\n  Dialog,\n  Box,\n  Subtitle2,\n  Table,\n  Spinner,\n  DialogHeader,\n  ButtonLink,\n  Tag,\n  MiddleTruncate,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nimport {FailedRunList, RunList} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT} from './InstigationUtils';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\n\ninterface DialogProps extends InnerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport const TickDetailsDialog = ({tickId, isOpen, instigationSelector, onClose}: DialogProps) => {\n  return (\n    <Dialog isOpen={isOpen} onClose={onClose} style={{width: '90vw'}}>\n      <TickDetailsDialogImpl tickId={tickId} instigationSelector={instigationSelector} />\n      <DialogFooter>\n        <Button onClick={onClose}>Close</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface InnerProps {\n  tickId: number | undefined;\n  instigationSelector: InstigationSelector;\n}\n\nconst TickDetailsDialogImpl = ({tickId, instigationSelector}: InnerProps) => {\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, tickId: tickId || 0},\n    skip: !tickId,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const added = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.ADD_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    const deleted = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.DELETE_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  if (!tick) {\n    return (\n      <Box style={{padding: 32}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <DialogHeader\n        label={\n          <TimestampDisplay\n            timestamp={tick.timestamp}\n            timeFormat={{showTimezone: false, showSeconds: true}}\n          />\n        }\n      />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <TickDetailSummary tick={tick} />\n      </Box>\n      {tick.runIds.length || tick.originRunIds.length ? (\n        <>\n          <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n            <Subtitle2>Runs requested</Subtitle2>\n          </Box>\n          {tick.runIds.length ? (\n            <RunList runIds={tick.runIds} />\n          ) : (\n            <FailedRunList originRunIds={tick.originRunIds} />\n          )}\n        </>\n      ) : null}\n      {addedPartitions?.length ? (\n        <>\n          <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n            <Subtitle2>Added partitions</Subtitle2>\n          </Box>\n          <PartitionsTable partitions={addedPartitions} />\n        </>\n      ) : null}\n      {deletedPartitions?.length ? (\n        <>\n          <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n            <Subtitle2>Deleted partitions</Subtitle2>\n          </Box>\n          <PartitionsTable partitions={deletedPartitions} />\n        </>\n      ) : null}\n    </>\n  );\n};\n\nexport function TickDetailSummary({tick}: {tick: HistoryTickFragment | AssetDaemonTickFragment}) {\n  const intent = React.useMemo(() => {\n    switch (tick?.status) {\n      case InstigationTickStatus.FAILURE:\n        return 'danger';\n      case InstigationTickStatus.STARTED:\n        return 'primary';\n      case InstigationTickStatus.SUCCESS:\n        return 'success';\n    }\n    return undefined;\n  }, [tick]);\n\n  const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n\n  return (\n    <>\n      <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, minmax(0, 1fr))', gap: 12}}>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Status</Subtitle2>\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Tag intent={intent}>\n              {tick.status === InstigationTickStatus.STARTED ? (\n                'Evaluating…'\n              ) : (\n                <>\n                  {(isAssetDaemonTick\n                    ? tick.requestedAssetMaterializationCount\n                    : tick.runIds.length) ?? 0}{' '}\n                  requested\n                </>\n              )}\n            </Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  showCustomAlert({\n                    title: 'Tick error',\n                    body: <PythonErrorInfo error={tick.error!} />,\n                  });\n                }}\n              >\n                View error\n              </ButtonLink>\n            ) : null}\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Timestamp</Subtitle2>\n          <div>\n            {tick ? (\n              <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n            ) : (\n              '–'\n            )}\n          </div>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Duration</Subtitle2>\n          <div>\n            {tick?.endTimestamp\n              ? formatElapsedTimeWithoutMsec(tick.endTimestamp * 1000 - tick.timestamp * 1000)\n              : '\\u2013'}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n}\n\nfunction PartitionsTable({partitions}: {partitions: DynamicPartitionsRequestResult[]}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Partition definition</th>\n          <th>Partition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {partitions.flatMap(\n          (partition) =>\n            partition.partitionKeys?.map((key) => (\n              <tr key={key}>\n                <td>\n                  <MiddleTruncate text={partition.partitionsDefName} />\n                </td>\n                <td>\n                  <MiddleTruncate text={key} />\n                </td>\n              </tr>\n            )),\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $tickId: Int!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        tick(tickId: $tickId) {\n          id\n          ...HistoryTick\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n","import {\n  Box,\n  FontFamily,\n  Mono,\n  Popover,\n  colorKeylineDefault,\n  colorTextDefault,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${colorKeylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${colorTextDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n"],"names":["LastRunSummary","React","param","tagElement","name","run","showHover","_param_showButton","showButton","_param_showSummary","showSummary","status","intent","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","jsx","Tag","RunStatusIndicator","size","RunTime","_param_showHover","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","concat","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Caption","color","colorTextLight","Link","stepKey","gql","RunList","runIds","LAUNCHED_RUN_LIST_QUERY","loading","padding","Spinner","purpose","pipelineRunsOrError","NonIdealState","icon","title","description","message","bottom","RunTable","runs","results","FailedRunList","originRunIds","Group","spacing","border","side","colorTextLighter","Body","Tooltip","Icon","margin","TICK_TAG_FRAGMENT","PYTHON_ERROR_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","InstigatedRunStatus","instigationState","instigationRun","span","style","RunStatusLink","target","rel","Mono","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","styled","table","withConfig","DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT","HISTORY_TICK_FRAGMENT","TickDetailsDialog","tickId","isOpen","instigationSelector","onClose","Dialog","width","TickDetailsDialogImpl","DialogFooter","Button","onClick","JOB_SELECTED_TICK_QUERY","skip","tick","instigationStateOrError","dynamicPartitionsRequestResults","request","type","DynamicPartitionsRequestType","ADD_PARTITIONS","partitionKeys","DELETE_PARTITIONS","addedPartitions","deletedPartitions","Fragment","DialogHeader","label","TimestampDisplay","timestamp","timeFormat","showTimezone","showSeconds","vertical","horizontal","TickDetailSummary","Subtitle2","PartitionsTable","partitions","isAssetDaemonTick","InstigationTickStatus","STARTED","display","gridTemplateColumns","requestedAssetMaterializationCount","error","ButtonLink","showCustomAlert","body","PythonErrorInfo","Timestamp","unix","endTimestamp","formatElapsedTimeWithoutMsec","Table","thead","tr","th","tbody","flatMap","partition","map","key","td","MiddleTruncate","text","partitionsDefName","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","MAX_OPACITY","RunStatusPezList","fade","jobName","count","max","ii","OverlayContainer","OverlayTitle","RunRow","fontSize","top","SummaryContainer","colorKeylineDefault","FontFamily","default","colorTextDefault"],"sourceRoot":""}