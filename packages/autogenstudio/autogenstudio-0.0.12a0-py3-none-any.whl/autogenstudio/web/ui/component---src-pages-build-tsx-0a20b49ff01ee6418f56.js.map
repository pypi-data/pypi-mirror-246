{"version":3,"file":"component---src-pages-build-tsx-0a20b49ff01ee6418f56.js","mappings":"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","sources":["webpack://AutoGen_Studio/./src/components/views/builder/skills.tsx","webpack://AutoGen_Studio/./src/components/views/builder/agents.tsx","webpack://AutoGen_Studio/./src/components/views/builder/workflow.tsx","webpack://AutoGen_Studio/./src/components/views/builder/build.tsx","webpack://AutoGen_Studio/./src/pages/build.tsx"],"sourcesContent":["import { PlusIcon } from \"@heroicons/react/24/outline\";\nimport { Input, Modal, message } from \"antd\";\nimport * as React from \"react\";\nimport { ISkill, IStatus } from \"../../types\";\nimport { appContext } from \"../../../hooks/provider\";\nimport {\n  fetchJSON,\n  getSampleSkill,\n  getServerUrl,\n  timeAgo,\n  truncateText,\n} from \"../../utils\";\nimport { Card, CodeBlock, LaunchButton, LoadingOverlay } from \"../../atoms\";\nimport { useConfigStore } from \"../../../hooks/store\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst SkillsView = ({}: any) => {\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<IStatus | null>({\n    status: true,\n    message: \"All good\",\n  });\n\n  const { user } = React.useContext(appContext);\n  const serverUrl = getServerUrl();\n  const listSkillsUrl = `${serverUrl}/skills?user_id=${user?.email}`;\n  const saveSkillsUrl = `${serverUrl}/skills/`;\n\n  const [skills, setSkills] = React.useState<ISkill[] | null>([]);\n  const [selectedSkill, setSelectedSkill] = React.useState<any>(null);\n\n  const [showSkillModal, setShowSkillModal] = React.useState(false);\n  const [showNewSkillModal, setShowNewSkillModal] = React.useState(false);\n\n  const [newSkillTitle, setNewSkillTitle] = React.useState(\"\");\n\n  const sampleSkill = getSampleSkill();\n  const [skillCode, setSkillCode] = React.useState(sampleSkill);\n\n  const fetchSkills = () => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        // console.log(\"skills\", data.data);\n        setSkills(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(listSkillsUrl, payLoad, onSuccess, onError);\n  };\n\n  const saveSkill = () => {\n    // check if skillTextAreaRef.current is not null or \"\"\n\n    if (!skillCode || skillCode == \"\" || skillCode == sampleSkill) {\n      message.error(\"Please provide code for the skill\");\n      return;\n    }\n\n    const skill: ISkill = {\n      title: newSkillTitle,\n      file_name: \"skill.py\",\n      content: skillCode,\n      user_id: user?.email,\n    };\n\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user_id: user?.email,\n        skill: skill,\n      }),\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        // console.log(\"skills\", data.data);\n        setSkills(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n      setSkillCode(\"\");\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(saveSkillsUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (user) {\n      // console.log(\"fetching messages\", messages);\n      fetchSkills();\n    }\n  }, []);\n\n  const skillRows = (skills || []).map((skill: ISkill, i: number) => {\n    return (\n      <div key={\"skillrow\" + i} className=\" \" style={{ width: \"200px\" }}>\n        <Card\n          className=\"h-full p-2 cursor-pointer\"\n          title={skill.title}\n          onClick={() => {\n            setSelectedSkill(skill);\n            setShowSkillModal(true);\n          }}\n        >\n          <div className=\"my-2\"> {truncateText(skill.content, 70)}</div>\n          <div className=\"text-xs\">{timeAgo(skill.timestamp || \"\")}</div>\n        </Card>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"  \">\n      <Modal\n        title={selectedSkill?.name}\n        width={800}\n        open={showSkillModal}\n        onOk={() => {\n          setShowSkillModal(false);\n        }}\n        onCancel={() => {\n          setShowSkillModal(false);\n        }}\n      >\n        {selectedSkill && (\n          <div>\n            <div className=\"mb-2\">{selectedSkill.file_name}</div>\n\n            <CodeBlock code={selectedSkill?.content} language=\"python\" />\n          </div>\n        )}\n      </Modal>\n\n      <Modal\n        title={\n          <div>\n            <PlusIcon className=\"w-5 h-5 inline-block mr-1\" /> Create New Skill\n          </div>\n        }\n        width={800}\n        open={showNewSkillModal}\n        onOk={() => {\n          saveSkill();\n          setShowNewSkillModal(false);\n        }}\n        onCancel={() => {\n          setShowNewSkillModal(false);\n        }}\n      >\n        <>\n          <div className=\"mb-2\">\n            Provide code for a new skill or create from current conversation.\n          </div>\n          <Input\n            className=\"mb-2\"\n            placeholder=\"Skill Title\"\n            onChange={(e) => {\n              setNewSkillTitle(e.target.value);\n            }}\n          />\n          <TextArea\n            value={skillCode}\n            onChange={(e) => {\n              setSkillCode(e.target.value);\n            }}\n            rows={10}\n          />\n        </>\n      </Modal>\n\n      <div className=\"mb-2   relative\">\n        <div className=\"overflow-x-hidden scroll     rounded  \">\n          <div className=\"font-semibold mb-2 pb-1 border-b\">\n            {\" \"}\n            Skills ({skillRows.length}){\" \"}\n          </div>\n          <div className=\"text-xs mb-2 pb-1  \">\n            {\" \"}\n            Skills are python functions that agents can use to solve tasks.{\" \"}\n          </div>\n          {skills && (\n            <div\n              style={{ height: \"160px\" }}\n              className=\"w-full scroll  overflow-auto relative\"\n            >\n              <LoadingOverlay loading={loading} />\n              <div className=\"   flex flex-wrap gap-3\">{skillRows}</div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex mt-2\">\n          <div className=\"flex-1\"></div>\n          <LaunchButton\n            className=\"text-sm p-2 px-3\"\n            onClick={() => {\n              setShowNewSkillModal(true);\n            }}\n          >\n            {\" \"}\n            <PlusIcon className=\"w-5 h-5 inline-block mr-1\" />\n            New Skill\n          </LaunchButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SkillsView;\n","import { PlusIcon } from \"@heroicons/react/24/outline\";\nimport { Modal, message } from \"antd\";\nimport * as React from \"react\";\nimport { IAgentFlowSpec, IStatus } from \"../../types\";\nimport { appContext } from \"../../../hooks/provider\";\nimport { fetchJSON, getServerUrl, truncateText } from \"../../utils\";\nimport {\n  AgentFlowSpecView,\n  Card,\n  LaunchButton,\n  LoadingOverlay,\n} from \"../../atoms\";\n\nconst AgentsView = ({}: any) => {\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<IStatus | null>({\n    status: true,\n    message: \"All good\",\n  });\n\n  const { user } = React.useContext(appContext);\n  const serverUrl = getServerUrl();\n  const listAgentsUrl = `${serverUrl}/agents?user_id=${user?.email}`;\n  const saveAgentsUrl = `${serverUrl}/agents/`;\n\n  const [agents, setAgents] = React.useState<IAgentFlowSpec[] | null>([]);\n  const [selectedAgent, setSelectedAgent] =\n    React.useState<IAgentFlowSpec | null>(null);\n\n  const [showNewSkillModal, setShowNewSkillModal] = React.useState(false);\n\n  const [showAgentModal, setShowAgentModal] = React.useState(false);\n\n  const sampleAgent: IAgentFlowSpec = {\n    type: \"assistant\",\n    description: \"Sample assistant\",\n    user_id: user?.email,\n    config: {\n      name: \"sample_assistant\",\n      llm_config: {\n        config_list: [\n          {\n            model: \"gpt-4-1106-preview\",\n          },\n        ],\n        temperature: 0.1,\n        timeout: 600,\n        cache_seed: null,\n      },\n      human_input_mode: \"NEVER\",\n      max_consecutive_auto_reply: 8,\n      system_message: \" ..\",\n    },\n  };\n  const [newAgent, setNewAgent] = React.useState<IAgentFlowSpec | null>(\n    sampleAgent\n  );\n  const fetchAgent = () => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        console.log(\"agents\", data.data);\n        setAgents(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(listAgentsUrl, payLoad, onSuccess, onError);\n  };\n\n  const saveAgent = (agent: IAgentFlowSpec) => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user_id: user?.email,\n        agent: agent,\n      }),\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        // console.log(\"agents\", data.data);\n        setAgents(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n      setNewAgent(sampleAgent);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(saveAgentsUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (user) {\n      // console.log(\"fetching messages\", messages);\n      fetchAgent();\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (selectedAgent) {\n      console.log(\"selected agent\", selectedAgent);\n    }\n  }, [selectedAgent]);\n\n  React.useEffect(() => {\n    if (newAgent) {\n      console.log(\"new agent\", newAgent);\n    }\n  }, [newAgent]);\n\n  const agentRows = (agents || []).map((agent: IAgentFlowSpec, i: number) => {\n    return (\n      <div key={\"agentrow\" + i} className=\" \" style={{ width: \"200px\" }}>\n        <Card\n          className=\"h-full p-2 cursor-pointer\"\n          title={agent.config.name}\n          onClick={() => {\n            setSelectedAgent(agent);\n            setShowAgentModal(true);\n          }}\n        >\n          <div className=\"my-2\">\n            {\" \"}\n            {truncateText(agent.description || \"\", 70)}\n          </div>\n          {/* <div className=\"text-xs\">{timeAgo(skill.timestamp || \"\")}</div> */}\n        </Card>\n      </div>\n    );\n  });\n\n  const AgentModal = ({\n    agent,\n    setAgent,\n    showAgentModal,\n    setShowAgentModal,\n    handler,\n  }: {\n    agent: IAgentFlowSpec | null;\n    setAgent: (agent: IAgentFlowSpec | null) => void;\n    showAgentModal: boolean;\n    setShowAgentModal: (show: boolean) => void;\n    handler?: (agent: IAgentFlowSpec | null) => void;\n  }) => {\n    const [localAgent, setLocalAgent] = React.useState<IAgentFlowSpec | null>(\n      agent\n    );\n\n    return (\n      <Modal\n        title={\n          <>\n            Agent Specification{\" \"}\n            <span className=\"text-accent font-normal\">\n              {agent?.config.name}\n            </span>{\" \"}\n          </>\n        }\n        width={800}\n        open={showAgentModal}\n        onOk={() => {\n          setAgent(null);\n          setShowAgentModal(false);\n          if (handler) {\n            handler(localAgent);\n          }\n        }}\n        onCancel={() => {\n          setAgent(null);\n          setShowAgentModal(false);\n        }}\n      >\n        {agent && (\n          <AgentFlowSpecView\n            title=\"\"\n            flowSpec={localAgent || agent}\n            setFlowSpec={setLocalAgent}\n          />\n        )}\n        {/* {JSON.stringify(localAgent)} */}\n      </Modal>\n    );\n  };\n\n  return (\n    <div className=\"  \">\n      <AgentModal\n        agent={selectedAgent}\n        setAgent={setSelectedAgent}\n        setShowAgentModal={setShowAgentModal}\n        showAgentModal={showAgentModal}\n      />\n\n      <AgentModal\n        agent={newAgent || sampleAgent}\n        setAgent={setNewAgent}\n        setShowAgentModal={setShowNewSkillModal}\n        showAgentModal={showNewSkillModal}\n        handler={(agent: IAgentFlowSpec | null) => {\n          if (agent) {\n            saveAgent(agent);\n          }\n        }}\n      />\n\n      <div className=\"mb-2   relative\">\n        <div className=\"overflow-x-hidden scroll     rounded  \">\n          <div className=\"font-semibold mb-2 pb-1 border-b\">\n            {\" \"}\n            Agents ({agentRows.length}){\" \"}\n          </div>\n          <div className=\"text-xs mb-2 pb-1  \">\n            {\" \"}\n            Configure an agent that can reused in your agent workflow{\" \"}\n            {selectedAgent?.config.name}\n          </div>\n          {agents && (\n            <div\n              style={{ height: \"160px\" }}\n              className=\"w-full scroll  overflow-auto relative\"\n            >\n              <LoadingOverlay loading={loading} />\n              <div className=\"   flex flex-wrap gap-3\">{agentRows}</div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex mt-2\">\n          <div className=\"flex-1\"></div>\n          <LaunchButton\n            className=\"text-sm p-2 px-3\"\n            onClick={() => {\n              setShowNewSkillModal(true);\n            }}\n          >\n            {\" \"}\n            <PlusIcon className=\"w-5 h-5 inline-block mr-1\" />\n            New Agent\n          </LaunchButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AgentsView;\n","import { PlusIcon } from \"@heroicons/react/24/outline\";\nimport { Button, Modal, message } from \"antd\";\nimport * as React from \"react\";\nimport { IFlowConfig, IStatus } from \"../../types\";\nimport { appContext } from \"../../../hooks/provider\";\nimport {\n  fetchJSON,\n  getServerUrl,\n  sampleWorkflowConfig,\n  truncateText,\n} from \"../../utils\";\nimport { Card, FlowConfigViewer, LaunchButton } from \"../../atoms\";\n\nconst WorkflowView = ({}: any) => {\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<IStatus | null>({\n    status: true,\n    message: \"All good\",\n  });\n  const { user } = React.useContext(appContext);\n  const serverUrl = getServerUrl();\n  const listWorkflowsUrl = `${serverUrl}/workflows?user_id=${user?.email}`;\n  const saveWorkflowsUrl = `${serverUrl}/workflows/`;\n\n  const [workflows, setWorkflows] = React.useState<IFlowConfig[] | null>([]);\n  const [selectedWorkflow, setSelectedWorkflow] =\n    React.useState<IFlowConfig | null>(null);\n\n  const defaultConfig = sampleWorkflowConfig();\n  const [newWorkflow, setNewWorkflow] =\n    React.useState<IFlowConfig>(defaultConfig);\n\n  const [showWorkflowModal, setShowWorkflowModal] = React.useState(false);\n  const [showNewWorkflowModal, setShowNewWorkflowModal] = React.useState(false);\n\n  const fetchWorkFlow = () => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        console.log(\"workflows\", data.data);\n        setWorkflows(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(listWorkflowsUrl, payLoad, onSuccess, onError);\n  };\n\n  const saveWorkFlow = () => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user_id: user?.email,\n        workflow: newWorkflow,\n      }),\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        // console.log(\"workflows\", data.data);\n        setWorkflows(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(saveWorkflowsUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (user) {\n      // console.log(\"fetching messages\", messages);\n      fetchWorkFlow();\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (selectedWorkflow) {\n      setShowWorkflowModal(true);\n    }\n  }, [selectedWorkflow]);\n\n  const workflowRows = (workflows || []).map(\n    (workflow: IFlowConfig, i: number) => {\n      return (\n        <div key={\"workflowrow\" + i} className=\" \" style={{ width: \"200px\" }}>\n          <Card\n            className=\"h-full p-2 cursor-pointer\"\n            title={workflow.name}\n            onClick={() => {\n              setSelectedWorkflow(workflow);\n            }}\n          >\n            <div className=\"my-2\"> {truncateText(workflow.name, 70)}</div>\n            {/* <div className=\"text-xs\">{timeAgo(skill.timestamp || \"\")}</div> */}\n          </Card>\n        </div>\n      );\n    }\n  );\n\n  const WorkflowModal = ({\n    workflow,\n    setWorkflow,\n    showWorkflowModal,\n    setShowWorkflowModal,\n    handler,\n  }: {\n    workflow: IFlowConfig | null;\n    setWorkflow: (workflow: IFlowConfig | null) => void;\n    showWorkflowModal: boolean;\n    setShowWorkflowModal: (show: boolean) => void;\n    handler?: (workflow: IFlowConfig) => void;\n  }) => {\n    const [localWorkflow, setLocalWorkflow] =\n      React.useState<IFlowConfig | null>(workflow);\n\n    return (\n      <Modal\n        title={\n          <>\n            Agent Specification{\" \"}\n            <span className=\"text-accent font-normal\">\n              {localWorkflow?.name}\n            </span>{\" \"}\n          </>\n        }\n        width={800}\n        open={showWorkflowModal}\n        onOk={() => {\n          setShowWorkflowModal(false);\n        }}\n        onCancel={() => {\n          setShowWorkflowModal(false);\n          setWorkflow(null);\n        }}\n      >\n        {localWorkflow && (\n          <FlowConfigViewer\n            flowConfig={localWorkflow}\n            setFlowConfig={setLocalWorkflow}\n          />\n        )}\n      </Modal>\n    );\n  };\n\n  return (\n    <div className=\"  \">\n      <WorkflowModal\n        workflow={selectedWorkflow}\n        setWorkflow={setSelectedWorkflow}\n        showWorkflowModal={showWorkflowModal}\n        setShowWorkflowModal={setShowWorkflowModal}\n      />\n\n      {/* <Modal\n        title={\n          <div>\n            <PlusIcon className=\"w-5 h-5 inline-block mr-1\" />\n            New Workflow\n          </div>\n        }\n        width={800}\n        open={showNewWorkflowModal}\n        onOk={() => {\n          saveWorkFlow();\n          setShowNewWorkflowModal(false);\n        }}\n        onCancel={() => {\n          setShowNewWorkflowModal(false);\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setShowNewWorkflowModal(false);\n            }}\n          >\n            Back\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={loading}\n            onClick={() => {\n              saveWorkFlow();\n              setShowNewWorkflowModal(false);\n            }}\n          >\n            Save\n          </Button>,\n        ]}\n      >\n        <>\n          <div className=\"mb-2\">Create new workflow </div>\n          {workflows && workflows.length > 0 && (\n            <div>\n              <FlowConfigViewer\n                flowConfig={newWorkflow}\n                setFlowConfig={setNewWorkflow}\n              />\n            </div>\n          )}\n        </>\n      </Modal> */}\n\n      <div className=\"mb-2   relative\">\n        <div className=\"overflow-x-hidden scroll     rounded  \">\n          <div className=\"font-semibold mb-2 pb-1 border-b\">\n            {\" \"}\n            Workflows ({workflowRows.length}){\" \"}\n          </div>\n          <div className=\"text-xs mb-2 pb-1  \">\n            {\" \"}\n            Configure an agent workflow that can be used to handle tasks.\n          </div>\n          {workflows && (\n            <div\n              style={{ height: \"160px\" }}\n              className=\"w-full scroll  overflow-auto relative\"\n            >\n              <div className=\"   flex flex-wrap gap-3\">{workflowRows}</div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex mt-2\">\n          <div className=\"flex-1\"></div>\n          <LaunchButton\n            className=\"text-sm p-2 px-3\"\n            onClick={() => {\n              setShowNewWorkflowModal(true);\n            }}\n          >\n            {\" \"}\n            <PlusIcon className=\"w-5 h-5 inline-block mr-1\" />\n            New Workflow\n          </LaunchButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowView;\n","import * as React from \"react\";\nimport { BounceLoader } from \"../../atoms\";\nimport SkillsView from \"./skills\";\nimport AgentsView from \"./agents\";\nimport WorkflowView from \"./workflow\";\n\nconst BuildView = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  return (\n    <div className=\" \">\n      <div className=\"mb-4 text-2xl\">Build </div>\n      <div className=\"mb-4 text-secondary\">\n        {\" \"}\n        Create skills, agents and workflows for building multiagent capabilities{\" \"}\n      </div>\n\n      <div>\n        <SkillsView />\n        <AgentsView />\n        <WorkflowView />\n      </div>\n\n      {loading && (\n        <div className=\"w-full text-center boder mt-4\">\n          <div>\n            {\" \"}\n            <BounceLoader />\n          </div>\n          loading gallery\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BuildView;\n","import * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql } from \"gatsby\";\nimport BuildView from \"../components/views/builder/build\";\n\n// markup\nconst IndexPage = ({ data }: any) => {\n  return (\n    <Layout meta={data.site.siteMetadata} title=\"Home\" link={\"/build\"}>\n      <main style={{ height: \"100%\" }} className=\" h-full \">\n        <BuildView />\n      </main>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query HomePageQuery {\n    site {\n      siteMetadata {\n        description\n        title\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["_ref","loading","setLoading","React","error","setError","status","message","user","appContext","serverUrl","getServerUrl","listSkillsUrl","email","saveSkillsUrl","skills","setSkills","selectedSkill","setSelectedSkill","showSkillModal","setShowSkillModal","showNewSkillModal","setShowNewSkillModal","newSkillTitle","setNewSkillTitle","sampleSkill","getSampleSkill","skillCode","setSkillCode","fetchJSON","method","headers","data","success","err","skillRows","map","skill","i","key","className","style","width","Card","title","onClick","truncateText","content","timeAgo","timestamp","Modal","name","open","onOk","onCancel","file_name","CodeBlock","code","language","PlusIcon","saveSkill","user_id","payLoad","Accept","body","JSON","stringify","Input","placeholder","onChange","e","target","value","TextArea","rows","length","height","LoadingOverlay","LaunchButton","listAgentsUrl","saveAgentsUrl","agents","setAgents","selectedAgent","setSelectedAgent","showAgentModal","setShowAgentModal","sampleAgent","type","description","config","llm_config","config_list","model","temperature","timeout","cache_seed","human_input_mode","max_consecutive_auto_reply","system_message","newAgent","setNewAgent","console","log","agentRows","agent","AgentModal","_ref2","setAgent","handler","localAgent","setLocalAgent","AgentFlowSpecView","flowSpec","setFlowSpec","saveAgent","listWorkflowsUrl","workflows","setWorkflows","selectedWorkflow","setSelectedWorkflow","defaultConfig","sampleWorkflowConfig","newWorkflow","setNewWorkflow","showWorkflowModal","setShowWorkflowModal","showNewWorkflowModal","setShowNewWorkflowModal","workflowRows","workflow","WorkflowModal","setWorkflow","localWorkflow","setLocalWorkflow","FlowConfigViewer","flowConfig","setFlowConfig","BuildView","SkillsView","AgentsView","WorkflowView","BounceLoader","Layout","meta","site","siteMetadata","link"],"sourceRoot":""}