{"version":3,"file":"component---src-pages-index-tsx-88edf74023e81a1d1b79.js","mappings":"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","sources":["webpack://AutoGen_Studio/./node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","webpack://AutoGen_Studio/./src/components/views/playground/workflows.tsx","webpack://AutoGen_Studio/./src/components/views/playground/sessions.tsx","webpack://AutoGen_Studio/./src/components/views/playground/sidebar.tsx","webpack://AutoGen_Studio/./src/components/views/playground/ra.tsx","webpack://AutoGen_Studio/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M8.25 4.5l7.5 7.5-7.5 7.5\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","import { Select, message } from \"antd\";\nimport * as React from \"react\";\nimport { LoadingOverlay } from \"../../atoms\";\nimport { IFlowConfig, IStatus } from \"../../types\";\nimport { useConfigStore } from \"../../../hooks/store\";\nimport { fetchJSON, getServerUrl } from \"../../utils\";\nimport { appContext } from \"../../../hooks/provider\";\nimport { Link } from \"gatsby\";\n\nconst AgentsWorkflowView = () => {\n  const [error, setError] = React.useState<IStatus | null>({\n    status: true,\n    message: \"All good\",\n  });\n\n  const [loading, setLoading] = React.useState(false);\n  const workflowConfig = useConfigStore((state) => state.workflowConfig);\n  const setWorkflowConfig = useConfigStore((state) => state.setWorkflowConfig);\n\n  const { user } = React.useContext(appContext);\n  const serverUrl = getServerUrl();\n  const listWorkflowsUrl = `${serverUrl}/workflows?user_id=${user?.email}`;\n\n  const [workflowConfigs, setWorkflowConfigs] = React.useState<IFlowConfig[]>(\n    []\n  );\n\n  const [selectedConfig, setSelectedConfig] = React.useState<number>(0);\n\n  const fetchWorkFlow = () => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n\n        setWorkflowConfigs(data.data);\n        if (data.data.length > 0) {\n          setWorkflowConfig(data.data[0]);\n        }\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(listWorkflowsUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (user) {\n      // console.log(\"fetching messages\", messages);\n      fetchWorkFlow();\n    }\n  }, []);\n\n  return (\n    <div className=\" mb-4 relative\">\n      <div className=\"font-semibold pb-2 border-b\">Agent Workflow </div>\n      <div className=\"text-xs mt-2 mb-2 pb-1  \">\n        {\" \"}\n        Select or create an agent workflow.{\" \"}\n      </div>\n\n      <div className=\"relative mt-2 \">\n        <LoadingOverlay loading={loading} />\n\n        {workflowConfigs && workflowConfigs.length > 0 && (\n          <Select\n            className=\"w-full\"\n            value={workflowConfigs[selectedConfig].name}\n            onChange={(value: any) => {\n              setSelectedConfig(value);\n              setWorkflowConfig(workflowConfigs[value]);\n            }}\n            options={\n              workflowConfigs.map((config, index) => {\n                return { label: config.name, value: index };\n              }) as any\n            }\n          />\n        )}\n        <div className=\"mt-2 text-xs\">\n          {\" \"}\n          Create new workflows{\" \"}\n          <span className=\"text-accent\">\n            {\" \"}\n            <Link to=\"/build\">here</Link>\n          </span>{\" \"}\n        </div>\n      </div>\n      {!workflowConfigs ||\n        (workflowConfigs && workflowConfigs.length === 0 && (\n          <div className=\"p-1 border rounded text-xs px-2 text-secondary\">\n            {\" \"}\n            No agent workflows found.\n          </div>\n        ))}\n    </div>\n  );\n};\nexport default AgentsWorkflowView;\n","import {\n  ClockIcon,\n  PlusIcon,\n  QueueListIcon,\n  TrashIcon,\n} from \"@heroicons/react/24/outline\";\nimport { Modal, message } from \"antd\";\nimport * as React from \"react\";\nimport { IChatSession, IStatus } from \"../../types\";\nimport { appContext } from \"../../../hooks/provider\";\nimport {\n  fetchJSON,\n  getSampleSkill,\n  getServerUrl,\n  timeAgo,\n  truncateText,\n} from \"../../utils\";\nimport {\n  CodeBlock,\n  CollapseBox,\n  LaunchButton,\n  LoadBox,\n  LoadingOverlay,\n  MarkdownView,\n} from \"../../atoms\";\nimport { useConfigStore } from \"../../../hooks/store\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst SessionsView = ({}: any) => {\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<IStatus | null>({\n    status: true,\n    message: \"All good\",\n  });\n\n  const { user } = React.useContext(appContext);\n  const serverUrl = getServerUrl();\n  const listSessionUrl = `${serverUrl}/sessions?user_id=${user?.email}`;\n  const createSessionUrl = `${serverUrl}/sessions`;\n  const publishSessionUrl = `${serverUrl}/sessions/publish`;\n\n  const sessions = useConfigStore((state) => state.sessions);\n  const workflowConfig = useConfigStore((state) => state.workflowConfig);\n  const setSessions = useConfigStore((state) => state.setSessions);\n  // const [session, setSession] =\n  //   React.useState<IChatSession | null>(null);\n  const session = useConfigStore((state) => state.session);\n  const setSession = useConfigStore((state) => state.setSession);\n\n  const fetchSessions = () => {\n    setError(null);\n    setLoading(true);\n    // const fetch;\n    const payLoad = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        // console.log(\"sesssions\", data);\n        setSessions(data.data);\n        if (data.data && data.data.length === 0) {\n          createSession();\n        }\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(listSessionUrl, payLoad, onSuccess, onError);\n  };\n\n  const publishSession = () => {\n    setError(null);\n    setLoading(true);\n\n    const body = {\n      user_id: user?.email,\n      session: session,\n      tags: [\"published\"],\n    };\n    // const fetch;\n    const payLoad = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        // setSessions(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(publishSessionUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (sessions && sessions.length > 0) {\n      setSession(sessions[0]);\n    }\n  }, [sessions]);\n\n  const createSession = () => {\n    setError(null);\n    setLoading(true);\n\n    const body = {\n      user_id: user?.email,\n      session:\n        session === null\n          ? {\n              user_id: user?.email,\n              flow_config: workflowConfig,\n              session_id: null,\n            }\n          : session,\n    };\n    // const fetch;\n    const payLoad = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    };\n\n    const onSuccess = (data: any) => {\n      if (data && data.status) {\n        message.success(data.message);\n        setSessions(data.data);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(createSessionUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (user) {\n      // console.log(\"fetching messages\", messages);\n      fetchSessions();\n    }\n  }, []);\n\n  const sessionRows = sessions.map((data: IChatSession, index: number) => {\n    const isSelected = session?.id === data.id;\n    const rowClass = isSelected\n      ? \"bg-accent text-white\"\n      : \"bg-secondary text-primary\";\n    return (\n      <div key={\"sessionsrow\" + index} className=\"  mb-2 pb-1   \">\n        <div\n          className={`rounded p-2 cursor-pointer ${rowClass}`}\n          role=\"button\"\n          onClick={() => {\n            setSession(data);\n          }}\n        >\n          <div className=\"text-xs\">{truncateText(data.id, 27)}</div>\n          <div className=\"text-xs text-right \">{timeAgo(data.timestamp)} </div>\n        </div>\n        <div className=\"flex mt-1 text-secondary\">\n          <div className=\"flex-1\"></div>\n\n          <div\n            role=\"button\"\n            onClick={() => {\n              publishSession();\n            }}\n            className=\"text-xs px-2  hover:text-accent cursor-pointer\"\n          >\n            {\" \"}\n            publish{\" \"}\n          </div>\n        </div>\n        {/* <div className=\"border-b border-dashed mx-2 mt-1\"></div> */}\n      </div>\n    );\n  });\n\n  let windowHeight, skillsMaxHeight;\n  if (typeof window !== \"undefined\") {\n    windowHeight = window.innerHeight;\n    skillsMaxHeight = windowHeight - 400 + \"px\";\n  }\n\n  return (\n    <div className=\"  \">\n      <div className=\"mb-2 relative\">\n        <div className=\"\">\n          <div className=\"font-semibold mb-2 pb-1 border-b\">Sessions </div>\n          <div className=\"text-xs mb-2 pb-1  \">\n            {\" \"}\n            Create a new session or select an existing session to view chat.\n          </div>\n          <div\n            style={{\n              maxHeight: \"300px\",\n            }}\n            className=\"mb-4 overflow-y-scroll scroll rounded relative \"\n          >\n            <LoadingOverlay loading={loading} />\n            {sessionRows}\n          </div>\n          {(!sessions || sessions.length == 0) && (\n            <div className=\"text-xs text-gray-500\">\n              No sessions found. Create a new session to get started.\n            </div>\n          )}\n        </div>\n        <div className=\"flex gap-x-2\">\n          <div className=\"flex-1\"></div>\n          <LaunchButton\n            className=\"text-sm p-2 px-3\"\n            onClick={() => {\n              createSession();\n            }}\n          >\n            {\" \"}\n            <PlusIcon className=\"w-5 h-5 inline-block mr-1\" />\n            New\n          </LaunchButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SessionsView;\n","import { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/24/outline\";\nimport * as React from \"react\";\nimport AgentsView from \"./workflows\";\nimport SessionsView from \"./sessions\";\nimport { useConfigStore } from \"../../../hooks/store\";\n\nconst SideBarView = () => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  const minWidth = isOpen ? \"270px\" : \"50px\";\n\n  let windowHeight, sidebarMaxHeight;\n  if (typeof window !== \"undefined\") {\n    windowHeight = window.innerHeight;\n    sidebarMaxHeight = windowHeight - 180 + \"px\";\n  }\n\n  const workflowConfig = useConfigStore((state) => state.workflowConfig);\n\n  return (\n    <div\n      style={{\n        minWidth: minWidth,\n        maxWidth: minWidth,\n        height: \"calc(100vh - 190px)\",\n      }}\n      className=\"    \"\n    >\n      <div className=\" transition overflow-hidden duration-300  flex flex-col   h-full p-2 overflow-y-scroll scroll rounded \">\n        <div className={`${isOpen ? \"\" : \"hidden\"}  `}>\n          <AgentsView />\n          {workflowConfig && <SessionsView />}\n        </div>\n      </div>\n      <div\n        onClick={() => setIsOpen(!isOpen)}\n        role=\"button\"\n        className=\" hover:text-accent duration-150  \"\n      >\n        {isOpen ? (\n          <div className=\"mt-4  \">\n            {\" \"}\n            <ChevronLeftIcon className=\"w-6 h-6  inline-block    rounded\" />{\" \"}\n            <span className=\"text-xs \"> close sidebar</span>\n          </div>\n        ) : (\n          <ChevronRightIcon className=\"w-6 h-6   inline-block   font-bold rounded \" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SideBarView;\n","import * as React from \"react\";\nimport { IChatSession, IMessage, IStatus } from \"../../types\";\nimport { fetchJSON, getServerUrl, setLocalStorage } from \"../../utils\";\nimport ChatBox from \"./chatbox\";\nimport { appContext } from \"../../../hooks/provider\";\nimport { message } from \"antd\";\nimport SideBarView from \"./sidebar\";\nimport { useConfigStore } from \"../../../hooks/store\";\n\nconst RAView = () => {\n  const session: IChatSession | null = useConfigStore((state) => state.session);\n  const [loading, setLoading] = React.useState(false);\n  const [messages, setMessages] = React.useState<IMessage[] | null>(null);\n  const [skillUpdated, setSkillUpdated] = React.useState(\"default\");\n\n  const skillup = {\n    get: skillUpdated,\n    set: setSkillUpdated,\n  };\n\n  const [config, setConfig] = React.useState(null);\n\n  React.useEffect(() => {\n    setLocalStorage(\"ara_config\", config);\n  }, [config]);\n\n  const [error, setError] = React.useState<IStatus | null>({\n    status: true,\n    message: \"All good\",\n  });\n\n  const { user } = React.useContext(appContext);\n  const serverUrl = getServerUrl();\n  const fetchMessagesUrl = `${serverUrl}/messages?user_id=${user?.email}&session_id=${session?.id}`;\n\n  const fetchMessages = () => {\n    setError(null);\n    setLoading(true);\n    setMessages(null);\n    // const fetch;\n    const payLoad = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    // console.log(\"payload\", payLoad);\n    const onSuccess = (data: any) => {\n      // console.log(data);\n      if (data && data.status) {\n        setMessages(data.data);\n        message.success(data.message);\n      } else {\n        message.error(data.message);\n      }\n      setLoading(false);\n    };\n    const onError = (err: any) => {\n      setError(err);\n      message.error(err.message);\n      setLoading(false);\n    };\n    fetchJSON(fetchMessagesUrl, payLoad, onSuccess, onError);\n  };\n\n  React.useEffect(() => {\n    if (user && session) {\n      // console.log(\"fetching messages\", messages);\n      fetchMessages();\n    }\n  }, [session]);\n\n  return (\n    <div className=\"h-full   \">\n      <div className=\"flex h-full   \">\n        <div className=\"  mr-2  rounded\">\n          <SideBarView />\n        </div>\n        <div className=\" flex-1  \">\n          {\" \"}\n          <ChatBox initMessages={messages} />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default RAView;\n","import * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql } from \"gatsby\";\nimport RAView from \"../components/views/playground/ra\";\n\n// markup\nconst IndexPage = ({ data }: any) => {\n  return (\n    <Layout meta={data.site.siteMetadata} title=\"Home\" link={\"/\"}>\n      <main style={{ height: \"100%\" }} className=\" h-full \">\n        <RAView />\n      </main>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query HomePageQuery {\n    site {\n      siteMetadata {\n        description\n        title\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["title","titleId","props","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","AgentsWorkflowView","error","setError","React","status","message","loading","setLoading","setWorkflowConfig","useConfigStore","state","workflowConfig","user","appContext","listWorkflowsUrl","getServerUrl","email","workflowConfigs","setWorkflowConfigs","selectedConfig","setSelectedConfig","fetchJSON","method","headers","data","success","length","err","className","LoadingOverlay","Select","value","name","onChange","options","map","config","index","label","Link","to","_ref","serverUrl","listSessionUrl","createSessionUrl","publishSessionUrl","sessions","setSessions","session","setSession","createSession","body","user_id","flow_config","session_id","payLoad","JSON","stringify","sessionRows","rowClass","key","role","onClick","truncateText","timeAgo","timestamp","publishSession","tags","windowHeight","skillsMaxHeight","window","innerHeight","style","maxHeight","LaunchButton","PlusIcon","SideBarView","isOpen","setIsOpen","minWidth","sidebarMaxHeight","maxWidth","height","AgentsView","SessionsView","ChevronLeftIcon","ChevronRightIcon","RAView","messages","setMessages","skillUpdated","setSkillUpdated","setConfig","setLocalStorage","fetchMessagesUrl","ChatBox","initMessages","Layout","meta","site","siteMetadata","link"],"sourceRoot":""}