"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import commons_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Request._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        FORWARD: Request._Type.ValueType  # 0
        ABORT: Request._Type.ValueType  # 1
        GET_STATUS: Request._Type.ValueType  # 2
        GET_MODULES: Request._Type.ValueType  # 3
        GET_MODULE: Request._Type.ValueType  # 4
        REGISTER_MODULE: Request._Type.ValueType  # 5
        DEREGISTER_MODULE: Request._Type.ValueType  # 6
        UPDATE_MODULE: Request._Type.ValueType  # 7

    class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
    FORWARD: Request.Type.ValueType  # 0
    ABORT: Request.Type.ValueType  # 1
    GET_STATUS: Request.Type.ValueType  # 2
    GET_MODULES: Request.Type.ValueType  # 3
    GET_MODULE: Request.Type.ValueType  # 4
    REGISTER_MODULE: Request.Type.ValueType  # 5
    DEREGISTER_MODULE: Request.Type.ValueType  # 6
    UPDATE_MODULE: Request.Type.ValueType  # 7

    @typing_extensions.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    MODULE_ID_FIELD_NUMBER: builtins.int
    TENSOR_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    type: global___Request.Type.ValueType
    module_id: builtins.str
    @property
    def tensor(self) -> commons_pb2.Tensor: ...
    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        type: global___Request.Type.ValueType = ...,
        module_id: builtins.str | None = ...,
        tensor: commons_pb2.Tensor | None = ...,
        parameters: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_module_id", b"_module_id", "_tensor", b"_tensor", "module_id", b"module_id", "tensor", b"tensor"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_module_id", b"_module_id", "_tensor", b"_tensor", "module_id", b"module_id", "parameters", b"parameters", "tensor", b"tensor", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_module_id", b"_module_id"]) -> typing_extensions.Literal["module_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_tensor", b"_tensor"]) -> typing_extensions.Literal["tensor"] | None: ...

global___Request = Request

@typing_extensions.final
class Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Response._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        OK: Response._Type.ValueType  # 0
        ERROR: Response._Type.ValueType  # 1

    class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
    OK: Response.Type.ValueType  # 0
    ERROR: Response.Type.ValueType  # 1

    TYPE_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    MODULE_ID_FIELD_NUMBER: builtins.int
    TENSOR_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    type: global___Response.Type.ValueType
    message: builtins.str
    module_id: builtins.str
    @property
    def tensor(self) -> commons_pb2.Tensor: ...
    status: commons_pb2.Status.ValueType
    def __init__(
        self,
        *,
        type: global___Response.Type.ValueType = ...,
        message: builtins.str | None = ...,
        module_id: builtins.str | None = ...,
        tensor: commons_pb2.Tensor | None = ...,
        status: commons_pb2.Status.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_message", b"_message", "_module_id", b"_module_id", "_status", b"_status", "_tensor", b"_tensor", "message", b"message", "module_id", b"module_id", "status", b"status", "tensor", b"tensor"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_message", b"_message", "_module_id", b"_module_id", "_status", b"_status", "_tensor", b"_tensor", "message", b"message", "module_id", b"module_id", "status", b"status", "tensor", b"tensor", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_message", b"_message"]) -> typing_extensions.Literal["message"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_module_id", b"_module_id"]) -> typing_extensions.Literal["module_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_status", b"_status"]) -> typing_extensions.Literal["status"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_tensor", b"_tensor"]) -> typing_extensions.Literal["tensor"] | None: ...

global___Response = Response
