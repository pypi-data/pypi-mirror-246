"""Defines the common interface for a vulnerability scanner.

--------------------------------------------------------------------------------
SPDX-FileCopyrightText: Copyright Â© 2022 Lockheed Martin <open.source@lmco.com>
SPDX-FileName: hopprcop/vulnerability_scanner.py
SPDX-FileType: SOURCE
SPDX-License-Identifier: MIT
--------------------------------------------------------------------------------
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
--------------------------------------------------------------------------------
"""
from __future__ import annotations

import distutils.spawn
import os

from typing import TYPE_CHECKING, ClassVar

import typer

from packageurl import PackageURL


if TYPE_CHECKING:
    from hoppr import Sbom, Vulnerability


class VulnerabilityMeta(type):
    """a meta class to define interface expectations of a vulnerability scanner."""

    @classmethod
    def __instancecheck__(cls, instance: object) -> bool:
        return cls.__subclasscheck__(type(instance))

    @classmethod
    def __subclasscheck__(cls, subclass: type) -> bool:
        return (
            hasattr(subclass, "get_vulnerabilities_by_purl")
            and callable(subclass.get_vulnerabilities_by_purl)
            and hasattr(subclass, "get_vulnerabilities_by_sbom")
            and callable(subclass.get_vulnerabilities_by_sbom)
            and hasattr(subclass, "should_activate")
            and callable(subclass.should_activate)
        )


class VulnerabilitySuper(metaclass=VulnerabilityMeta):
    """A super class that defines the expected interface for a vulnerability scanner."""

    required_tools_on_path: ClassVar[list[str]] = []
    required_environment_variables: ClassVar[list[str]] = []
    offline_mode_supported = False
    offline_mode = False

    def get_vulnerabilities_by_purl(self, purls: list[PackageURL]) -> dict[str, list[Vulnerability]]:
        """Get the vulnerabilities for a list of package URLS (purls).

        Return a dictionary of package URL to vulnerabilities or none if no vulnerabilities are found.
        """
        return {}

    def get_vulnerabilities_by_sbom(self, bom: Sbom) -> dict[str, list[Vulnerability]]:
        """Accepts a cyclone dx compatible BOM and returns a list of vulnerabilities.

        Return a dictionary of package URL to vulnerabilities or none if no vulnerabilities are found.
        """
        purls = [PackageURL.from_string(component.purl) for component in bom.components or [] if component.purl]

        return self.get_vulnerabilities_by_purl(purls)

    def should_activate(self) -> bool:
        """Checks if the vulnerability scanner should activate based on it's requirements."""
        activate = True

        if missing_tools := [tool for tool in self.required_tools_on_path if not distutils.spawn.find_executable(tool)]:
            activate = False
            typer.echo(
                f"{type(self).__name__} is not activated because required "
                f"tools are not on the PATH: {', '.join(missing_tools)}"
            )

        if missing_env := set(self.required_environment_variables).difference(os.environ):
            activate = False
            typer.echo(
                f"{type(self).__name__} is not activated because required "
                f"environment variables are not set: {', '.join(missing_env)}"
            )

        if self.offline_mode and not self.offline_mode_supported:
            activate = False
            typer.echo(f"{type(self).__name__} is not activated because offline mode is not supported by this scanner")

        return activate
